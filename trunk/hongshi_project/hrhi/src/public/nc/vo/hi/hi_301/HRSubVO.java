/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.vo.hi.hi_301;

import java.util.ArrayList;
import nc.vo.pub.*;
import nc.vo.pub.lang.*;
import nc.vo.hi.hi_401.SetdictVO;
import java.util.Vector;
import nc.vo.hi.pub.*;
import nc.vo.hi.hi_401.SetdictItemVO;
import nc.vo.hr.tools.pub.ArrayUtils;
import nc.vo.hr.tools.pub.StringUtils;

/**
 * 用于HR风格子表查询的通用VO
 * V55版之前继承CircularlyAccessibleValueObject
 * V55版修改为直接继承UAP的GeneralSuperVO，原来的接口都维持不变，做了一些代码的优化
 *
 * 创建日期：(2001-4-29)
 * @author：原作者不详
 * @author：wangxing 修改于2008-05-23
 */
public class HRSubVO extends CircularlyAccessibleValueObject {

	/**
	 * 默认序列化ID
	 */
	private static final long serialVersionUID = 1L;
	// 人员基本档案主键，维持古旧代码的一致性，不使用该字段
	private String pk_psnbasdoc = null;
	// 字段的中文描述
	private String[] m_fielddesc = null;
	// 字段的名称
	private String[] m_fieldnames = null;
	// 字段的数据类型
	private Integer[] m_fieldtypes;
	// 字段对应的值
	private Object[] m_fieldvalues = null;
	// 本记录的外键
	public String m_pk;
	// 本记录的主键
	public String m_pk_sub;
	// 主表外键字段名
	private String pkname;
	// 子表主键字段名
	private String pksubname;
	// 表名称
	private String tablename;
	
	// 字段对应的显示值
	private Object[] m_fieldshowvalues = null;
	/** 针对是主键的字段，在列表中需要增加一个字段用于显示名称，原来的字段用于保存主键，新增加的字段的命名规则是原字段名加上REF_SHOW_NAME的值 */
    public static String REF_SHOW_NAME = "_showname";
    
/**
 * 使用主键字段进行初始化的构造子。
 *
 * 创建日期：(2001-4-29)
 */
public HRSubVO() {
	super();

}

/**
 * HRSubVO 构造子注解.
 */
public HRSubVO(String tableName, String pksubname, String pkname) {
	super();
	tablename = tableName;
	this.pkname = pkname;
	this.pksubname = pksubname;
	
}

/**
 * 使用主键进行初始化的构造子。
 *
 * 创建日期：(2001-4-29)
 * @param ??fieldNameForMethod?? 主键值
 */
public HRSubVO(SetdictVO setdict)
{

	if (setdict != null)
	{
		if (setdict.getChildrenVO() != null && setdict.getChildrenVO().length != 0)

		{   m_fieldnames=new String[setdict.getChildrenVO().length];
			m_fieldtypes=new Integer[setdict.getChildrenVO().length];
			m_fieldvalues=new Object[setdict.getChildrenVO().length];
			m_fieldshowvalues=new Object[setdict.getChildrenVO().length];
			for (int i = 0; i < setdict.getChildrenVO().length; i++){
				SetdictItemVO item = (SetdictItemVO) setdict.getChildrenVO()[i];
				setFieldName(i, item.getFldcode());
				setFieldType(i, item.getDatatype());
			}
		}
	}

}

/**
 * 根类Object的方法,克隆这个VO对象。
 * 注意，本类克隆时不支持子类扩展字段的克隆
 *
 * 创建日期：(2001-4-29)
 */
public Object clone() {
	HRSubVO subVO = (HRSubVO)super.clone();
	// 你在下面复制本VO对象的所有属性：

	return subVO;
}

/**
 * 根据一个初始VO结构,创建同样结构的VO的数组.
 * 创建日期:(2003-12-29 11:06:55)
 * @return uperVO[]	返回新创建的VO数组
 * @param HRSubVO	初始VO结构
 * @param arrayLength int	要创建的数组长度
 * @param bWithAttributeName boolean	是否复制AttributeNames属性
 */
public static HRSubVO[] createVOArray(
	HRSubVO initVO,
    int arrayLength,
    boolean bWithAttributeName) {
    if (initVO == null || arrayLength <= 0)
        return null;

    HRSubVO[] results = new HRSubVO[arrayLength];
    for (int i = 0; i < arrayLength; i++) {
        results[i] =
            new HRSubVO(
                initVO.getTableName(),
                initVO.getPKFieldName(),
                initVO.getParentPKFieldName());
        if (bWithAttributeName && initVO.getFieldnames()!=null && initVO.getFieldnames().length>0){
            results[i].setFieldNames(initVO.getFieldnames());
            results[i].setFieldTypes(initVO.getFieldTypes());
            results[i].setFielddesc(initVO.getFielddesc());
            results[i].setFieldValues(new Object[initVO.getFieldnames().length]);
            results[i].setFieldShowValues(new Object[initVO.getFieldnames().length]);
        }//end if
    }//end if
    
    return results;
}

/**
 * 返回数值对象的显示名称。
 *
 * 创建日期：(2001-4-29)
 * @return java.lang.String 返回数值对象的显示名称。
 */
public String getEntityName() {

	return "Data";
}
/**
 * 此处插入方法说明。
 * 创建日期：(2002-3-23 11:24:40)
 */
public String getPrimaryKey()  {

	return m_pk_sub;
}
/**
 * 此处插入方法说明。
 * 创建日期：(2002-3-23 11:24:40)
 */
public void setPrimaryKey(String key) {

	m_pk_sub=key;
}

/**
 * 验证对象各属性之间的数据逻辑正确性。
 *
 * 创建日期：(2001-4-29)
 * @exception nc.vo.pub.ValidationException 如果验证失败，抛出
 *     ValidationException，对错误进行解释。
 */
public void validate() throws nc.vo.pub.ValidationException {
	ArrayList errFields = new ArrayList(); // errFields record those null fields that cannot be null.
	// 检查是否为不允许空的字段赋了空值，你可能需要修改下面的提示信息：
	/*if (m_pk_sub == null) {
		errFields.add(new String("主键"));
	}*/
	if (m_pk == null) {
		errFields.add(new String(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("600704","UPP600704-000176")/*@res "父表主键"*/));
	}
	if (tablename.equalsIgnoreCase("hi_psndoc_deptchg"))
	{
		String dept = (String) getAttributeValue("pk_deptdoc");
		if (dept == null || dept.trim().length() <= 0)
			errFields.add(new String(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("600704","upt600704-000139")/*@res "部门"*/));
		String psncl = (String) getAttributeValue("pk_psncl");
		if (psncl == null || psncl.trim().length() <= 0)
		{
			errFields.add(new String(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("600704","upt600704-000042")/*@res "人员类别"*/));
		}
	}	// construct the exception message:
	StringBuffer message = new StringBuffer();
	message.append(nc.vo.bd.IBDMsg.MSG_NULL_FIELD);//message.append("下列字段不能为空：");
	if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append(",");//message.append("、");
			message.append(temp[i]);
		}
		// throw the exception:
		throw new NullFieldException(message.toString());
	}

}

/**
 *  覆盖可能造成伤害的父类方法
 *  @deprecated
 */
public void setAttributeNames(String[] names) {
	
}

/**
 * <p>需要在一个循环中访问的属性的名称数组。
 * <p>
 * 创建日期：(??Date??)
 * @return java.lang.String[]
 */
public String[] getAttributeNames(){
	String[] names =
		new String[] {getPkname(),getPksubname() };
	String allNames[] = new String[names.length + getFieldnames().length];
	System.arraycopy(names, 0, allNames, 0, names.length);
	System.arraycopy(getFieldnames(), 0, allNames, names.length, getFieldnames().length);
	return allNames;
}

/**
 *  <p>根据一个属性名称字符串该属性的值。
 *  <p>
 * 创建日期：(2001-4-29)
 * @param key java.lang.String
 */
public Object getAttributeValue(String attributeName)
{
	// 如果是显示值字段
	if(attributeName.endsWith(REF_SHOW_NAME)){
		attributeName = StringUtils.delete(attributeName, REF_SHOW_NAME);
		return getAttributeShowValue(attributeName);
	}//end if
	
	
	if (attributeName.equalsIgnoreCase(getPkname()))
	{
		return getPk_main();
	}
	else if (attributeName.equalsIgnoreCase(getPksubname()))
	{
		return getPrimaryKey();
	}
	else
	{
		for (int i = 0; i < getFieldnames().length; i++)
		{
			if (getFieldnames()[i] == null)
				continue;
			if (getFieldValues() != null)
			{
				if (getFieldnames()[i].equals(attributeName))
					return getFieldValues()[i];
			}
			else
				return null;
		}
		return null;
	}

}

/**
 *  <p>根据一个属性名称字符串该属性的值。
 *  <p>
 * 创建日期：(2001-4-29)
 * @param key java.lang.String
 */
public Object getAttributeShowValue(String attributeName)
{
	if (attributeName.equalsIgnoreCase(getPkname()))
	{
		return getPk_main();
	}
	else if (attributeName.equalsIgnoreCase(getPksubname()))
	{
		return getPrimaryKey();
	}
	else
	{
		for (int i = 0; i < getFieldnames().length; i++)
		{
			if (getFieldnames()[i] == null)
				continue;
			if (m_fieldshowvalues != null)
			{
				if (getFieldnames()[i].equals(attributeName))
					return m_fieldshowvalues[i]==null?m_fieldvalues[i]:m_fieldshowvalues[i];
			}
			else
				return null;
		}
		return null;
	}
}

/**
 *  <p>对参数name对型的属性设置值。
 *  <p>
 * 创建日期：(2001-4-29)
 * @param key java.lang.String
 */
public void setAttributeShowValue(String name, Object value)
{
	if (name.equalsIgnoreCase(getPkname()))
	{
		setPk_main((String)value);
	}
	else if (name.equalsIgnoreCase(getPksubname()))
	{
		setPrimaryKey((String)value);
	}
	else
	{

		for (int i = 0; i < getFieldnames().length; i++)
		{
			if (getFieldnames()[i].equals(name))
			{

				if (value == null)
					this.m_fieldshowvalues[i] =null;
				else
					this.m_fieldshowvalues[i] = value;
			}
		}
	}
}

/**
 *  <p>对参数name对型的属性设置值。
 *  <p>
 * 创建日期：(2001-4-29)
 * @param key java.lang.String
 */
public void setAttributeValue(String name, Object value)
{
	// 如果是显示值字段
	if(name.endsWith(REF_SHOW_NAME)){
		name = StringUtils.delete(name, REF_SHOW_NAME);
		setAttributeShowValue(name, value);
		return;
	}//end if
	
	if (name.equalsIgnoreCase(getPkname()))
	{
		setPk_main((String)value);
	}
	else if (name.equalsIgnoreCase(getPksubname()))
	{
		setPrimaryKey((String)value);
	}
	else
	{

		for (int i = 0; i < getFieldnames().length; i++)
		{
			if (getFieldnames()[i].equals(name))
			{

				if (value == null)
					getFieldValues()[i] =null;
				else
					getFieldValues()[i] = value;
			}
		}
	}
}

/**
 * 此处插入方法说明。
 * 创建日期：(2003-11-5 20:30:17)
 * @return int
 * @param attributeName java.lang.String
 */
public int getAttributeType(String attributeName) {
	if (attributeName.equalsIgnoreCase(getPkname())) {
		return CommonValue.DATATYPE_STRING;
	} else
		if (attributeName.equalsIgnoreCase(getPksubname())) {
			return CommonValue.DATATYPE_STRING;
		} else {
			if (getFieldnames() != null && getFieldnames().length > 0) {
				for (int i = 0; i < getFieldnames().length; i++) {
					if (getFieldnames()[i] == null)
						continue;
					if (getFieldValues() != null) {
						if (getFieldnames()[i].equals(attributeName)) {
							if (getFieldTypes()[i] != null)
								return getFieldTypes()[i].intValue();
							else
								continue;
						} else
							continue;
					}

				}
			}
			return -1;
		}
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 15:13:03)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @return java.lang.String[]
 */
public String[] getFielddesc() {
	return m_fielddesc;
}

/**
 * 此处插入方法说明。
 * 创建日期：(2001-4-29 15:38:22)
 * @return java.lang.Object[]
 */
public String[] getFieldnames() {
	return m_fieldnames;
}

/**
 * 此处插入方法说明。
 * 创建日期：(2002-3-23 11:24:40)
 */
public Integer[] getFieldTypes() {
	return 	 m_fieldtypes;

	}

/**
 * 此处插入方法说明。
 * 创建日期：(2001-4-29 15:38:22)
 * @return java.lang.Object[]
 */
public Object[] getFieldValues() {
	return m_fieldvalues;
}

/**
 * 属性m_begindate的Getter方法。
 *
 * 创建日期：(2002-3-23)
 * @return UFDate
 */
public String getPk_main() {
	return m_pk;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 18:11:33)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @return java.lang.String
 */
public String getPkname() {
	return pkname;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 18:12:14)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @return java.lang.String
 */
public String getPksubname() {
	return pksubname;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 15:41:49)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @return java.lang.String
 */
public String getTablename() {
	return tablename;
}

/**
 * 取得薪资档案子表数据
 * 创建日期：(2003-7-26 12:57:44)
 * @return nc.vo.hi.hi_301.PsndocWadocBVO[]
 */
public PsndocWadocBVO[] getWadocBVOs() {
	PsndocWadocBVO[] vos = null;
	try {
		if (getFieldnames() != null) {
			Vector vVOs = new Vector(10);
			for (int i = 0; i < getFieldnames().length; i++) {
				if (getFieldnames()[i].startsWith("<") && getFieldnames()[i].length() == 21) {
					PsndocWadocBVO vo = new PsndocWadocBVO();
					vo.setPk_psndoc_sub(getPrimaryKey());
					vo.setPk_wa_item(getFieldnames()[i].substring(1));
					int iCounter = 0;
					for (int j = 0; j < getFieldnames().length; j++) {
						if (getFieldnames()[j].equalsIgnoreCase(getFieldnames()[i] + "_pra")) {
							vo.setPk_wa_pralv((String) getFieldValues()[j]);
							iCounter++;
						} else
							if (getFieldnames()[j].equalsIgnoreCase(getFieldnames()[i] + "_sec")) {
								vo.setPk_wa_seclv((String) getFieldValues()[j]);
								iCounter++;
							} else
								if (getFieldnames()[j].equalsIgnoreCase(getFieldnames()[i] + "_nmo")) {
									vo.setNmoney((UFDouble) getFieldValues()[j]);
									iCounter++;
								}
						if (iCounter == 3)
							break;
					}
					vVOs.addElement(vo);
				}
			}
			if (vVOs.size() > 0) {
				vos = new PsndocWadocBVO[vVOs.size()];
				vVOs.copyInto(vos);
			}
		}
	} catch (Exception e) {
		e.printStackTrace();
	}
	return vos;
}

/**
 * 
 * @param newM_fielddesc
 */
public void setFielddesc(String[] newFielddesc) {
	if (newFielddesc == null || newFielddesc.length == 0){
		return;
	}
	m_fielddesc = new String[newFielddesc.length];
	for (int i = 0; i < m_fielddesc.length; i++)
	{
		m_fielddesc[i] = newFielddesc[i];

	}
}

/**
 * 自定义属性的setter方法。
 *
 * 创建日期：(2002-3-23)
 * @param newM_begindate UFDate
 */
public void setFieldName(int i,String newfieldname)
{

		m_fieldnames[i] = newfieldname;


}

/**
 * 自定义属性的setter方法。
 *
 * 创建日期：(2002-3-23)
 * @param newM_begindate UFDate
 */
public void setFieldNames(String[] newfieldnames)
{
	if (newfieldnames == null || newfieldnames.length == 0){
		return;
	}
	m_fieldnames = new String[newfieldnames.length];
	for (int i = 0; i < m_fieldnames.length; i++)
	{
		m_fieldnames[i] = newfieldnames[i];

	}
}

/**
 * 此处插入方法说明。
 * 创建日期：(2002-3-23 11:24:40)
 */
public void setFieldType(int i, Integer newtype)
{

	m_fieldtypes[i] = newtype;

}

/**
 * 此处插入方法说明。
 * 创建日期：(2002-3-23 11:24:40)
 */
public void setFieldTypes(Integer[] newtypes) {
	if (newtypes == null || newtypes.length == 0)
		return;
	m_fieldtypes = new Integer[newtypes.length];
	for (int i = 0; i < m_fieldtypes.length; i++)
	{
		m_fieldtypes[i] = newtypes[i];

	}

	}

/**
 * 属性m_begindate的setter方法。
 *
 * 创建日期：(2002-3-23)
 * @param newM_begindate UFDate
 */
public void setFieldValue(int index, Object newfieldvalue)
{

	m_fieldvalues[index] = newfieldvalue;

}

/**
 * 属性m_begindate的setter方法。
 *
 * 创建日期：(2002-3-23)
 * @param newM_begindate UFDate
 */
public void setFieldValue(int index, String newfieldvalue)
{

	m_fieldvalues[index] = newfieldvalue;

}

/**
 * 属性m_begindate的setter方法。
 *
 * 创建日期：(2002-3-23)
 * @param newM_begindate UFDate
 */
public void setFieldShowValue(int index, String newfieldshowvalue)
{

	m_fieldshowvalues[index] = newfieldshowvalue;

}

/**
 * 属性m_begindate的setter方法。
 *
 * 创建日期：(2002-3-23)
 * @param newM_begindate UFDate
 */
public void setFieldValues(Object[] newfieldvalues)
{
	if (newfieldvalues == null || newfieldvalues.length == 0){
		return;
	}
	m_fieldvalues = new Object[newfieldvalues.length];
	for (int i = 0; i < m_fieldvalues.length; i++)
	{
		m_fieldvalues[i] = newfieldvalues[i];
	}
	
	m_fieldshowvalues = new Object[newfieldvalues.length];
}

/**
 * 属性m_begindate的setter方法。
 *
 * 创建日期：(2002-3-23)
 * @param newM_begindate UFDate
 */
public void setFieldShowValues(Object[] newfieldShowValues)
{
	if (newfieldShowValues == null || newfieldShowValues.length == 0){
		return;
	}
	m_fieldshowvalues = new Object[newfieldShowValues.length];
	for (int i = 0; i < m_fieldshowvalues.length; i++)
	{
		m_fieldshowvalues[i] = newfieldShowValues[i];
	}
}


/**
 * 属性m_begindate的setter方法。
 *
 * 创建日期：(2002-3-23)
 * @param newM_begindate UFDate
 */
public void setFieldValues(String[] newfieldvalues)
{
	if (newfieldvalues == null || newfieldvalues.length == 0){
		return;
	}
	m_fieldvalues = new Object[newfieldvalues.length];
	for (int i = 0; i < m_fieldvalues.length; i++)
	{
		m_fieldvalues[i] = newfieldvalues[i];
	}
	
	m_fieldshowvalues = new Object[newfieldvalues.length];
}

/**
 * 属性m_begindate的Getter方法。
 *
 * 创建日期：(2002-3-23)
 * @return UFDate
 */
public void setPk_main(String s) {
	m_pk=s;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 18:11:33)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @param newPkname java.lang.String
 */
public void setPkname(java.lang.String newPkname) {
	pkname = newPkname;
}

/**
 * 属性m_begindate的setter方法。
 *
 * 创建日期：(2002-3-23)
 * @param newM_begindate UFDate
 */
public void setPKOfPsndocsub(String newPsndocSub) {

	m_pk_sub = newPsndocSub;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 18:12:14)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @param newPksubname java.lang.String
 */
public void setPksubname(java.lang.String newPksubname) {
	pksubname = newPksubname;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 15:41:49)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @param newTablename java.lang.String
 */
public void setTablename(java.lang.String newTablename) {
	tablename = newTablename;
}

public String getPk_psnbasdoc() {
	return pk_psnbasdoc;
}

public void setPk_psnbasdoc(String pk_psnbasdoc) {
	this.pk_psnbasdoc = pk_psnbasdoc;
}

/**
 * <p>取得父VO主键字段.
 * <p>
 * 创建日期:(2003-10-10)
 * @return java.lang.String
 */
public String getParentPKFieldName() {
	return this.getPkname();
}
/**
 * 取主键字段名称.
 * 创建日期:(2002-8-26 9:52:39)
 */
public String getPKFieldName() {
	return this.getPksubname();
}

/**
 * 此处插入方法说明.
 * 创建日期:(2002-8-26 9:52:39)
 */
public String getTableName() {
	return this.getTablename();
}
}
