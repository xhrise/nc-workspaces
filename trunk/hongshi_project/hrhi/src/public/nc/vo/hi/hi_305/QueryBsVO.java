/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.vo.hi.hi_305;

import java.util.ArrayList;

import nc.vo.hr.utils.ml.HRPubRes;
import nc.vo.pub.*;
import nc.vo.pub.lang.*;

/**
 * 此处插入类型说明。
 *
 * 创建日期：(2002-4-12)
 * @author：zhonghaijing
 */
public class QueryBsVO extends CircularlyAccessibleValueObject {

	public String m_pk_query_bs;
	public String m_pk_sglstat_b;
	public Integer m_itemorder;
	public UFBoolean m_logicop;
	public UFBoolean m_isleft;
	public UFBoolean m_isright;
	public String m_tablecode;
	public String m_tablename;
	public String m_fieldcode;
	public String m_fieldname;
	public String m_operaop;
	public String m_showvalue;
	public String m_queryvalue;

	/**
	 *     描述上面属性的FieldObjects。主要用于系统工具中，
	 * 业务代码中不会用到下面的FieldObjects。
	 */
	private static StringField m_pk_query_bsField;
	private static StringField m_pk_sglstat_bField;
	private static IntegerField m_itemorderField;
	private static UFBooleanField m_logicopField;
	private static UFBooleanField m_isleftField;
	private static UFBooleanField m_isrightField;
	private static StringField m_tablecodeField;
	private static StringField m_tablenameField;
	private static StringField m_fieldcodeField;
	private static StringField m_fieldnameField;
	private static StringField m_operaopField;
	private static StringField m_showvalueField;
	private static StringField m_queryvalueField;
/**
 * 使用主键字段进行初始化的构造子。
 *
 * 创建日期：(2002-4-12)
 */
public QueryBsVO() {

}
/**
 * 使用主键进行初始化的构造子。
 *
 * 创建日期：(2002-4-12)
 * @param ??fieldNameForMethod?? 主键值
 */
public QueryBsVO(String newPk_query_bs) {

	// 为主键字段赋值:
	m_pk_query_bs = newPk_query_bs;
}
/**
 * 根类Object的方法,克隆这个VO对象。
 *
 * 创建日期：(2002-4-12)
 */
public Object clone() {

	// 复制基类内容并创建新的VO对象：
	Object o = null;
	try {
		o = super.clone();
	} catch (Exception e) {}
	QueryBsVO queryBs = (QueryBsVO)o;

	// 你在下面复制本VO对象的所有属性：

	return queryBs;
}
/**
 * 返回数值对象的显示名称。
 *
 * 创建日期：(2002-4-12)
 * @return java.lang.String 返回数值对象的显示名称。
 */
public String getEntityName() {

	return "QueryBs";
}
/**
 * 返回对象标识，用来唯一定位对象。
 *
 * 创建日期：(2002-4-12)
 * @return String
 */
public String getPrimaryKey() {

	return m_pk_query_bs;
}
/**
 * 设置对象标识，用来唯一定位对象。
 *
 * 创建日期：(2002-4-12)
 * @param m_pk_query_bs String
 */
public void setPrimaryKey(String newPk_query_bs) {

	m_pk_query_bs = newPk_query_bs;
}
/**
 * 属性m_pk_query_bs的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return String
 */
public String getPk_query_bs() {
	return m_pk_query_bs;
}
/**
 * 属性m_pk_sglstat_b的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return String
 */
public String getPk_sglstat_b() {
	return m_pk_sglstat_b;
}
/**
 * 属性m_itemorder的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return Integer
 */
public Integer getItemorder() {
	return m_itemorder;
}
/**
 * 属性m_logicop的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return UFBoolean
 */
public UFBoolean getLogicop() {
	return m_logicop;
}
/**
 * 属性m_isleft的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return UFBoolean
 */
public UFBoolean getIsleft() {
	return m_isleft;
}
/**
 * 属性m_isright的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return UFBoolean
 */
public UFBoolean getIsright() {
	return m_isright;
}
/**
 * 属性m_tablecode的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return String
 */
public String getTablecode() {
	return m_tablecode;
}
/**
 * 属性m_tablename的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return String
 */
public String getTablename() {
	return m_tablename;
}
/**
 * 属性m_fieldcode的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return String
 */
public String getFieldcode() {
	return m_fieldcode;
}
/**
 * 属性m_fieldname的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return String
 */
public String getFieldname() {
	return m_fieldname;
}
/**
 * 属性m_operaop的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return String
 */
public String getOperaop() {
	return m_operaop;
}
/**
 * 属性m_showvalue的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return String
 */
public String getShowvalue() {
	return m_showvalue;
}
/**
 * 属性m_queryvalue的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return String
 */
public String getQueryvalue() {
	return m_queryvalue;
}
/**
 * 属性m_pk_query_bs的setter方法。
 *
 * 创建日期：(2002-4-12)
 * @param newM_pk_query_bs String
 */
public void setPk_query_bs(String newPk_query_bs) {

	m_pk_query_bs = newPk_query_bs;
}
/**
 * 属性m_pk_sglstat_b的setter方法。
 *
 * 创建日期：(2002-4-12)
 * @param newM_pk_sglstat_b String
 */
public void setPk_sglstat_b(String newPk_sglstat_b) {

	m_pk_sglstat_b = newPk_sglstat_b;
}
/**
 * 属性m_itemorder的setter方法。
 *
 * 创建日期：(2002-4-12)
 * @param newM_itemorder Integer
 */
public void setItemorder(Integer newItemorder) {

	m_itemorder = newItemorder;
}
/**
 * 属性m_logicop的setter方法。
 *
 * 创建日期：(2002-4-12)
 * @param newM_logicop UFBoolean
 */
public void setLogicop(UFBoolean newLogicop) {

	m_logicop = newLogicop;
}
/**
 * 属性m_isleft的setter方法。
 *
 * 创建日期：(2002-4-12)
 * @param newM_isleft UFBoolean
 */
public void setIsleft(UFBoolean newIsleft) {

	m_isleft = newIsleft;
}
/**
 * 属性m_isright的setter方法。
 *
 * 创建日期：(2002-4-12)
 * @param newM_isright UFBoolean
 */
public void setIsright(UFBoolean newIsright) {

	m_isright = newIsright;
}
/**
 * 属性m_tablecode的setter方法。
 *
 * 创建日期：(2002-4-12)
 * @param newM_tablecode String
 */
public void setTablecode(String newTablecode) {

	m_tablecode = newTablecode;
}
/**
 * 属性m_tablename的setter方法。
 *
 * 创建日期：(2002-4-12)
 * @param newM_tablename String
 */
public void setTablename(String newTablename) {

	m_tablename = newTablename;
}
/**
 * 属性m_fieldcode的setter方法。
 *
 * 创建日期：(2002-4-12)
 * @param newM_fieldcode String
 */
public void setFieldcode(String newFieldcode) {

	m_fieldcode = newFieldcode;
}
/**
 * 属性m_fieldname的setter方法。
 *
 * 创建日期：(2002-4-12)
 * @param newM_fieldname String
 */
public void setFieldname(String newFieldname) {

	m_fieldname = newFieldname;
}
/**
 * 属性m_operaop的setter方法。
 *
 * 创建日期：(2002-4-12)
 * @param newM_operaop String
 */
public void setOperaop(String newOperaop) {

	m_operaop = newOperaop;
}
/**
 * 属性m_showvalue的setter方法。
 *
 * 创建日期：(2002-4-12)
 * @param newM_showvalue String
 */
public void setShowvalue(String newShowvalue) {

	m_showvalue = newShowvalue;
}
/**
 * 属性m_queryvalue的setter方法。
 *
 * 创建日期：(2002-4-12)
 * @param newM_queryvalue String
 */
public void setQueryvalue(String newQueryvalue) {

	m_queryvalue = newQueryvalue;
}
/**
 * 验证对象各属性之间的数据逻辑正确性。
 *
 * 创建日期：(2002-4-12)
 * @exception nc.vo.pub.ValidationException 如果验证失败，抛出
 *     ValidationException，对错误进行解释。
 */
public void validate() throws ValidationException {

	ArrayList errFields = new ArrayList(); // errFields record those null fields that cannot be null.
	// 检查是否为不允许空的字段赋了空值，你可能需要修改下面的提示信息：
	if (m_pk_query_bs == null) {
		errFields.add(new String("m_pk_query_bs"));
	}
	if (m_pk_sglstat_b == null) {
		errFields.add(new String("m_pk_sglstat_b"));
	}
	// construct the exception message:
	StringBuffer message = new StringBuffer();
	message.append(nc.vo.bd.IBDMsg.MSG_NULL_FIELD);//message.append("下列字段不能为空：");
	if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append(",");//message.append("、");
			message.append(temp[i]);
		}
		// throw the exception:
		throw new NullFieldException(message.toString());
	}
}
/**
 * <p>需要在一个循环中访问的属性的名称数组。
 * <p>
 * 创建日期：(??Date??)
 * @return java.lang.String[]
 */
public java.lang.String[] getAttributeNames() {

	return new String[]{ "pk_sglstat_b", "itemorder", "logicop", "isleft", "isright", "tablecode", "tablename", "fieldcode", "fieldname", "operaop","operaname", "showvalue", "queryvalue" };
}
/**
 *  <p>根据一个属性名称字符串该属性的值。
 *  <p>
 * 创建日期：(2002-4-12)
 * @param key java.lang.String
 */
public Object getAttributeValue(String attributeName) {

	if (attributeName.equals("pk_query_bs")) {
		return m_pk_query_bs;
	}
	else if (attributeName.equals("pk_sglstat_b")) {
		return m_pk_sglstat_b;
	}
	else if (attributeName.equals("itemorder")) {
		return m_itemorder;
	}
	else if (attributeName.equals("logicop")) {
		return m_logicop;
	}
	else if (attributeName.equals("isleft")) {
		return m_isleft;
	}
	else if (attributeName.equals("isright")) {
		return m_isright;
	}
	else if (attributeName.equals("tablecode")) {
		return m_tablecode;
	}
	else if (attributeName.equals("tablename")) {
		return m_tablename;
	}
	else if (attributeName.equals("fieldcode")) {
		return m_fieldcode;
	}
	else if (attributeName.equals("fieldname")) {
		return m_fieldname;
	}
	else if (attributeName.equals("operaop")) {
		return m_operaop;
	}
	else if (attributeName.equals("operaname")) {
		return m_operaname;
	}
	else if (attributeName.equals("showvalue")) {
		return m_showvalue;
	}
	else if (attributeName.equals("queryvalue")) {
		return m_queryvalue;
	}
	return null;
}
/**
 *  <p>对参数name对型的属性设置值。
 *  <p>
 * 创建日期：(2002-4-12)
 * @param key java.lang.String
 */
public void setAttributeValue(String name, Object value) {

	try {
		if (name.equals("pk_query_bs")) {
			m_pk_query_bs = (String) value;
		}
		else if (name.equals("pk_sglstat_b")) {
			m_pk_sglstat_b = (String) value;
		}
		else if (name.equals("itemorder")) {
			m_itemorder = (Integer) value;
		}
		else if (name.equals("logicop")) {
			m_logicop = (UFBoolean) value;
		}
		else if (name.equals("isleft")) {
			m_isleft = (UFBoolean) value;
		}
		else if (name.equals("isright")) {
			m_isright = (UFBoolean) value;
		}
		else if (name.equals("tablecode")) {
			m_tablecode = (String) value;
		}
		else if (name.equals("tablename")) {
			m_tablename = (String) value;
		}
		else if (name.equals("fieldcode")) {
			m_fieldcode = (String) value;
		}
		else if (name.equals("fieldname")) {
			m_fieldname = (String) value;
		}
		else if (name.equals("operaop")) {
			m_operaop = (String) value;
		}
		else if (name.equals("operaname")) {
			m_operaname = (String) value;
		}
		else if (name.equals("showvalue")) {
			m_showvalue = (String) value;
		}
		else if (name.equals("queryvalue")) {
			m_queryvalue = (String) value;
		}

	}
	catch (ClassCastException e) {
		throw new ClassCastException(HRPubRes.getClassCastErrMsg(name,value));//throw new ClassCastException("setAttributeValue方法中为 " + name + " 赋值时类型转换错误！（值：" + value + "）");
	}
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_query_bsField() {

	if(m_pk_query_bsField == null){
		try{
			m_pk_query_bsField = new StringField();
			// 属性的名称
			m_pk_query_bsField.setName("pk_query_bs");
			// 属性的描述
			m_pk_query_bsField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_query_bsField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_sglstat_bField() {

	if(m_pk_sglstat_bField == null){
		try{
			m_pk_sglstat_bField = new StringField();
			// 属性的名称
			m_pk_sglstat_bField.setName("pk_sglstat_b");
			// 属性的描述
			m_pk_sglstat_bField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_sglstat_bField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return nc.vo.pub.FieldObject
 */
public static IntegerField getItemorderField() {

	if(m_itemorderField == null){
		try{
			m_itemorderField = new IntegerField();
			// 属性的名称
			m_itemorderField.setName("itemorder");
			// 属性的描述
			m_itemorderField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_itemorderField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return nc.vo.pub.FieldObject
 */
public static UFBooleanField getLogicopField() {

	if(m_logicopField == null){
		try{
			m_logicopField = new UFBooleanField();
			// 属性的名称
			m_logicopField.setName("logicop");
			// 属性的描述
			m_logicopField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_logicopField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return nc.vo.pub.FieldObject
 */
public static UFBooleanField getIsleftField() {

	if(m_isleftField == null){
		try{
			m_isleftField = new UFBooleanField();
			// 属性的名称
			m_isleftField.setName("isleft");
			// 属性的描述
			m_isleftField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_isleftField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return nc.vo.pub.FieldObject
 */
public static UFBooleanField getIsrightField() {

	if(m_isrightField == null){
		try{
			m_isrightField = new UFBooleanField();
			// 属性的名称
			m_isrightField.setName("isright");
			// 属性的描述
			m_isrightField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_isrightField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getTablecodeField() {

	if(m_tablecodeField == null){
		try{
			m_tablecodeField = new StringField();
			// 属性的名称
			m_tablecodeField.setName("tablecode");
			// 属性的描述
			m_tablecodeField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_tablecodeField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getTablenameField() {

	if(m_tablenameField == null){
		try{
			m_tablenameField = new StringField();
			// 属性的名称
			m_tablenameField.setName("tablename");
			// 属性的描述
			m_tablenameField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_tablenameField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getFieldcodeField() {

	if(m_fieldcodeField == null){
		try{
			m_fieldcodeField = new StringField();
			// 属性的名称
			m_fieldcodeField.setName("fieldcode");
			// 属性的描述
			m_fieldcodeField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_fieldcodeField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getFieldnameField() {

	if(m_fieldnameField == null){
		try{
			m_fieldnameField = new StringField();
			// 属性的名称
			m_fieldnameField.setName("fieldname");
			// 属性的描述
			m_fieldnameField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_fieldnameField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getOperaopField() {

	if(m_operaopField == null){
		try{
			m_operaopField = new StringField();
			// 属性的名称
			m_operaopField.setName("operaop");
			// 属性的描述
			m_operaopField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_operaopField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getShowvalueField() {

	if(m_showvalueField == null){
		try{
			m_showvalueField = new StringField();
			// 属性的名称
			m_showvalueField.setName("showvalue");
			// 属性的描述
			m_showvalueField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_showvalueField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-4-12)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getQueryvalueField() {

	if(m_queryvalueField == null){
		try{
			m_queryvalueField = new StringField();
			// 属性的名称
			m_queryvalueField.setName("queryvalue");
			// 属性的描述
			m_queryvalueField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_queryvalueField;
}
/**
 * 返回这个ValueObject类的所有FieldObject对象的集合。
 *
 * 创建日期：(2002-4-12)
 * @return nc.vo.pub.FieldObject[]
 */
public FieldObject[] getFields() {

	FieldObject[] fields = {getPk_query_bsField(), getPk_sglstat_bField(), getItemorderField(), getLogicopField(), getIsleftField(), getIsrightField(), getTablecodeField(), getTablenameField(), getFieldcodeField(), getFieldnameField(), getOperaopField(), getShowvalueField(), getQueryvalueField()};

	return fields;
}

	public final static String DISP_AND = nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("600722","UPP600722-000137")/*@res "并且"*/; //国际化可能有问题
	public final static String DISP_OR = nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("600722","UPP600722-000138")/*@res "或者"*/; //国际化可能有问题
	public int m_datatype;
	private java.lang.String m_operaname;

/**
 * 获得显示条件
 *
 * 创建日期：(2001-7-12 14:44:08)
 * @return java.lang.String
 */
public String getChStr() {
	String str = "";
	if (getLogicop().booleanValue()) //逻辑苻
		str += " " + DISP_AND;
	else
		str += " " + DISP_OR;
	if (!getIsleft().booleanValue()) //左括号
		str += "";
	else
		str += " (";
	str += " (" + getTablename() + "." + getFieldname(); //字段(从查询模板得不到表名，暂时不处理表名)
	//str += " (" + getFieldname();
	//modify begin by zhj0722
	//str += " " + getOperaop(); //操作苻
	//str += " '" + getShowvalue() + "')"; //值
	if (getOperaop().trim().equalsIgnoreCase("isnull"))
		str += nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("600722","UPP600722-000139")/*@res "为空)"*/;
	else
		if (getOperaop().trim().equalsIgnoreCase("isnotnull"))
			str += nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("600722","UPP600722-000140")/*@res "不为空)"*/;
		else {
			str += " " + getOperaname();
			if (getDatatype() == 1 || getDatatype() == 2)
				str += " " + getShowvalue() + " )";
			else
				str += "'" + getShowvalue() + "')";
		}
	//modify end by zhj0722
	if (!getIsright().booleanValue()) //右括号
		str += "";
	else
		str += " )";
	return str;
}

/**
 * 此处插入方法说明。
 * 创建日期：(2002-7-22 14:50:25)
 * @return int
 */
public int getDatatype() {
	return m_datatype;
}

/**
 * 此处插入方法描述。
 * 创建日期：(2004-5-24 20:07:58)
 * @return java.lang.String
 */
public java.lang.String getOperaname() {
	return m_operaname;
}

/**
 * 获得SQL语句
 *
 * 创建日期：(2001-7-12 14:44:08)
 * @return java.lang.String
 */
public String getSQLStr() {
	 boolean isIn = false;
	 String oper = getOperaop().trim();
	 String value = getQueryvalue();
	 if(oper.equalsIgnoreCase("in")){
	  if((value.toLowerCase().trim().indexOf("select")==-1)){
	   oper = "=";
	  }else{
	   isIn = true;
	  }
	 }
	 if(oper.equalsIgnoreCase("like") && value.indexOf("%") < 0){
	  value = "%"+value+"%";
	 } 
	 String str = "";
	 if (getLogicop().booleanValue()) //逻辑苻
	  str += " and";
	 else
	  str += " or";
	 if (!getIsleft().booleanValue()) //左括号
	  str += "";
	 else
	  str += " (";
	 str += " (" + getFieldcode(); //字段
	 str += " " + oper; //操作符
	 //modify begin by zhj0722
	 //str += " '" + getQueryvalue() + "')"; //值
	 if (oper.equalsIgnoreCase("is null")){
	     str += " or "+getFieldcode()+"='')";
	 }else if(oper.equalsIgnoreCase("is not null")){
	  str += " or "+getFieldcode()+"<>'')";
	 }else {
	  if (getDatatype() == 1 || getDatatype() == 2)
	   str += " " + value + " )";
	  else{
	         if(isIn){
	          str += "("+value+"))";
	         }else{
	    str += " '" + value + "')";
	         }
	  }
	 }
	 //modify end by zhj0722
	 if (!getIsright().booleanValue()) //右括号
	  str += "";
	 else
	  str += " )";
	 return str;
	}

/**
 * 此处插入方法说明。
 * 创建日期：(2002-7-22 14:51:06)
 * @param newDatatype int
 */
public void setDatatype(int newDatatype) {
	m_datatype = newDatatype;
	}

/**
 * 此处插入方法描述。
 * 创建日期：(2004-5-24 20:07:58)
 * @param newM_operaname java.lang.String
 */
public void setOperaname(java.lang.String newM_operaname) {
	m_operaname = newM_operaname;
}
}
