/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.vo.hi.hi_301;

import java.util.ArrayList;

import nc.vo.hr.bd.setdict.FlddictVO;
import nc.vo.hr.utils.ml.HRPubRes;
import nc.vo.pub.*;
import nc.vo.pub.lang.*;

/**
 * 人力资源所有信息集主表的VO
 *
 * 创建日期：(2002-3-27)
 * @author：dqy
 */
public class HRMainVO extends CircularlyAccessibleValueObject {


	public String m_pk_corp;


	private String pk_psnbasdoc;




	/**
	 *     描述上面属性的FieldObjects。主要用于系统工具中，
	 * 业务代码中不会用到下面的FieldObjects。
	 */
	private static StringField m_pk_corpField;





/**
 * 使用主键字段进行初始化的构造子。
 *
 * 创建日期：(2002-3-27)
 */
public HRMainVO() {

}
/**
 * 使用主键进行初始化的构造子。
 *
 * 创建日期：(2002-3-27)
 * @param ??fieldNameForMethod?? 主键值
 */
public HRMainVO(String newPk_psndoc) {

	// 为主键字段赋值:
	m_pk = newPk_psndoc;
}
/**
 * 根类Object的方法,克隆这个VO对象。
 *
 * 创建日期：(2002-3-27)
 */
public Object clone() {

	// 复制基类内容并创建新的VO对象：
	Object o = null;
	try {
		o = super.clone();
	} catch (Exception e) {}
	HRMainVO psndocMain = (HRMainVO)o;

	// 你在下面复制本VO对象的所有属性：

	return psndocMain;
}
/**
 * 返回数值对象的显示名称。
 *
 * 创建日期：(2002-3-27)
 * @return java.lang.String 返回数值对象的显示名称。
 */
public String getEntityName() {

	return "PsnMain";
}
/**
 * 返回对象标识，用来唯一定位对象。
 *
 * 创建日期：(2002-3-27)
 * @return String
 */
public String getPrimaryKey() {

	return m_pk;
}
/**
 * 设置对象标识，用来唯一定位对象。
 *
 * 创建日期：(2002-3-27)
 * @param m_pk_psndoc String
 */
public void setPrimaryKey(String newPk_psndoc) {

	m_pk = newPk_psndoc;
}



/**
 * 属性m_pk_corp的Getter方法。
 *
 * 创建日期：(2002-3-27)
 * @return String
 */
public String getPk_corp() {
	return m_pk_corp;
}






























/**
 * 属性m_pk_corp的setter方法。
 *
 * 创建日期：(2002-3-27)
 * @param newM_pk_corp String
 */
public void setPk_corp(String newPk_corp) {

	m_pk_corp = newPk_corp;
}




























/**
 * 验证对象各属性之间的数据逻辑正确性。
 *
 * 创建日期：(2002-3-27)
 * @exception nc.vo.pub.ValidationException 如果验证失败，抛出
 *     ValidationException，对错误进行解释。
 */
public void validate() throws nc.vo.pub.ValidationException {

	ArrayList errFields = new ArrayList(); // errFields record those null fields that cannot be null.
	// 检查是否为不允许空的字段赋了空值，你可能需要修改下面的提示信息：
	if (m_pk == null) {
		errFields.add(new String(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("600704","UPP600704-000175")/*@res "主键"*/));
	}
	/*
	穷举不能空的字段
	*/
	// construct the exception message:
	StringBuffer message = new StringBuffer();
	message.append(nc.vo.bd.IBDMsg.MSG_NULL_FIELD);//message.append("下列字段不能为空：");
	if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append(",");//message.append("、");
			message.append(temp[i]);
		}
		// throw the exception:
		throw new NullFieldException(message.toString());
	}
}
/**
 * <p>需要在一个循环中访问的属性的名称数组。
 * <p>
 * 创建日期：(??Date??)
 * @return java.lang.String[]
 */
public java.lang.String[] getAttributeNames() {
	int n=0;
	String[]  s=getDefFieldNames();
	return s;


}
/**
 *  <p>根据一个属性名称字符串该属性的值。
 *  <p>
 * 创建日期：(2002-3-27)
 * @param key java.lang.String
 */
public Object getAttributeValue(String attributeName) {

	if (attributeName.equals("pk_corp")) {
		return m_pk_corp;
	}
	else if(getDefFieldNames()!=null && getDefFieldNames().length>0){
			for(int i=0;i<getDefFieldNames().length;i++){
				if(getDefFieldNames()[i].equals(attributeName)){
					if(getDefFieldValues()!=null &&getDefFieldValues().length>0){
						if (attributeName.equalsIgnoreCase("bloodtype") && getDefFieldValues()[i]!=null)
							return getDefFieldValues()[i].toString().trim();
						else
							return getDefFieldValues()[i];
					}//if
					break;
				}//if
		    }//for
	}
	return null;
}
/**
 *  <p>对参数name对型的属性设置值。
 *  <p>
 * 创建日期：(2002-3-27)
 * @param key java.lang.String
 */
public void setAttributeValue(String name, Object value) {

	try {
		if (name.equals("pk_corp")) {
			m_pk_corp = (String) value;
		}
		else if (getDefFieldNames() != null && getDefFieldNames().length > 0) {
			for (int i = 0; i < getDefFieldNames().length; i++) {
				if (getDefFieldNames()[i].equals(name)) {
					if (getDefFieldValues() != null && getDefFieldValues().length > 0) {
						getDefFieldValues()[i] = value;
					} //if
					break;
				} //if
			} //for

		}
	}
	catch (ClassCastException e) {
		throw new ClassCastException(HRPubRes.getClassCastErrMsg(name,value));//throw new ClassCastException("setAttributeValue方法中为 " + name + " 赋值时类型转换错误！（值：" + value + "）");
	}
}



/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-3-27)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_corpField() {

	if(m_pk_corpField == null){
		try{
			m_pk_corpField = new StringField();
			// 属性的名称
			m_pk_corpField.setName("pk_corp");
			// 属性的描述
			m_pk_corpField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_corpField;
}















































/**
 * 返回这个ValueObject类的所有FieldObject对象的集合。
 *
 * 创建日期：(2002-3-27)
 * @return nc.vo.pub.FieldObject[]
 */
public FieldObject[] getFields() {

	FieldObject[] fields = {  getPk_corpField()};

	return fields;
}

	//处理自定义的字段
	String[] m_FieldNames = {};
	int   [] m_FieldTypes = {};
	Object[] m_FieldValues = {};

	public String[] getDefFieldNames() {
		return this.m_FieldNames;
	}

	public int[] getDefFieldTypes() {
		return this.m_FieldTypes;
	}

	public Object[] getDefFieldValues() {
		return this.m_FieldValues;
	}

	public void setDefFieldNames(String[] m_FieldNames) {
		this.m_FieldNames = m_FieldNames;
	}

	public void setDefFieldTypes(int[] m_FieldTypes) {
		this.m_FieldTypes = m_FieldTypes;
	}

	public void setDefFieldValues(Object[] m_FieldValues) {
		this.m_FieldValues = m_FieldValues;
	}

	private FlddictVO[] flddicts = new FlddictVO[0];
	private java.lang.String[] fielddesc = null;
	public String m_pk;
	private java.lang.String pkname;
	private java.lang.String tablename;

/**
 * 此处插入方法说明。
 * 创建日期：(2003-11-5 20:30:17)
 * @return int
 * @param attributeName java.lang.String
 */
public int getAttributeType(String attributeName) {
	if (attributeName.equals("pk_corp")) {
		return nc.vo.hi.pub.CommonValue.DATATYPE_STRING;
	} else
		if (getDefFieldNames() != null && getDefFieldNames().length > 0) {
			for (int i = 0; i < getDefFieldNames().length; i++) {
				if (getDefFieldNames()[i].equals(attributeName)) {
					return getDefFieldTypes()[i];
				}
			}
		}
	return -1;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 15:43:35)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @return java.lang.String[]
 */
public java.lang.String[] getFielddesc() {
	return fielddesc;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 14:00:35)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @return FlddictVO[]
 */
public FlddictVO[] getFlddicts() {
	return flddicts;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 16:05:29)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @return java.lang.String
 */
public java.lang.String getPkname() {
	return pkname;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 15:43:03)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @return java.lang.String
 */
public java.lang.String getTablename() {
	return tablename;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 15:43:35)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @param newFielddesc java.lang.String[]
 */
public void setFielddesc(java.lang.String[] newFielddesc) {
	fielddesc = newFielddesc;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 14:00:35)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @param newFlddicts FlddictVO[]
 */
public void setFlddicts(FlddictVO[] newFlddicts) {
	flddicts = newFlddicts;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 16:05:29)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @param newPkname java.lang.String
 */
public void setPkname(java.lang.String newPkname) {
	pkname = newPkname;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 15:43:03)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @param newTablename java.lang.String
 */
public void setTablename(java.lang.String newTablename) {
	tablename = newTablename;
}
public String getPk_psnbasdoc() {
	return pk_psnbasdoc;
}
public void setPk_psnbasdoc(String pk_psnbasdoc) {
	this.pk_psnbasdoc = pk_psnbasdoc;
}
}
