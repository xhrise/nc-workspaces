/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.vo.hr.pub.carddef;

import java.util.ArrayList;

import nc.vo.hr.tools.pub.StringUtils;
import nc.vo.pub.*;
import nc.vo.pub.lang.*;
/**
 * 
 * 
 * 创建日期:(2006-9-26)
 * @author:walkfire
 */
public class RptDefVO extends SuperVO {
	// 数据库里默认TreeRootPK
	public static final String DEFAULT_TREE_ROOT_PK = "NC-HR-CARD-REPORT-TR";

	public String pk_rpt_def;
	public UFDateTime create_time;
	public Integer dr;
	public Integer nodetype = new Integer(CommonValue.RPT_NODETYPE_REPORT);
	public Object obj_rpt_def;// 报表定义对象，具体类型为CellsModel
	public String parnodepk = DEFAULT_TREE_ROOT_PK;// 默认为根节点PK
	public String pk_corp;
	public String pk_creater;
	public String pk_updater;
	public String remark;
	public String rpt_code;
	public String rpt_name;
	public Integer rpt_type = new Integer(CommonValue.RPT_TYPE_CARD);
	public UFDateTime ts;
	public UFDateTime update_time;
	
	// 显示用字段
	public String creater_name = null;
	public String updater_name = null;
/**
 * 属性create_time的Getter方法.
 *
 * 创建日期:(2006-9-26)
 * @return UFDateTime
 */
public UFDateTime getCreate_time() {
	return create_time;
}
/**
 * 属性dr的Getter方法.
 *
 * 创建日期:(2006-9-26)
 * @return Integer
 */
public Integer getDr() {
	return dr;
}
/**
 * 属性nodetype的Getter方法.
 *
 * 创建日期:(2006-9-26)
 * @return Integer
 */
public Integer getNodetype() {
	return nodetype;
}
/**
 * 属性obj_rpt_def的Getter方法.
 *
 * 创建日期:(2006-9-26)
 * @return UFDate
 */
public Object getObj_rpt_def() {
	return obj_rpt_def;
}
/**
 * 属性parnodepk的Getter方法.
 *
 * 创建日期:(2006-9-26)
 * @return String
 */
public String getParnodepk() {
	return parnodepk;
}
/**
 * 属性pk_corp的Getter方法.
 *
 * 创建日期:(2006-9-26)
 * @return String
 */
public String getPk_corp() {
	return pk_corp;
}
/**
 * 属性pk_creater的Getter方法.
 *
 * 创建日期:(2006-9-26)
 * @return String
 */
public String getPk_creater() {
	return pk_creater;
}
/**
 * 属性pk_updater的Getter方法.
 *
 * 创建日期:(2006-9-26)
 * @return String
 */
public String getPk_updater() {
	return pk_updater;
}
/**
 * 属性remark的Getter方法.
 *
 * 创建日期:(2006-9-26)
 * @return String
 */
public String getRemark() {
	return remark;
}
/**
 * 属性rpt_code的Getter方法.
 *
 * 创建日期:(2006-9-26)
 * @return String
 */
public String getRpt_code() {
	return rpt_code;
}
/**
 * 属性rpt_name的Getter方法.
 *
 * 创建日期:(2006-9-26)
 * @return String
 */
public String getRpt_name() {
	return rpt_name;
}
/**
 * 属性rpt_type的Getter方法.
 *
 * 创建日期:(2006-9-26)
 * @return Integer
 */
public Integer getRpt_type() {
	return rpt_type;
}
/**
 * 属性ts的Getter方法.
 *
 * 创建日期:(2006-9-26)
 * @return UFDateTime
 */
public UFDateTime getTs() {
	return ts;
}
/**
 * 属性update_time的Getter方法.
 *
 * 创建日期:(2006-9-26)
 * @return UFDateTime
 */
public UFDateTime getUpdate_time() {
	return update_time;
}
/**
 * 属性create_time的setter方法.
 *
 * 创建日期:(2006-9-26)
 * @param newCreate_time UFDateTime
 */
public void setCreate_time(UFDateTime newCreate_time) {

	create_time = newCreate_time;
}
/**
 * 属性dr的setter方法.
 *
 * 创建日期:(2006-9-26)
 * @param newDr Integer
 */
public void setDr(Integer newDr) {

	dr = newDr;
}
/**
 * 属性nodetype的setter方法.
 *
 * 创建日期:(2006-9-26)
 * @param newNodetype Integer
 */
public void setNodetype(Integer newNodetype) {

	nodetype = newNodetype;
}
/**
 * 属性obj_rpt_def的setter方法.
 *
 * 创建日期:(2006-9-26)
 * @param newObj_rpt_def UFDate
 */
public void setObj_rpt_def(Object newObj_rpt_def) {

	obj_rpt_def = newObj_rpt_def;
}
/**
 * 属性parnodepk的setter方法.
 *
 * 创建日期:(2006-9-26)
 * @param newParnodepk String
 */
public void setParnodepk(String newParnodepk) {

	parnodepk = newParnodepk;
}
/**
 * 属性pk_corp的setter方法.
 *
 * 创建日期:(2006-9-26)
 * @param newPk_corp String
 */
public void setPk_corp(String newPk_corp) {

	pk_corp = newPk_corp;
}
/**
 * 属性pk_creater的setter方法.
 *
 * 创建日期:(2006-9-26)
 * @param newPk_creater String
 */
public void setPk_creater(String newPk_creater) {

	pk_creater = newPk_creater;
}
/**
 * 属性pk_updater的setter方法.
 *
 * 创建日期:(2006-9-26)
 * @param newPk_updater String
 */
public void setPk_updater(String newPk_updater) {

	pk_updater = newPk_updater;
}
/**
 * 属性remark的setter方法.
 *
 * 创建日期:(2006-9-26)
 * @param newRemark String
 */
public void setRemark(String newRemark) {

	remark = newRemark;
}
/**
 * 属性rpt_code的setter方法.
 *
 * 创建日期:(2006-9-26)
 * @param newRpt_code String
 */
public void setRpt_code(String newRpt_code) {

	rpt_code = newRpt_code;
}
/**
 * 属性rpt_name的setter方法.
 *
 * 创建日期:(2006-9-26)
 * @param newRpt_name String
 */
public void setRpt_name(String newRpt_name) {

	rpt_name = newRpt_name;
}
/**
 * 属性rpt_type的setter方法.
 *
 * 创建日期:(2006-9-26)
 * @param newRpt_type Integer
 */
public void setRpt_type(Integer newRpt_type) {

	rpt_type = newRpt_type;
}
/**
 * 属性ts的setter方法.
 *
 * 创建日期:(2006-9-26)
 * @param newTs UFDateTime
 */
public void setTs(UFDateTime newTs) {

	ts = newTs;
}
/**
 * 属性update_time的setter方法.
 *
 * 创建日期:(2006-9-26)
 * @param newUpdate_time UFDateTime
 */
public void setUpdate_time(UFDateTime newUpdate_time) {

	update_time = newUpdate_time;
}
/**
 * 验证对象各属性之间的数据逻辑正确性.
 *
 * 创建日期:(2006-9-26)
 * @exception nc.vo.pub.ValidationException 如果验证失败,抛出
 *     ValidationException,对错误进行解释.
 */
public void validate() throws ValidationException {

	ArrayList errFields = new ArrayList(); // errFields record those null fields that cannot be null.
	// 检查是否为不允许空的字段赋了空值,你可能需要修改下面的提示信息:
	if (nodetype == null) {
		errFields.add(new String("nodetype"));
	}
	if (parnodepk == null) {
		errFields.add(new String("parnodepk"));
	}
	if (pk_rpt_def == null) {
		errFields.add(new String("pk_rpt_def"));
	}
	if (rpt_code == null) {
		errFields.add(new String("rpt_code"));
	}
	if (rpt_name == null) {
		errFields.add(new String("rpt_name"));
	}
	if (rpt_type == null) {
		errFields.add(new String("rpt_type"));
	}
	// construct the exception message:
	StringBuffer message = new StringBuffer();
//	message.append("下列字段不能为空:");
	message.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID(
			"600700", "UPP600700-000346")/* @res "下列字段不能为空：" */);
	if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append(",");
			message.append(temp[i]);
		}
		// throw the exception:
		throw new NullFieldException(message.toString());
	}
}
/**
 * <p>取得父VO主键字段.
 * <p>
 * 创建日期:(2006-9-26)
 * @return java.lang.String
 */
public java.lang.String getParentPKFieldName() {

	return "parnodepk";
}
/**
 * <p>取得表主键.
 * <p>
 * 创建日期:(2006-9-26)
 * @return java.lang.String
 */
public java.lang.String getPKFieldName() {

	return  "pk_rpt_def";
}
/**
 * <p>返回表名称.
 * <p>
 * 创建日期:(2006-9-26)
 * @return java.lang.String
 */
public java.lang.String getTableName() {

	return "hr_rpt_def";
}
/**
 * 使用主键字段进行初始化的构造子.
 *
 * 创建日期:(2006-9-26)
 */
public RptDefVO() {
	super();
}
/**
 * 使用主键进行初始化的构造子.
 *
 * 创建日期:(2006-9-26)
 * @param Pk_rpt_def 主键值
 */
public RptDefVO(String newPk_rpt_def) {
	super();

	// 为主键字段赋值:
	pk_rpt_def = newPk_rpt_def;
}
/**
 * 返回对象标识,用来唯一定位对象.
 *
 * 创建日期:(2006-9-26)
 * @return String
 */
public String getPrimaryKey() {

	return pk_rpt_def;
}
/**
 * 设置对象标识,用来唯一定位对象.
 *
 * 创建日期:(2006-9-26)
 * @param pk_rpt_def String 
 */
public void setPrimaryKey(String newPk_rpt_def) {

	pk_rpt_def = newPk_rpt_def;
}
/**
 * 返回数值对象的显示名称.
 *
 * 创建日期:(2006-9-26)
 * @return java.lang.String 返回数值对象的显示名称.
 */
public String getEntityName() {

	return "RptDef";
}
/* (non-Javadoc)
 * @see java.lang.Object#toString()
 */
public String toString() {
	// TODO Auto-generated method stub
	return getRpt_code()+" "+getRpt_name();
}
/**
 * @return the pk_rpt_def
 */
public String getPk_rpt_def() {
	return pk_rpt_def;
}
/**
 * @param pk_rpt_def the pk_rpt_def to set
 */
public void setPk_rpt_def(String pk_rpt_def) {
	this.pk_rpt_def = pk_rpt_def;
}
/**
 * @return the creater_name
 */
public String getCreater_name() {
	return creater_name;
}
/**
 * @param creater_name the creater_name to set
 */
public void setCreater_name(String creater_name) {
	this.creater_name = creater_name;
}
/**
 * @return the updater_name
 */
public String getUpdater_name() {
	return updater_name;
}
/**
 * @param updater_name the updater_name to set
 */
public void setUpdater_name(String updater_name) {
	this.updater_name = updater_name;
}
/**
 * 
 */
public void setAttributeValue(String attributeName, Object value) {
	if(!StringUtils.hasText(attributeName)){
		return;
	}
	
	if(attributeName.equalsIgnoreCase("create_time") || 
			attributeName.equalsIgnoreCase("update_time")){
		if(value!=null && value instanceof String){
			super.setAttributeValue(attributeName, new UFDateTime((String)value));
			return;
		}
	}
	// TODO Auto-generated method stub
	super.setAttributeValue(attributeName, value);
}

///**
// * 克隆方法
// */
//public Object clone() {
//	RptDefVO tarVO = new RptDefVO();
//	
//	
//	// 最后返回对象
//	return tarVO;
//}
}