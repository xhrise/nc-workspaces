/* Generated by Together */

package com.ufsoft.report.dialog;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JPanel;

import com.ufsoft.report.util.MultiLang;

/**
 * 该类为实现向导接口IWizard的类提供一个对话框框架。 说明：
 * 根据IWizard对象中IWizardPage的getPreviousPage()和getNextPage() 实现上一步、下一步页的切换
 * 根据IWizard对象的canFinish()方法设置完成按钮的可用/不可用状态， 但当切换到最后一张向导页时完成按钮总是可用
 * 根据IWizardPage的canFlipToNextPage()方法设置下一步的可用/不可用状态
 * 点击完成按钮时调用IWizard的performFinish() 点击取消按钮时调用IWizard的performCancel()
 * 
 * @author CaiJie
 */

public class WizardDialog extends BaseDialog {

	/**
	 * 向导面板
	 */
	private JPanel m_pnlDialogArea;

	/**
	 * 按钮栏
	 */
	private ButtonBar m_ButtonBar;

	/**
	 * back按钮的显示文本
	 */
	private final String m_strBackButton = MultiLang.getString("uiuforep0000711");//"前一步";

	/**
	 * next按钮的显示文本
	 */
	private final String m_strNextButton = MultiLang.getString("uiuforep0000712");//"下一步";

	/**
	 * ok按钮的显示文本
	 */
	private final String m_strOKButton = MultiLang.getString("uiuforep0000713");//"完成";

	/**
	 * cancel按钮的显示文本
	 */
	private final String m_strCancelButton = MultiLang.getString("uiuforep0000714");//"退出";

	/**
	 * back按钮
	 */
	private JButton m_btnBack = null;

	/**
	 * next按钮
	 */
	private JButton m_btnNext = null;

	/**
	 * ok按钮
	 */
	private JButton m_btnOK = null;

	/**
	 * cancel按钮
	 */
	private JButton m_btnCancel = null;

	/**
	 * 正在显示的当前页
	 */
	private IWizardPage m_currentWizardPage = null;

	/**
	 * 当前向导
	 */
	private IWizard m_currentWizard = null;

	/**
	 * <p>
	 * 构造函数
	 * </p>
	 * <p>
	 * 设置向导和按钮面板
	 * </p>
	 * 
	 * @param title
	 *            String 向导对话框标题
	 * @param wizard
	 *            IWizard 向导
	 */
	public WizardDialog(String title, IWizard wizard) {
		this(null, title, wizard);
	}

	/**
	 * <p>
	 * 构造函数
	 * </p>
	 * <p>
	 * 设置向导和按钮面板
	 * </p>
	 * 
	 * @param parentComponent
	 *            Component 对话框父窗口
	 * @param title
	 *            String 向导对话框标题
	 * @param wizard
	 *            IWizard 向导
	 */
	public WizardDialog(Component parentComponent, String title, IWizard wizard) {
		super(parentComponent, title, true);
		if (wizard == null) {
			String strError = MultiLang.getString("uiuforep0000715");//"向导不能为空";
			throw new IllegalArgumentException(strError);
		}
		m_currentWizard = wizard;

		//设置向导
		wizard.setContainer(this);

		//加载按钮面板
		initButtonBar();
	}

	/**
	 * <p>
	 * 设置按钮栏
	 * </p>
	 */
	private void initButtonBar() {
		m_ButtonBar = super.getButtonBar();

		//添加"后退"按钮到按钮栏
		m_ButtonBar
				.addButton("BackButton", m_strBackButton, ButtonBar.RIGHT, 1);
		m_btnBack = m_ButtonBar.getButton("BackButton");
		m_btnBack.setActionCommand("WIZARD_BACK");
		m_btnBack.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				backPressed();
			}
		});

		//添加"前进"按钮到按钮栏
		m_ButtonBar
				.addButton("NextButton", m_strNextButton, ButtonBar.RIGHT, 2);
		m_btnNext = m_ButtonBar.getButton("NextButton");
		m_btnNext.setActionCommand("WIZARD_NEXT");
		m_btnNext.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				nextPressed();
			}
		});

		//继承基类BasicDilaog的ok按钮
		m_btnOK = super.getOKButton();
		m_btnOK.setText(m_strOKButton);
		m_ButtonBar.setOrder(m_ButtonBar.getButtonName(m_btnOK), 3);

		//继承基类BasicDilaog的cancel按钮
		m_btnCancel = super.getCancelButton();
		m_btnCancel.setText(m_strCancelButton);
		m_ButtonBar.setOrder(m_ButtonBar.getButtonName(m_btnCancel), 4);
	}

	/**
	 * 在向导对话框中显示指定的页面
	 * 
	 * @param page
	 *            IWizardPage 指定要显示的页面
	 */
	protected void showPage(IWizardPage page) {
		if (page != null) {
			m_pnlDialogArea.remove((JPanel) getCurrentWizardPage());
			m_pnlDialogArea.add((JPanel) page);
			m_currentWizardPage = page;
			pack();
			update(this.getGraphics());
		}
	}

	/**
	 * 响应向导上的后退键被按下，并设置四个标准按钮的状态
	 */
	protected void backPressed() {
		//显示上一个向导页面
		if ((m_currentWizardPage != null)
				&& (m_currentWizard.getPreviousPage(m_currentWizardPage) != null)) {
			showPage(m_currentWizard.getPreviousPage(m_currentWizardPage));

			//设置四个标准按钮的状态
			if (m_currentWizardPage == m_currentWizard.getStartingPage()) { //已经到初始页,设"前一步"按钮不可用
				m_btnBack.setEnabled(false);
				if (m_currentWizardPage.canFlipToNextPage()) {
					m_btnNext.setEnabled(true);
				} else {
					m_btnNext.setEnabled(false);
				}
				if (m_currentWizard.canFinish()) {
					m_btnOK.setEnabled(true);
				} else {
					m_btnOK.setEnabled(false);
				}
				m_btnCancel.setEnabled(true);
				getRootPane().setDefaultButton(m_btnNext); // 指定默认的按钮为"前进"按钮
			} else { //还没有退回到初始页
				m_btnBack.setEnabled(true);
				if (m_currentWizardPage.canFlipToNextPage()) {
					m_btnNext.setEnabled(true);
				} else {
					m_btnNext.setEnabled(false);
				}
				if (m_currentWizard.canFinish()) {
					m_btnOK.setEnabled(true);
				} else {
					m_btnOK.setEnabled(false);
				}
				m_btnCancel.setEnabled(true);
				getRootPane().setDefaultButton(m_btnNext); // 指定默认的按钮为"前进"按钮
			}
		}
	}

	/**
	 * 响应向导上的前进键被按下，并设置四个标准按钮的状态
	 */
	protected void nextPressed() {
		//判读当前页面是否已经完成
		if (!m_currentWizardPage.canFlipToNextPage()) {
			return;
		}

		//显示下一个向导页面
		if ((m_currentWizardPage != null)
				&& (m_currentWizard.getNextPage(m_currentWizardPage) != null)) {
			showPage(m_currentWizard.getNextPage(m_currentWizardPage));

			//设置四个标准按钮的状态
			//如果当前页无后继页,则设"下一步"按钮不可用,"完成"按钮可用
			if (m_currentWizard.getNextPage(m_currentWizardPage) == null) {
				m_btnBack.setEnabled(true);
				if (m_currentWizardPage.canFlipToNextPage()) {
					m_btnNext.setEnabled(true);
				} else {
					m_btnNext.setEnabled(false);
				}
				m_btnOK.setEnabled(true);
				m_btnCancel.setEnabled(true);
				getRootPane().setDefaultButton(m_btnOK); // 指定默认的按钮为"完成"按钮
			} else { //如果当前页有后继页,则设"下一步"按钮可用,"完成"按钮不可用
				m_btnBack.setEnabled(true);
				if (m_currentWizardPage.canFlipToNextPage()) {
					m_btnNext.setEnabled(true);
				} else {
					m_btnNext.setEnabled(false);
				}
				if (m_currentWizard.canFinish()) {
					m_btnOK.setEnabled(true);
				} else {
					m_btnOK.setEnabled(false);
				}
				m_btnCancel.setEnabled(true);
				getRootPane().setDefaultButton(m_btnNext); // 指定默认的按钮为"前进"按钮
			}
		}
	}

	/**
	 * 响应向导上的完成键被按下
	 */
	protected void finishDialog() {
		if (m_currentWizard.performFinish())
			super.finishDialog();

	}

	/**
	 * 响应向导上的取消键被按下
	 */
	protected void cancelDialog() {
		if (m_currentWizard.performCancel())
			super.cancelDialog();
	}

	/**
	 * <p>
	 * 显示向导
	 * </p>
	 * <p>
	 * 设置四个标准按钮的初始状态，显示初始页并调整按钮的显示位置,使它们尽量靠近对话框右下角
	 * </p>
	 */
	public void show() {
		if (m_currentWizard.getStartingPage() == null) {
			String strError = MultiLang.getString("uiuforep0000716");//"向导没有任何页面可显示";
			throw new IllegalArgumentException(strError);
		}

		//初始化四个标准按钮的状态
		if ((m_currentWizard.getStartingPage()).getNextPage() == null) { //只有一个起始页面无后续页面
			m_btnBack.setEnabled(false);
			m_btnNext.setEnabled(false);

			if (m_currentWizard.canFinish()) {
				m_btnOK.setEnabled(true);
			} else {
				m_btnOK.setEnabled(false);
			}
			m_btnCancel.setEnabled(true);
			getRootPane().setDefaultButton(m_btnOK); // 指定默认的按钮为完成"按钮
		} else { //有多个页面要显示
			m_btnBack.setEnabled(false);
			if (m_currentWizard.getStartingPage().canFlipToNextPage()) {
				m_btnNext.setEnabled(true);
			} else {
				m_btnNext.setEnabled(false);
			}
			if (m_currentWizard.canFinish()) {
				m_btnOK.setEnabled(true);
			} else {
				m_btnOK.setEnabled(false);
			}
			m_btnCancel.setEnabled(true);
			getRootPane().setDefaultButton(m_btnNext); // 指定默认的按钮为"前进"按钮
		}

		//加载初始页面并显示
		if (m_pnlDialogArea == null) {
			m_pnlDialogArea = super.getDialogArea();
		}
		m_currentWizardPage = m_currentWizard.getStartingPage();
		m_pnlDialogArea.add((JPanel) (m_currentWizardPage));

		//显示对话框
		setResizable(false); //不允许改变对话框大小
		pack();
		setLocationRelativeTo(this.getParent());
		super.show();
	}

	/**
	 * 获取向导的当前显示页
	 * 
	 * @return IWizardPage 当前向导页
	 */
	public IWizardPage getCurrentWizardPage() {
		return m_currentWizardPage;
	}
	/**
	 * 获取对话框中的向导
	 * 
	 * @return IWizard 当前向导
	 */
	public IWizard getWizard() {
		return m_currentWizard;
	}

	/**
	 * 统一设置所有向导页面的大小
	 * 
	 * @param width
	 *            int 向导页面的宽
	 * @param height
	 *            int 向导页面的高
	 */
	public void setPageSize(int width, int height) {
		//设置各个向导页面大小
		IWizardPage[] arrPage = m_currentWizard.getPages();
		for (int i = 0; i < arrPage.length; i++) {
			((JPanel) arrPage[i])
					.setPreferredSize(new Dimension(width, height));
		}
	}

	/**
	 * 获取back按钮
	 * 
	 * @return JButton
	 */
	public JButton getBackButton() {
		return m_btnBack;
	}

	/**
	 * 获取next按钮
	 * 
	 * @return JButton
	 */
	public JButton getNextButton() {
		return m_btnNext;
	}

	/**
	 * 获取ok按钮
	 * 
	 * @return JButton
	 */
	public JButton getOKButton() {
		return m_btnOK;
	}

	/**
	 * 获取cancel按钮
	 * 
	 * @return JButton
	 */
	public JButton getCancelButton() {
		return m_btnCancel;
	}

}