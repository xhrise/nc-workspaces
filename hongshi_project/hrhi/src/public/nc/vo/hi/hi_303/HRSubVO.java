/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.vo.hi.hi_303;

import java.util.ArrayList;
import nc.vo.pub.*;
import nc.vo.pub.lang.*;
import nc.vo.hi.hi_401.SetdictVO;
import java.util.Vector;
import nc.vo.hi.pub.*;
import nc.vo.hi.hi_401.SetdictItemVO;

/**
 * 此处插入类型说明。
 *
 * 创建日期：(2001-4-29)
 * @author：
 */
public class HRSubVO extends CircularlyAccessibleValueObject {
















/**
 * 使用主键字段进行初始化的构造子。
 *
 * 创建日期：(2001-4-29)
 */
public HRSubVO() {


}

/**
 * 根类Object的方法,克隆这个VO对象。
 *
 * 创建日期：(2001-4-29)
 */
public Object clone() {

	// 复制基类内容并创建新的VO对象：
	Object o = null;
	try {
		o = super.clone();
	} catch (Exception e) {}
	HRSubVO psndata = (HRSubVO)o;

	// 你在下面复制本VO对象的所有属性：

	return psndata;
}
/**
 * 返回数值对象的显示名称。
 *
 * 创建日期：(2001-4-29)
 * @return java.lang.String 返回数值对象的显示名称。
 */
public String getEntityName() {

	return "Data";
}
/**
 * 此处插入方法说明。
 * 创建日期：(2002-3-23 11:24:40)
 */
public String getPrimaryKey()  {

	return m_pk_sub;
}
/**
 * 此处插入方法说明。
 * 创建日期：(2002-3-23 11:24:40)
 */
public void setPrimaryKey(String key) {

	m_pk_sub=key;
}














/**
 * 验证对象各属性之间的数据逻辑正确性。
 *
 * 创建日期：(2001-4-29)
 * @exception nc.vo.pub.ValidationException 如果验证失败，抛出
 *     ValidationException，对错误进行解释。
 */
public void validate() throws ValidationException {
	ArrayList errFields = new ArrayList(); // errFields record those null fields that cannot be null.
	// 检查是否为不允许空的字段赋了空值，你可能需要修改下面的提示信息：
	/*if (m_pk_sub == null) {
		errFields.add(new String("主键"));
	}*/
	if (m_pk == null) {
		errFields.add(new String(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("600715","UPP600715-000031")/*@res "父表主键"*/));
	}
	if (tablename.equalsIgnoreCase("hi_psndoc_deptchg"))
	{
		String dept = (String) getAttributeValue("pk_deptdoc");
		if (dept == null || dept.trim().length() <= 0)
			errFields.add(new String(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("600715","UPP600715-000008")/*@res "部门"*/));
		String psncl = (String) getAttributeValue("pk_psncl");
		if (psncl == null || psncl.trim().length() <= 0)
		{
			errFields.add(new String(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("600715","UPP600715-000032")/*@res "人员类别"*/));
		}
	}	// construct the exception message:
	StringBuffer message = new StringBuffer();
	message.append(nc.vo.bd.IBDMsg.MSG_NULL_FIELD);//message.append("下列字段不能为空：");
	if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append(",");//message.append("、");
			message.append(temp[i]);
		}
		// throw the exception:
		throw new NullFieldException(message.toString());
	}

}
/**
 * <p>需要在一个循环中访问的属性的名称数组。
 * <p>
 * 创建日期：(??Date??)
 * @return java.lang.String[]
 */
public java.lang.String[] getAttributeNames()
{
	String[] names =
		new String[] {getPkname(),getPksubname() };
	String allNames[] = new String[names.length + getFieldnames().length];
	System.arraycopy(names, 0, allNames, 0, names.length);
	System.arraycopy(getFieldnames(), 0, allNames, names.length, getFieldnames().length);
	return allNames;
}
/**
 *  <p>根据一个属性名称字符串该属性的值。
 *  <p>
 * 创建日期：(2001-4-29)
 * @param key java.lang.String
 */
public Object getAttributeValue(String attributeName)
{
	if (attributeName.equalsIgnoreCase(getPkname()))
	{
		return getPk_main();
	}
	else if (attributeName.equalsIgnoreCase(getPksubname()))
	{
		return getPrimaryKey();
	}
	else
	{
		for (int i = 0; i < getFieldnames().length; i++)
		{
			if (getFieldnames()[i] == null)
				continue;
			if (getFieldValues() != null)
			{
				if (getFieldnames()[i].equals(attributeName))
					return getFieldValues()[i];
			}
			else
				return null;
		}
		return null;
	}

}
/**
 *  <p>对参数name对型的属性设置值。
 *  <p>
 * 创建日期：(2001-4-29)
 * @param key java.lang.String
 */
public void setAttributeValue(String name, Object value) {
	if (name.equalsIgnoreCase(getPkname())) {
		setPk_main((String) value);
	} else
		if (name.equalsIgnoreCase(getPksubname())) {
			setPrimaryKey((String) value);
		} else {
	        //对于没有初始化的情况的处理
	        autocheck(name);
			for (int i = 0; i < getFieldnames().length; i++) {
				if (getFieldnames()[i].equals(name)) {

					if (value == null)
						getFieldValues()[i] = null;
					else
						getFieldValues()[i] = value;
				}
			}
		}
}









	private java.lang.String[] m_fielddesc = null;//字段的中文描述
	private java.lang.String[] m_fieldnames = null;
	private Integer[] m_fieldtypes;
	private java.lang.Object[] m_fieldvalues = null;
	public String m_pk;//本记录的外键
	/**
	 *     描述上面属性的FieldObjects。主要用于系统工具中，
	 * 业务代码中不会用到下面的FieldObjects。
	 */
	private static StringField m_pk_psndoc_subField;
	private static StringField m_pk_psndocField;
	public String m_pk_sub;//本记录的主键
	private java.lang.String pkname;//主表主键字段名
	private java.lang.String pksubname;//子表主键字段名
//	private java.lang.String[] m_fielddesc;
	private java.lang.String tablename; //表名称

/**
 * 使用主键进行初始化的构造子。
 *
 * 创建日期：(2001-4-29)
 * @param ??fieldNameForMethod?? 主键值
 */
public HRSubVO(SetdictVO setdict)
{

	if (setdict != null)
	{
		if (setdict.getChildrenVO() != null && setdict.getChildrenVO().length != 0)

		{   m_fieldnames=new String[setdict.getChildrenVO().length];
			m_fieldtypes=new Integer[setdict.getChildrenVO().length];
			m_fieldvalues=new Object[setdict.getChildrenVO().length];
			for (int i = 0; i < setdict.getChildrenVO().length; i++)
			{
				SetdictItemVO item = (SetdictItemVO) setdict.getChildrenVO()[i];
				setFieldName(i, item.getFldcode());
				setFieldType(i, item.getDatatype());

			}

		}
	}

}

/**
 * 此处插入方法描述。
 * 创建日期：(2003-3-15 9:13:34)
 * @param column java.lang.String
 */
public void autocheck(String column) {
	if(getFieldnames()==null || getFieldnames().length<1){
		//空的结构
		setFieldNames(new String[1]);
		getFieldnames()[0] = column;
		setFieldTypes(new Integer[1]);
		getFieldTypes()[0] = new Integer(0);
		setFieldValues(new Object[1]);
	}else{
		//判断是否存在
		boolean isExist = false;
		String str = "";
		for(int i=0;i<getFieldnames().length;i++){
			if(getFieldnames()[i].equalsIgnoreCase(column)){
				isExist = true;
				break;
			}
		}
		//自动添加进来
		if(!isExist){
			setFieldNames((String[])nc.vo.pub.util.Convertor.addObjectToArray(getFieldnames(),column));
			setFieldTypes((Integer[])nc.vo.pub.util.Convertor.addObjectToArray(getFieldTypes(),new Integer(0)));
			setFieldValues(convertVectorToArray(getFieldValues(),new Object()));
		}
	}
}

/**
 * 此处插入方法描述。
 * 创建日期：(2003-3-15 9:30:01)
 * @return java.lang.Object[]
 * @param desc java.lang.Object[]
 * @param instobj java.lang.Object
 */
public Object[] convertVectorToArray(Object[] desc, Object instobj) {
	if(desc==null || desc.length<1){
		Object[] ret = new Object[1];
		ret[0] = instobj;
		return ret;
	}
	//
	Vector v = nc.vo.pub.util.Convertor.convertArrayToVector(desc);
	v.addElement(instobj);
	Object[] ret = new Object[v.size()];
	for(int i=0;i<v.size();i++){
		ret[i]= v.get(i);
	}
	return ret;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 15:13:03)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @return java.lang.String[]
 */
public java.lang.String[] getFielddesc() {
	return m_fielddesc;
}

/**
 * 此处插入方法说明。
 * 创建日期：(2001-4-29 15:38:22)
 * @return java.lang.Object[]
 */
public String[] getFieldnames() {
	return m_fieldnames;
}

/**
 * 此处插入方法说明。
 * 创建日期：(2002-3-23 11:24:40)
 */
public Integer[] getFieldTypes() {
	return 	 m_fieldtypes;

	}

/**
 * 此处插入方法说明。
 * 创建日期：(2001-4-29 15:38:22)
 * @return java.lang.Object[]
 */
public java.lang.Object[] getFieldValues() {
	return m_fieldvalues;
}

/**
 * 属性m_begindate的Getter方法。
 *
 * 创建日期：(2002-3-23)
 * @return UFDate
 */
public String getPk_main() {
	return m_pk;
}

/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_psndoc_subField() {

	if(m_pk_psndoc_subField == null){
		try{
			m_pk_psndoc_subField = new StringField();
			// 属性的名称
			m_pk_psndoc_subField.setName("pk_psndoc_sub");
			// 属性的描述
			m_pk_psndoc_subField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_psndoc_subField;
}

/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-3-23)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_psndocField() {

	if(m_pk_psndocField == null){
		try{
			m_pk_psndocField = new StringField();
			// 属性的名称
			m_pk_psndocField.setName("pk_psndoc");
			// 属性的描述
			m_pk_psndocField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_psndocField;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 18:11:33)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @return java.lang.String
 */
public java.lang.String getPkname() {
	return pkname;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 18:12:14)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @return java.lang.String
 */
public java.lang.String getPksubname() {
	return pksubname;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 15:41:49)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @return java.lang.String
 */
public java.lang.String getTablename() {
	return tablename;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 15:13:03)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @param newM_fielddesc java.lang.String[]
 */
public void setFielddesc(java.lang.String[] newM_fielddesc) {
	m_fielddesc = newM_fielddesc;
}

/**
 * 自定义属性的setter方法。
 *
 * 创建日期：(2002-3-23)
 * @param newM_begindate UFDate
 */
public void setFieldName(int i,String newfieldname)
{

		m_fieldnames[i] = newfieldname;


}

/**
 * 自定义属性的setter方法。
 *
 * 创建日期：(2002-3-23)
 * @param newM_begindate UFDate
 */
public void setFieldNames(String[] newfieldnames)
{
	if (newfieldnames == null || newfieldnames.length == 0)
		return;
	m_fieldnames = new String[newfieldnames.length];
	for (int i = 0; i < m_fieldnames.length; i++)
	{
		m_fieldnames[i] = newfieldnames[i];

	}
}

/**
 * 此处插入方法说明。
 * 创建日期：(2002-3-23 11:24:40)
 */
public void setFieldType(int i, Integer newtype)
{

	m_fieldtypes[i] = newtype;

}

/**
 * 此处插入方法说明。
 * 创建日期：(2002-3-23 11:24:40)
 */
public void setFieldTypes(Integer[] newtypes) {
	if (newtypes == null || newtypes.length == 0)
		return;
	m_fieldtypes = new Integer[newtypes.length];
	for (int i = 0; i < m_fieldtypes.length; i++)
	{
		m_fieldtypes[i] = newtypes[i];

	}

	}

/**
 * 属性m_begindate的setter方法。
 *
 * 创建日期：(2002-3-23)
 * @param newM_begindate UFDate
 */
public void setFieldValue(int index, Object newfieldvalue)
{

	m_fieldvalues[index] = newfieldvalue;

}

/**
 * 属性m_begindate的setter方法。
 *
 * 创建日期：(2002-3-23)
 * @param newM_begindate UFDate
 */
public void setFieldValue(int index, String newfieldvalue)
{

	m_fieldvalues[index] = newfieldvalue;

}

/**
 * 属性m_begindate的setter方法。
 *
 * 创建日期：(2002-3-23)
 * @param newM_begindate UFDate
 */
public void setFieldValues(Object[] newfieldvalues)
{
	if (newfieldvalues == null || newfieldvalues.length == 0)
		return;
	m_fieldvalues = new Object[newfieldvalues.length];
	for (int i = 0; i < m_fieldvalues.length; i++)
	{
		m_fieldvalues[i] = newfieldvalues[i];

	}
}

/**
 * 属性m_begindate的setter方法。
 *
 * 创建日期：(2002-3-23)
 * @param newM_begindate UFDate
 */
public void setFieldValues(String[] newfieldvalues)
{
	if (newfieldvalues == null || newfieldvalues.length == 0)
		return;
	m_fieldvalues = new String[newfieldvalues.length];
	for (int i = 0; i < m_fieldvalues.length; i++)
	{
		m_fieldvalues[i] = newfieldvalues[i];

	}
}

/**
 * 属性m_begindate的Getter方法。
 *
 * 创建日期：(2002-3-23)
 * @return UFDate
 */
public void setPk_main(String s) {
	m_pk=s;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 18:11:33)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @param newPkname java.lang.String
 */
public void setPkname(java.lang.String newPkname) {
	pkname = newPkname;
}

/**
 * 属性m_begindate的setter方法。
 *
 * 创建日期：(2002-3-23)
 * @param newM_begindate UFDate
 */
public void setPKOfPsndocsub(String newPsndocSub) {

	m_pk_sub = newPsndocSub;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 18:12:14)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @param newPksubname java.lang.String
 */
public void setPksubname(java.lang.String newPksubname) {
	pksubname = newPksubname;
}

/**
 * /**
 *  * 在此处插入方法的说明。
 *  * @version：(2002-4-28 15:41:49)
 *  * @param：<|>
 *  * @return：
 *  * @exception 异常描述
 *  * @see		需要参见的其它内容
 *  * @since		从类的那一个版本，此方法被添加进来。（可选）
 *  * @deprecated该方法从类的那一个版本后，已经被其它方法替换。（可选） *-/
 * *-/
 *
 * @param newTablename java.lang.String
 */
public void setTablename(java.lang.String newTablename) {
	tablename = newTablename;
}
}
