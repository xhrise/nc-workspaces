/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.vo.hi.hi_108;

import java.util.ArrayList;

import nc.vo.ml.NCLangRes4VoTransl;
import nc.vo.pub.*;
import nc.vo.pub.lang.*;

/**
 * 子。
 * 
 * 创建日期：(2002-3-5)
 * @author：zhonghaijing
 */
public class ChgbilltypeItemVO extends CircularlyAccessibleValueObject {

	public String m_pk_setofchgbill;
	public String m_pk_chgbilltype;
	public String m_pk_setdict;
	public Integer m_dr;
	public UFDateTime m_ts;

	/**
	 *     描述上面属性的FieldObjects。主要用于系统工具中，
	 * 业务代码中不会用到下面的FieldObjects。
	 */
	private static StringField m_pk_setofchgbillField;
	private static StringField m_pk_chgbilltypeField;
	private static StringField m_pk_setdictField;
	private static IntegerField m_drField;
	private static UFDateTimeField m_tsField;
/**
 * 使用主键字段进行初始化的构造子。
 *
 * 创建日期：(2002-3-5)
 */
public ChgbilltypeItemVO() {

}
/**
 * 使用主键进行初始化的构造子。
 *
 * 创建日期：(2002-3-5)
 * @param ??fieldNameForMethod?? 主键值
 */
public ChgbilltypeItemVO(String newPk_setofchgbill) {

	// 为主键字段赋值:
	m_pk_setofchgbill = newPk_setofchgbill;
}
/**
 * 根类Object的方法,克隆这个VO对象。
 *
 * 创建日期：(2002-3-5)
 */
public Object clone() {

	// 复制基类内容并创建新的VO对象：
	Object o = null;
	try {
		o = super.clone();
	} catch (Exception e) {}
	ChgbilltypeItemVO setofchgbill = (ChgbilltypeItemVO)o;

	// 你在下面复制本VO对象的所有属性：

	return setofchgbill;
}
/**
 * 返回数值对象的显示名称。
 *
 * 创建日期：(2002-3-5)
 * @return java.lang.String 返回数值对象的显示名称。
 */
public String getEntityName() {

	return "Setofchgbill";
}
/**
 * 返回对象标识，用来唯一定位对象。
 *
 * 创建日期：(2002-3-5)
 * @return String
 */
public String getPrimaryKey() {

	return m_pk_setofchgbill;
}
/**
 * 设置对象标识，用来唯一定位对象。
 *
 * 创建日期：(2002-3-5)
 * @param m_pk_setofchgbill String 
 */
public void setPrimaryKey(String newPk_setofchgbill) {

	m_pk_setofchgbill = newPk_setofchgbill;
}
/**
 * 属性m_pk_setofchgbill的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return String
 */
public String getPk_setofchgbill() {
	return m_pk_setofchgbill;
}
/**
 * 属性m_pk_chgbilltype的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return String
 */
public String getPk_chgbilltype() {
	return m_pk_chgbilltype;
}
/**
 * 属性m_pk_setdict的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return String
 */
public String getPk_setdict() {
	return m_pk_setdict;
}
/**
 * 属性m_dr的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return Integer
 */
public Integer getDr() {
	return m_dr;
}
/**
 * 属性m_ts的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return UFDateTime
 */
public UFDateTime getTs() {
	return m_ts;
}
/**
 * 属性m_pk_setofchgbill的setter方法。
 *
 * 创建日期：(2002-3-5)
 * @param newM_pk_setofchgbill String
 */
public void setPk_setofchgbill(String newPk_setofchgbill) {

	m_pk_setofchgbill = newPk_setofchgbill;
}
/**
 * 属性m_pk_chgbilltype的setter方法。
 *
 * 创建日期：(2002-3-5)
 * @param newM_pk_chgbilltype String
 */
public void setPk_chgbilltype(String newPk_chgbilltype) {

	m_pk_chgbilltype = newPk_chgbilltype;
}
/**
 * 属性m_pk_setdict的setter方法。
 *
 * 创建日期：(2002-3-5)
 * @param newM_pk_setdict String
 */
public void setPk_setdict(String newPk_setdict) {

	m_pk_setdict = newPk_setdict;
}
/**
 * 属性m_dr的setter方法。
 *
 * 创建日期：(2002-3-5)
 * @param newM_dr Integer
 */
public void setDr(Integer newDr) {

	m_dr = newDr;
}
/**
 * 属性m_ts的setter方法。
 *
 * 创建日期：(2002-3-5)
 * @param newM_ts UFDateTime
 */
public void setTs(UFDateTime newTs) {

	m_ts = newTs;
}
/**
 * 验证对象各属性之间的数据逻辑正确性。
 *
 * 创建日期：(2002-3-5)
 * @exception nc.vo.pub.ValidationException 如果验证失败，抛出
 *     ValidationException，对错误进行解释。
 */
public void validate() throws ValidationException {

	ArrayList errFields = new ArrayList(); // errFields record those null fields that cannot be null.
	// 检查是否为不允许空的字段赋了空值，你可能需要修改下面的提示信息：
	if (m_pk_setofchgbill == null) {
		errFields.add(new String("m_pk_setofchgbill"));
	}
	// construct the exception message:
	StringBuffer message = new StringBuffer();
//	message.append("下列字段不能为空：");
	message.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID(
			"600700", "UPP600700-000346")/* @res "下列字段不能为空：" */);
	if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append("、");
			message.append(temp[i]);
		}
		// throw the exception:
		throw new NullFieldException(message.toString());
	}
}
/**
 * <p>需要在一个循环中访问的属性的名称数组。
 * <p>
 * 创建日期：(??Date??)
 * @return java.lang.String[]
 */
public java.lang.String[] getAttributeNames() {

	return new String[]{ "pk_chgbilltype", "pk_setdict","setdictname", "dr", "ts" };
}
/**
 *  <p>根据一个属性名称字符串该属性的值。
 *  <p>
 * 创建日期：(2002-3-5)
 * @param key java.lang.String
 */
public Object getAttributeValue(String attributeName) {

	if (attributeName.equals("pk_setofchgbill")) {
		return m_pk_setofchgbill;
	} else
		if (attributeName.equals("pk_chgbilltype")) {
			return m_pk_chgbilltype;
		} else
			if (attributeName.equals("pk_setdict")) {
				return m_pk_setdict;
			} else
				if (attributeName.equals("dr")) {
					return m_dr;
				} else
					if (attributeName.equals("ts")) {
						return m_ts;
					} else // add
						if (attributeName.equals("setdictname")) {
							return m_setdictname;
						}
	return null;
}
/**
 *  <p>对参数name对型的属性设置值。
 *  <p>
 * 创建日期：(2002-3-5)
 * @param key java.lang.String
 */
public void setAttributeValue(String name, Object value) {

	try {
		if (name.equals("pk_setofchgbill")) {
			m_pk_setofchgbill = (String) value;
		} else
			if (name.equals("pk_chgbilltype")) {
				m_pk_chgbilltype = (String) value;
			} else
				if (name.equals("pk_setdict")) {
					m_pk_setdict = (String) value;
				} else
					if (name.equals("dr")) {
						m_dr = (Integer) value;
					} else
						if (name.equals("ts")) {
							m_ts = (UFDateTime) value;
						} else//add
							if (name.equals("setdictname")) {
								m_setdictname = (String) value;
							}
	} catch (ClassCastException e) {
//		throw new ClassCastException(
//			"setAttributeValue方法中为 " + name + " 赋值时类型转换错误！（值：" + value + "）"); 
		throw new ClassCastException("setAttributeValue" + 
				NCLangRes4VoTransl.getNCLangRes().getStrByID("600700", "UPP600700-000374")/* @res "方法中为 " */ + 
				name + 
				NCLangRes4VoTransl.getNCLangRes().getStrByID("600700", "UPP600700-000349")/* @res " 赋值时类型转换错误！（值：" */ +
				value + "）");
	}
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_setofchgbillField() {

	if(m_pk_setofchgbillField == null){
		try{
			m_pk_setofchgbillField = new StringField();
			// 属性的名称
			m_pk_setofchgbillField.setName("pk_setofchgbill");
			// 属性的描述
			m_pk_setofchgbillField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_setofchgbillField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_chgbilltypeField() {

	if(m_pk_chgbilltypeField == null){
		try{
			m_pk_chgbilltypeField = new StringField();
			// 属性的名称
			m_pk_chgbilltypeField.setName("pk_chgbilltype");
			// 属性的描述
			m_pk_chgbilltypeField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_chgbilltypeField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_setdictField() {

	if(m_pk_setdictField == null){
		try{
			m_pk_setdictField = new StringField();
			// 属性的名称
			m_pk_setdictField.setName("pk_setdict");
			// 属性的描述
			m_pk_setdictField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_setdictField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return nc.vo.pub.FieldObject
 */
public static IntegerField getDrField() {

	if(m_drField == null){
		try{
			m_drField = new IntegerField();
			// 属性的名称
			m_drField.setName("dr");
			// 属性的描述
			m_drField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_drField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return nc.vo.pub.FieldObject
 */
public static UFDateTimeField getTsField() {

	if(m_tsField == null){
		try{
			m_tsField = new UFDateTimeField();
			// 属性的名称
			m_tsField.setName("ts");
			// 属性的描述
			m_tsField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_tsField;
}
/**
 * 返回这个ValueObject类的所有FieldObject对象的集合。
 *
 * 创建日期：(2002-3-5)
 * @return nc.vo.pub.FieldObject[]
 */
public FieldObject[] getFields() {

	FieldObject[] fields = {getPk_setofchgbillField(), getPk_chgbilltypeField(), getPk_setdictField(), getDrField(), getTsField()};

	return fields;
}

	//add
	public String m_setdictname;
	// add
	private static StringField m_setdictnameFiled;

/**
 * 属性m_setdictname的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return String
 */
public String getSetdictname() {
	return m_setdictname;
}

/**
 * 属性m_setdictname的setter方法。
 *
 * 创建日期：(2002-3-5)
 * @param newM_setdictname String
 */
public void setSetdictname(String newSetdictname) {

	m_setdictname = newSetdictname;
}
}