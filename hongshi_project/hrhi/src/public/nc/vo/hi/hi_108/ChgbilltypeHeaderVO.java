/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.vo.hi.hi_108;

import java.util.ArrayList;

import nc.vo.ml.NCLangRes4VoTransl;
import nc.vo.pub.*;
import nc.vo.pub.lang.*;

/**
 * 主。
 * 
 * 创建日期：(2002-3-5)
 * @author：zhonghaijing
 */
public class ChgbilltypeHeaderVO extends CircularlyAccessibleValueObject {

	public String m_pk_chgbilltype;
	public String m_chgbilltypecode;
	public String m_chgbilltypename;
	public String m_pk_corp;
	public Integer m_dr;
	public UFDateTime m_ts;

	/**
	 *     描述上面属性的FieldObjects。主要用于系统工具中，
	 * 业务代码中不会用到下面的FieldObjects。
	 */
	private static StringField m_pk_chgbilltypeField;
	private static StringField m_chgbilltypecodeField;
	private static StringField m_chgbilltypenameField;
	private static StringField m_pk_corpField;
	private static IntegerField m_drField;
	private static UFDateTimeField m_tsField;
/**
 * 使用主键字段进行初始化的构造子。
 *
 * 创建日期：(2002-3-5)
 */
public ChgbilltypeHeaderVO() {

}
/**
 * 使用主键进行初始化的构造子。
 *
 * 创建日期：(2002-3-5)
 * @param ??fieldNameForMethod?? 主键值
 */
public ChgbilltypeHeaderVO(String newPk_chgbilltype) {

	// 为主键字段赋值:
	m_pk_chgbilltype = newPk_chgbilltype;
}
/**
 * 根类Object的方法,克隆这个VO对象。
 *
 * 创建日期：(2002-3-5)
 */
public Object clone() {

	// 复制基类内容并创建新的VO对象：
	Object o = null;
	try {
		o = super.clone();
	} catch (Exception e) {}
	ChgbilltypeHeaderVO chgbilltype = (ChgbilltypeHeaderVO)o;

	// 你在下面复制本VO对象的所有属性：

	return chgbilltype;
}
/**
 * 返回数值对象的显示名称。
 *
 * 创建日期：(2002-3-5)
 * @return java.lang.String 返回数值对象的显示名称。
 */
public String getEntityName() {

	return "Chgbilltype";
}
/**
 * 返回对象标识，用来唯一定位对象。
 *
 * 创建日期：(2002-3-5)
 * @return String
 */
public String getPrimaryKey() {

	return m_pk_chgbilltype;
}
/**
 * 设置对象标识，用来唯一定位对象。
 *
 * 创建日期：(2002-3-5)
 * @param m_pk_chgbilltype String 
 */
public void setPrimaryKey(String newPk_chgbilltype) {

	m_pk_chgbilltype = newPk_chgbilltype;
}
/**
 * 属性m_pk_chgbilltype的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return String
 */
public String getPk_chgbilltype() {
	return m_pk_chgbilltype;
}
/**
 * 属性m_chgbilltypecode的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return String
 */
public String getChgbilltypecode() {
	return m_chgbilltypecode;
}
/**
 * 属性m_chgbilltypename的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return String
 */
public String getChgbilltypename() {
	return m_chgbilltypename;
}
/**
 * 属性m_pk_corp的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return String
 */
public String getPk_corp() {
	return m_pk_corp;
}
/**
 * 属性m_dr的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return Integer
 */
public Integer getDr() {
	return m_dr;
}
/**
 * 属性m_ts的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return UFDateTime
 */
public UFDateTime getTs() {
	return m_ts;
}
/**
 * 属性m_pk_chgbilltype的setter方法。
 *
 * 创建日期：(2002-3-5)
 * @param newM_pk_chgbilltype String
 */
public void setPk_chgbilltype(String newPk_chgbilltype) {

	m_pk_chgbilltype = newPk_chgbilltype;
}
/**
 * 属性m_chgbilltypecode的setter方法。
 *
 * 创建日期：(2002-3-5)
 * @param newM_chgbilltypecode String
 */
public void setChgbilltypecode(String newChgbilltypecode) {

	m_chgbilltypecode = newChgbilltypecode;
}
/**
 * 属性m_chgbilltypename的setter方法。
 *
 * 创建日期：(2002-3-5)
 * @param newM_chgbilltypename String
 */
public void setChgbilltypename(String newChgbilltypename) {

	m_chgbilltypename = newChgbilltypename;
}
/**
 * 属性m_pk_corp的setter方法。
 *
 * 创建日期：(2002-3-5)
 * @param newM_pk_corp String
 */
public void setPk_corp(String newPk_corp) {

	m_pk_corp = newPk_corp;
}
/**
 * 属性m_dr的setter方法。
 *
 * 创建日期：(2002-3-5)
 * @param newM_dr Integer
 */
public void setDr(Integer newDr) {

	m_dr = newDr;
}
/**
 * 属性m_ts的setter方法。
 *
 * 创建日期：(2002-3-5)
 * @param newM_ts UFDateTime
 */
public void setTs(UFDateTime newTs) {

	m_ts = newTs;
}
/**
 * 验证对象各属性之间的数据逻辑正确性。
 *
 * 创建日期：(2002-3-5)
 * @exception nc.vo.pub.ValidationException 如果验证失败，抛出
 *     ValidationException，对错误进行解释。
 */
public void validate() throws ValidationException {

	ArrayList errFields = new ArrayList(); // errFields record those null fields that cannot be null.
	// 检查是否为不允许空的字段赋了空值，你可能需要修改下面的提示信息：
	if (m_pk_chgbilltype == null) {
		errFields.add(new String("m_pk_chgbilltype"));
	}
	// construct the exception message:
	StringBuffer message = new StringBuffer();
//	message.append("下列字段不能为空：");
	message.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID(
			"600700", "UPP600700-000346")/* @res "下列字段不能为空：" */);
	if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append("、");
			message.append(temp[i]);
		}
		// throw the exception:
		throw new NullFieldException(message.toString());
	}
}
/**
 * <p>需要在一个循环中访问的属性的名称数组。
 * <p>
 * 创建日期：(??Date??)
 * @return java.lang.String[]
 */
public java.lang.String[] getAttributeNames() {

	return new String[]{ "chgbilltypecode", "chgbilltypename", "pk_corp", "dr", "ts" };
}
/**
 *  <p>根据一个属性名称字符串该属性的值。
 *  <p>
 * 创建日期：(2002-3-5)
 * @param key java.lang.String
 */
public Object getAttributeValue(String attributeName) {

	if (attributeName.equals("pk_chgbilltype")) {
		return m_pk_chgbilltype;
	}
	else if (attributeName.equals("chgbilltypecode")) {
		return m_chgbilltypecode;
	}
	else if (attributeName.equals("chgbilltypename")) {
		return m_chgbilltypename;
	}
	else if (attributeName.equals("pk_corp")) {
		return m_pk_corp;
	}
	else if (attributeName.equals("dr")) {
		return m_dr;
	}
	else if (attributeName.equals("ts")) {
		return m_ts;
	}
	return null;
}
/**
 *  <p>对参数name对型的属性设置值。
 *  <p>
 * 创建日期：(2002-3-5)
 * @param key java.lang.String
 */
public void setAttributeValue(String name, Object value) {

	try {
		if (name.equals("pk_chgbilltype")) {
			m_pk_chgbilltype = (String) value;
		}
		else if (name.equals("chgbilltypecode")) {
			m_chgbilltypecode = (String) value;
		}
		else if (name.equals("chgbilltypename")) {
			m_chgbilltypename = (String) value;
		}
		else if (name.equals("pk_corp")) {
			m_pk_corp = (String) value;
		}
		else if (name.equals("dr")) {
			m_dr = (Integer) value;
		}
		else if (name.equals("ts")) {
			m_ts = (UFDateTime) value;
		}
	}
	catch (ClassCastException e) {
//		throw new ClassCastException("setAttributeValue方法中为 " + name + " 赋值时类型转换错误！（值：" + value + "）");
		throw new ClassCastException("setAttributeValue" + 
				NCLangRes4VoTransl.getNCLangRes().getStrByID("600700", "UPP600700-000374")/* @res "方法中为 " */ + 
				name + 
				NCLangRes4VoTransl.getNCLangRes().getStrByID("600700", "UPP600700-000349")/* @res " 赋值时类型转换错误！（值：" */ +
				value + "）");
	}
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_chgbilltypeField() {

	if(m_pk_chgbilltypeField == null){
		try{
			m_pk_chgbilltypeField = new StringField();
			// 属性的名称
			m_pk_chgbilltypeField.setName("pk_chgbilltype");
			// 属性的描述
			m_pk_chgbilltypeField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_chgbilltypeField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getChgbilltypecodeField() {

	if(m_chgbilltypecodeField == null){
		try{
			m_chgbilltypecodeField = new StringField();
			// 属性的名称
			m_chgbilltypecodeField.setName("chgbilltypecode");
			// 属性的描述
			m_chgbilltypecodeField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_chgbilltypecodeField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getChgbilltypenameField() {

	if(m_chgbilltypenameField == null){
		try{
			m_chgbilltypenameField = new StringField();
			// 属性的名称
			m_chgbilltypenameField.setName("chgbilltypename");
			// 属性的描述
			m_chgbilltypenameField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_chgbilltypenameField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_corpField() {

	if(m_pk_corpField == null){
		try{
			m_pk_corpField = new StringField();
			// 属性的名称
			m_pk_corpField.setName("pk_corp");
			// 属性的描述
			m_pk_corpField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_corpField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return nc.vo.pub.FieldObject
 */
public static IntegerField getDrField() {

	if(m_drField == null){
		try{
			m_drField = new IntegerField();
			// 属性的名称
			m_drField.setName("dr");
			// 属性的描述
			m_drField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_drField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2002-3-5)
 * @return nc.vo.pub.FieldObject
 */
public static UFDateTimeField getTsField() {

	if(m_tsField == null){
		try{
			m_tsField = new UFDateTimeField();
			// 属性的名称
			m_tsField.setName("ts");
			// 属性的描述
			m_tsField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_tsField;
}
/**
 * 返回这个ValueObject类的所有FieldObject对象的集合。
 *
 * 创建日期：(2002-3-5)
 * @return nc.vo.pub.FieldObject[]
 */
public FieldObject[] getFields() {

	FieldObject[] fields = {getPk_chgbilltypeField(), getChgbilltypecodeField(), getChgbilltypenameField(), getPk_corpField(), getDrField(), getTsField()};

	return fields;
}
}