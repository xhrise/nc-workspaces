package nc.vo.so.so001;

/** 
 * 功能说明: 
 * 基于SmartVO的业务VO.销售订单附表,销售订单附表

 调试时可以使用nc.vo.scm.bd.SmartVODataUtils.expose()展示其数据。
 * 
 * 
 * Generated By CodeSeed 3.1
 * 修改记录：
 * 修改人,	日期,		说明
 * 
 * 
 */
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;

import nc.itf.scm.pub.redunmulti.ISourceAttribute;
import nc.itf.scm.so.pub.ISOInventoryDiscount;
import nc.ui.pub.bill.BillStatus;
import nc.ui.scm.so.SaleBillType;
import nc.vo.pub.NullFieldException;
import nc.vo.pub.ValidationException;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDateTime;
import nc.vo.pub.lang.UFDouble;
import nc.vo.scm.bd.SmartVODataUtils;
import nc.vo.scm.constant.ScmConst;
import nc.vo.scm.field.pu.AddressField;
import nc.vo.scm.field.pu.DefField;
import nc.vo.scm.field.pu.DiscountRateField;
import nc.vo.scm.field.pu.FieldDBValidateInterface;
import nc.vo.scm.field.pu.FieldDBValidateVO;
import nc.vo.scm.field.pu.FreeField;
import nc.vo.scm.field.pu.MemoField;
import nc.vo.scm.field.pu.MoneyField;
import nc.vo.scm.field.pu.NumField;
import nc.vo.scm.field.pu.PriceField;
import nc.vo.scm.field.pu.ProduceNumField;
import nc.vo.scm.field.pu.RowNoField;
import nc.vo.scm.field.pu.TaxRateField;
import nc.vo.scm.field.pu.ToBRateField;
import nc.vo.scm.plugin.ScmPluginXML;
import nc.vo.scm.pu.RelationsCalVO;
import nc.vo.scm.pub.redun.ISourceRedunVO;
import nc.vo.scm.pub.session.ClientLink;
import nc.vo.scm.pub.smart.SmartFieldMeta;
import nc.vo.scm.pub.smart.SmartVO;
import nc.vo.scm.relacal.IRelaCalInfos;
import nc.vo.scm.relacal.SCMRelationsCal;
import nc.vo.so.so016.SoVoTools;
import nc.vo.transfer.IEqualValueDownBill;
import nc.vo.transfer.IEqualValueUpBill;

@SuppressWarnings({"serial" , "unchecked" , "rawtypes" , "static-access" })
public class SaleorderBVO extends SmartVO implements Comparable, ISOInventoryDiscount, IEqualValueUpBill,
		IEqualValueDownBill, IRelaCalInfos, ISourceAttribute ,FieldDBValidateInterface{
	
	// 数据类型处理类
	private SmartVODataUtils m_SVODataUtils = new SmartVODataUtils();

	private transient static SOField[] addSaleExecuteFields = null;

	private transient static SOField[] addSaleOrderBFields = null;

	private transient static java.util.HashMap arrhs = null;

	private transient static int[] nDescriptions;// 用于单价金额数量字段映射

	private transient static String[] strKeys;// 订单上实际的字段，与nDescriptions一一对应

	private transient static int[] forbidEditField;

	/**
	 * return int[]
	 * 0--含税无税优先
	 * 1--调折扣还是调单价
	 * 2--是否主辅币核算
	 * 
	 * Integer Prior --- 强制含税或无税优先
	 * 取得单价金额算法所需的参数 
	 */
	public static synchronized int[] getCalculatePara(String key, Integer Prior, UFBoolean SA_02, String SO40) {
		//含税优先机制:默认无税优先
		int m_iPrior_Price_TaxPrice = RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE;
		//含税优先
		if (key.equals("noriginalcursummny") || key.equals("noriginalcurtaxprice")
				|| key.equals("noriginalcurtaxnetprice"))
			m_iPrior_Price_TaxPrice = RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE;
		//无税优先
		else if (key.equals("noriginalcurmny") || key.equals("noriginalcurprice") || key.equals("noriginalcurnetprice")) {
			m_iPrior_Price_TaxPrice = RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE;
		} else
			//SA_02
			m_iPrior_Price_TaxPrice = SA_02.booleanValue() ? RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE
					: RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE;

		if (Prior != null)//强制优先机制
			m_iPrior_Price_TaxPrice = Prior.intValue();

		//调单价还是调折扣：默认调折扣
		int m_iPrior_ItemDiscountRate_Price = RelationsCalVO.ITEMDISCOUNTRATE_PRIOR_TO_PRICE;
		if (SO40.equals("调整单价"))//调单价
			m_iPrior_ItemDiscountRate_Price = RelationsCalVO.PRICE_PRIOR_TO_ITEMDISCOUNTRATE;

		int[] iaPrior = new int[] { m_iPrior_Price_TaxPrice, m_iPrior_ItemDiscountRate_Price,
				RelationsCalVO.YES_LOCAL_FRAC };

		return iaPrior;
	}

	public static String[] getField() {
		if (strKeys == null) {
			// 实际字段
			strKeys = new String[] {
					// 扣税名称、类别
					"应税外加",
					// "idiscounttaxtype",//扣税类别(销售没有)

					// 税率、换算率、单品折扣、整单折扣、是否固定换算率
					"ntaxrate",
					"scalefactor",
					"nitemdiscountrate",
					"ndiscountrate",
					"fixedflag",
					"nqtscalefactor",// 报价单位换算率
					"bqtfixedflag",// 是否报价单位固定换算率

					// 主计量单位、报价计量单位
					"cunitid",
					"cquoteunitid",

					// 数量
					"nnumber",
					// "",//合格数量(销售没有)
					// "",//不合格数量(销售没有)
					"npacknumber",
					"nquoteunitnum",

					// 主计量原币价格、金额
					"noriginalcurnetprice", "noriginalcurtaxnetprice", "noriginalcurprice", "noriginalcurtaxprice",
					"noriginalcurtaxmny", "noriginalcurmny", "noriginalcursummny", "noriginalcurdiscountmny",
					"nheadsummny",

					// 报价计量原币价格
					"norgqttaxprc",// 报价单位含税单价
					"norgqtprc",// 报价单位无税单价
					"norgqttaxnetprc",// 报价单位含税净价
					"norgqtnetprc",// 报价单位无税净价

					// 主计量本币价格、金额
					"nprice", "ntaxprice", "nnetprice", "ntaxnetprice", "ntaxmny", "nmny", "nsummny", "ndiscountmny",

					// 报价计量本币价格
					"nqtprc",// 报价单位无税单价
					"nqttaxprc",// 报价单位含税单价
					"nqtnetprc",// 报价单位无税净价
					"nqttaxnetprc",// 报价单位含税净价

					// 辅计量无税单价、含税单价
					"norgviaprice", "norgviapricetax",

					// 询价原币含税单价、无税单价
					"nqtorgtaxprc", "nqtorgprc",

					"ccurrencytypeid",// 原币PK
					"pk_corp", "nexchangeotobrate",// 折本汇率

					"dbilldate",// 单据日期
					
					// PTA销售二开 添加销售订单子表字段
					// add by river for 2012-07-17
					// start ..
					"saleinvoiceid", // 销售发票ID
					"numof" , // 件数
					"lastingprice" , // 挂牌价
					"settlementprice" , // 结算价
					"deliverydate" , // 提货截止日期
					"settlementdate" , //挂结差结算日期
					"lssubprice" // 挂结价差
					
					// .. end
			};
		}
		return strKeys;
	}

	public static int[] getKeys() {
		if (nDescriptions == null) {
			// key
			nDescriptions = new int[] {
					// 扣税名称、类别
					SCMRelationsCal.DISCOUNT_TAX_TYPE_NAME,
					// SCMRelationsCal.DISCOUNT_TAX_TYPE_KEY,

					// 税率、换算率、单品折扣、整单折扣、是否固定换算率
					SCMRelationsCal.TAXRATE,
					SCMRelationsCal.CONVERT_RATE,
					SCMRelationsCal.DISCOUNT_RATE,
					SCMRelationsCal.ALLDISCOUNT_RATE,
					SCMRelationsCal.IS_FIXED_CONVERT,
					SCMRelationsCal.QT_CONVERT_RATE,// 报价单位换算率
					SCMRelationsCal.QT_IS_FIXED_CONVERT,// 是否报价固定换算率

					// 主计量单位、报价计量单位
					SCMRelationsCal.UNITID,
					SCMRelationsCal.QUOTEUNITID,

					// 数量
					SCMRelationsCal.NUM,
					// SCMRelationsCal.NUM_QUALIFIED,
					// SCMRelationsCal.NUM_UNQUALIFIED,
					SCMRelationsCal.NUM_ASSIST,
					SCMRelationsCal.QT_NUM,

					// 主计量原币价格、金额
					SCMRelationsCal.NET_PRICE_ORIGINAL, SCMRelationsCal.NET_TAXPRICE_ORIGINAL,
					SCMRelationsCal.PRICE_ORIGINAL, SCMRelationsCal.TAXPRICE_ORIGINAL,
					SCMRelationsCal.TAX_ORIGINAL,
					SCMRelationsCal.MONEY_ORIGINAL,
					SCMRelationsCal.SUMMNY_ORIGINAL,
					SCMRelationsCal.DISCOUNTMNY_ORIGINA,
					SCMRelationsCal.HEAD_SUMMNY_ORIGINAL,

					// 报价计量原币价格
					SCMRelationsCal.QT_TAXPRICE_ORIGINAL,
					SCMRelationsCal.QT_PRICE_ORIGINAL,
					SCMRelationsCal.QT_NET_TAXPRICE_ORIGINAL,
					SCMRelationsCal.QT_NET_PRICE_ORIGINAL,

					// 主计量本币价格、金额
					SCMRelationsCal.PRICE_LOCAL, SCMRelationsCal.TAXPRICE_LOCAL, SCMRelationsCal.NET_PRICE_LOCAL,
					SCMRelationsCal.NET_TAXPRICE_LOCAL, SCMRelationsCal.TAX_LOCAL, SCMRelationsCal.MONEY_LOCAL,
					SCMRelationsCal.SUMMNY_LOCAL, SCMRelationsCal.DISCOUNTMNY_LOCAL,

					// 报价计量本币价格
					SCMRelationsCal.QT_PRICE_LOCAL, SCMRelationsCal.QT_TAXPRICE_LOCAL,
					SCMRelationsCal.QT_NET_PRICE_LOCAL, SCMRelationsCal.QT_NET_TAXPRICE_LOCAL,

					// 辅计量无税单价、含税单价
					SCMRelationsCal.ASSIST_PRICE_ORIGINAL, SCMRelationsCal.ASSIST_TAXPRICE_ORIGINAL,

					// 询价原币含税单价、无税单价
					SCMRelationsCal.ASK_TAXPRICE, SCMRelationsCal.ASK_PRICE,

					SCMRelationsCal.CURRTYPEPk,// 原币PK
					SCMRelationsCal.PK_CORP, SCMRelationsCal.EXCHANGE_O_TO_BRATE,// 折本汇率

					SCMRelationsCal.BILLDATE,// 单据日期
			};
		}
		return nDescriptions;
	}

	public static int[] getForbidEditField() {
		if (forbidEditField == null) {
			forbidEditField = new int[] {
					// 原币
					SCMRelationsCal.TAXPRICE_ORIGINAL, SCMRelationsCal.PRICE_ORIGINAL,
					SCMRelationsCal.NET_TAXPRICE_ORIGINAL, SCMRelationsCal.NET_PRICE_ORIGINAL,
					// 本币
					SCMRelationsCal.TAXPRICE_LOCAL, SCMRelationsCal.PRICE_LOCAL, SCMRelationsCal.NET_TAXPRICE_LOCAL,
					SCMRelationsCal.NET_PRICE_LOCAL, };
		}
		
		return forbidEditField;
	}
	
	// v30 add
	public static final String[] arrNames = new String[] {
			"corder_bid",
			"cstoreadmin",// cstoreadmin///
			"cinvsort",
			"crowno",
			"ctinvclassid",// // 合同存货类ID///
			"cinvbasdocid",
			"cbatchid",
			"csaleid",
			"pk_corp",
			"creceipttype",
			"csourcebillid",
			"csourcebillbodyid",
			"cinventoryid",
			"cunitid",
			"cpackunitid",
			"nnumber",
			"npacknumber",
			"cbodywarehouseid",
			"dconsigndate",
			"ddeliverdate",
			"blargessflag",
			"veditreason",
			"ccurrencytypeid",
			"nitemdiscountrate",
			"ndiscountrate",
			"nexchangeotobrate",

			"ntaxrate",
			"noriginalcurprice",
			"noriginalcurtaxprice",
			"noriginalcurnetprice",
			"noriginalcurtaxnetprice",
			"noriginalcurtaxmny",
			"noriginalcurmny",
			"noriginalcursummny",
			"noriginalcurdiscountmny",
			"nprice",
			"ntaxprice",
			"nnetprice",
			"ntaxnetprice",
			"ntaxmny",
			"nmny",
			"nsummny",
			"ndiscountmny",
			"coperatorid",
			"frowstatus",
			"fbatchstatus",
			"frownote",
			"ntotalpaymny",// 累计收款金额///
			"ntotalreceivenumber",// 累计发货数量///
			"ntotalinvoicenumber",// 累计开票数量///
			"ntotalinventorynumber",// 累计出库数量///
			// ntotalinvoicemny 累计开票金额///
			"bifinvoicefinish",// 是否开票关闭///
			"bifreceivefinish",// 是否发货关闭///
			"bifinventoryfinish",// 是否出库关闭///
			"bifpayfinish",// 是否收款关闭///

			"cprojectid3",// cprojectid3///
			"cprojectphaseid",// cprojectphaseid///
			"cprojectid",// cprojectid///
			"vfree5",
			"vfree4",
			"vfree3",
			"vfree2",
			"vfree1",
			"vfree0",
			"vdef6",
			"vdef5",
			"vdef4",
			"vdef3",
			"vdef2",
			"vdef1",
			"discountflag",// 存货折扣属性///
			"assistunit",// 辅计量单位///
			"ct_manageid",
			"cbomorderid",
			"cfreezeid",
			"ts",// 时间戳///
			"laborflag",// 存货劳务属性///
			"norgviaprice",// 原币辅计量无税单价///
			"cadvisecalbodyid",
			"boosflag",
			"bsupplyflag",
			"creceiptareaid",
			"vreceiveaddress",
			"creceiptcorpid",
			"isappendant",// 附属品标志///
			"invoiceauditnumber",// 发票审批数量///
			"receiptauditnumber",// 出库审批数量///
			"outstoreauditnumber",// 发货审批数量///
			"ntotalreturnnumber",// 累计退货数量///
			"ntotalcarrynumber",// 累计发运数量///
			"ntotalsignnumber",// 累计签收数量///
			"nlinenumber",// // 标记存货可用量时所用的自然数序列行号///
			// "vfreeid1",
			// "vfreeid2",
			// "vfreeid3",
			// "vfreeid4",
			// "vfreeid5",
			// "vfreeid6",
			// "vfreeid7",
			// "vfreeid8",
			// "vfreeid9",
			// "vfreeid10",
			"vfreename1",
			"vfreename2",
			"vfreename3",
			"vfreename4",
			"vfreename5",
			"vfreename6",
			"vfreename7",
			"vfreename8",
			"vfreename9",
			"vfreename10",
			"cstoreadmin",// cstoreadmin///
			"cinvsort",
			"finished",// 整单结束///
			"cadvisecalbody",
			"cbodywarehousename",// 仓库//
			"cbomordercode",// 配置单编号//
			"ccurrencytypename",// 币种//
			"cinventorycode",// 存货编码//
			"cinventoryname",// 存货名称//
			"GGXX",// 规格型号//
			"cpackunitname",// 辅单位//
			"cprojectname",// 项目//
			"cprojectphasename",// 项目阶段//
			"creceiptareaname",// 收货地区//
			"creceiptcorpname",// 收货单位//
			"ct_code",// 合同号//
			"ctaxitemid",// 税率ID//
			"ctinvclass",// 合同存货类//
			"cunitname",// 单位//
			"fixedflag",// 是否固定换算率///
			"isconfigable",// isconfigable//
			"isspecialty",// isspecialty//
			"norgviapricetax",// 辅计量含税单价//
			"scalefactor",// 包装换算率///
			"sfqs",// 是否缺省//
			"wholemanaflag",// wholemanaflag//
			// v30 so_saleorder_b
			"cconsigncorpid", // 发货公司id
			"cconsigncorp", // 发货公司///
			"nreturntaxrate", // 出口退税率
			"creccalbodyid", // 收货库存组织id
			"creccalbody", // 收货库存组织///
			"crecwareid", // 收货仓库id
			"crecwarehouse", // 收货仓库///
			"bdericttrans", // 是否直运
			"tconsigntime", // 发货时间
			"tdelivertime", // 到货时间
			"bsafeprice", // 是否参与价保
			"ntaldcnum", // 已参与价保主数量
			"nasttaldcnum", // 已参与价保辅数量
			"ntaldcmny", // 价保金额
			"breturnprofit", // 是否参与返利
			"nretprofnum", // 已参与返利主数量
			"nastretprofnum", // 已参与返利辅数量
			"nretprofmny", // 返利金额
			"cpricepolicyid", // 价格政策ID
			"cpricepolicy", // 价格政策///
			"cpriceitemid", // 价格项目ID
			"cpriceitem", // 价格项目///
			"cpriceitemtable", // 价目表id
			"cpriceitemtablename", // 价目表///
			"cpricecalproc", // 价格计算过程id
			"cpricecalprocname", // 价格计算过程///
			"cquoteunitid", // 报价计量单位id
			"cquoteunit", // 报价计量单位///
			"nquoteunitnum", // 报价单位数量
			"norgqttaxprc", // 报价单位含税单价
			"norgqtprc", // 报价单位无税单价
			"norgqttaxnetprc", // 报价单位含税净价
			"norgqtnetprc", // 报价单位无税净价
			"nqttaxnetprc", // 报价单位本币含税净价
			"nqtnetprc", // 报价单位本币无税净价
			"nqttaxprc", // 报价单位本币含税单价
			"nqtprc", // 报价单位本币无税单价
			"cprolineid", // 生产线id
			"cprolinename", // 生产线///
			"natp", // ATP///
			"crecaddrnode", // 收货地点id
			"crecaddrnodename", // 收货地点///

			// v30 so_saleexecute

			"ntaltransnum", // 累计运输数量///
			"ntalbalancemny", // 累计结算金额///
			"ntranslossnum", // 运输货损数量///
			"biftransfinish", // 运输结束标志///
			"dlastconsigdate", // 最近一次发货日期///
			"dlasttransdate", // 最近一次运输日期///
			"dlastoutdate", // 最近一次出库日期///
			"dlastinvoicedt", // 最近一次开票日期///
			"dlastpaydate", // 最近一次回款日期///
			"nqtscalefactor", // 报价单位与主计量单位的换算率///
			"bqtfixedflag", // 报价单位是否固定换算率///

			// v30 so_saleorder_b
			"cinventoryid1", // 发货公司的存货管理档案
			"cchantypeid",// 渠道类型ID
			"cchantype",// 渠道类型///
			"pkarrivecorp", // 发运需要的内部收货公司///
			"stempbody",// stempbody///
			"bifinventoryfinish_init",// 信用专用：修订前是否出库结束///
			"noutmny_diff",// 信用专用：(累计出库数量*（修订后本币含税净价-修订前本币含税净价）)///
			"ntotalbalancenumber",// 累计结算数量///

			// 新增的自定义项
			"vdef7", "vdef8", "vdef9", "vdef10",

			"vdef11", "vdef12", "vdef13", "vdef14", "vdef15", "vdef16", "vdef17", "vdef18",
			"vdef19",
			"vdef20",

			// 新增的自定义项pk///
			"pk_defdoc1", "pk_defdoc2", "pk_defdoc3", "pk_defdoc4", "pk_defdoc5", "pk_defdoc6", "pk_defdoc7",
			"pk_defdoc8", "pk_defdoc9", "pk_defdoc10", "pk_defdoc11", "pk_defdoc12", "pk_defdoc13", "pk_defdoc14",
			"pk_defdoc15", "pk_defdoc16", "pk_defdoc17", "pk_defdoc18", "pk_defdoc19", "pk_defdoc20", "nqtorgprc",
			"nqtorgtaxprc", "cinvspec", // 规格//
			"cinvtype", // 型号//
			// isDel7D 是否强行删除日计划 //
			"narrangescornum", // 累计安排委外订单数量///
			"narrangepoapplynum",// 累计安排请购单数量///
			"narrangetoornum",// 累计安排调拨订单数量///
			"norrangetoapplynum",// 累计安排调拨申请数量///

			"barrangedflag",// 是否货源安排完毕///

			"carrangepersonid",// 最后货源安排人///

			"tlastarrangetime",// 最后货源安排时间///
			"colour",// colour//

			"nbalmny_diff",// nbalmny_diff///

			"narrangemonum",// 累计安排生产订单数量///

			// 订单结束管理用
			"cfreecustid",// 散户id///
			"ccustomerid",// 客户id///

			// 是否ATP检查
			"batpcheck",
			// 订单执行情况表ts
			"exets",// 执行表时间戳///

			"ntotalshouldoutnum",// 出库应发///
			"clargessrowno",// 赠品的主存货行
			"ct_name", // 合同名称//
			"ntotalcostmny", // 累计成本金额///
			"ntotlbalcostnum"// 累计成本结算数量--累计传存货核算数量///
			, "nrushnum"// 累计对冲出库数量///
			, "bbindflag"

			// v5.5_add
			, "nqtorgtaxnetprc" // 询价含税净价
			, "nqtorgnetprc" // 询价无税净价
			
			// PTA销售二开 添加销售订单子表字段
			// add by river for 2012-07-17
			// start ..
			,
			"saleinvoiceid", // 销售发票ID
			"numof" , // 件数
			"lastingprice" , // 挂牌价
			"settlementprice" , // 结算价
			"deliverydate" , // 提货截止日期
			"settlementdate" , //挂结差结算日期
			"lssubprice" // 挂结价差
			
			// .. end
	};

	public transient static String[] pricemnykeys = { "ntaxrate", "norgqttaxprc", "norgqtprc", "norgqttaxnetprc",
			"norgqtnetprc", "noriginalcurtaxprice", "noriginalcurprice", "noriginalcurtaxnetprice",
			"noriginalcurnetprice", "noriginalcurmny", "noriginalcurtaxmny", "noriginalcurdiscountmny",
			"noriginalcursummny", "ndiscountrate", "nitemdiscountrate", "nexchangeotobrate", "norgviaprice",
			"norgviapricetax", "nprice", "ntaxprice", "nnetprice", "ntaxnetprice", "nmny", "ntaxmny", "ndiscountmny",
			"nsummny", "nreturntaxrate", "ntaldcmny", "nretprofmny", "ntotalpaymny", "ntotalcostmny",

			"ntalbalancemny", "nqttaxnetprc", "nqtnetprc", "nqttaxprc", "nqtprc", "nqtorgprc", "nqtorgtaxprc",
			"nqtorgtaxnetprc", "nqtorgnetprc"
			
			// PTA销售二开  针对金额字段添加KEY
			// add by river for 2012-0717
			// start ..
			,
			"lastingprice" ,
			"settlementprice" ,
			"lssubprice"
			
			// .. end
	};

	public transient static HashSet hspricemnykey;

	// 是否强行删除日计划
	public boolean isDel7D = false;
	// ATP检查标志
	public boolean bCheckATP = true;
	public SaleorderBVO oldbvo = null;
	// 原累计发货数量
	public UFDouble ntotalreceivenumber_old;
	// 原累计开票数量
	public UFDouble ntotalinvoicenumber_old;
	// 原累计出库数量
	public UFDouble ntotalinventorynumber_old;
	// 解决订单结束管理并发问题
	public UFDateTime m_headts;
	// 手动出库关闭标记
	public UFBoolean bsaleoutclosed;

	/** v5.5 补货直运安排 Bom展开使用 */
	public String isbomimag;
	public String ibomlevel;
	public String isbominv;
	public String isbomtoord;
	public String cbomver;
	public UFDouble ncanconvnum;
	public UFDouble narrangepurordernum;
	public String isbomenable;

	/** v5.5 补货直运安排 Bom展开使用 */

	/**
	 * 缺省构造子
	 * 
	 * 
	 * 无返回值
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public SaleorderBVO() {
		super();
	}

	/**
	 * 使用主键进行初始化的构造子。
	 * 
	 * 创建日期：(2001-5-11)
	 * 
	 * @param ??fieldNameForMethod??
	 *            主键值
	 */
	public SaleorderBVO(String newCorder_bid) {
		super();
		// 为主键字段赋值:
		setCorder_bid(newCorder_bid);

	}

	/**
	 * 声明Meta类
	 * 
	 * 
	 * 无返回值
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public Class getVOMetaClass() {
		return nc.vo.so.so001.SaleorderBVOMeta.class;
	}
	
	public void setAttributeValue(String key, Object value) {
		if (key.startsWith("vdef") && value != null) {
			boolean bUserDefined = false;
			for (int i = 1; i < 21; i++) {
				if (key.equals("vdef" + i)) {
					super.setAttributeValue(key, value.toString());
					bUserDefined = true;
					break;
				}
			}
			if (!bUserDefined)
				super.setAttributeValue(key, value);
		}
		else {
			super.setAttributeValue(key, value);
		}
	}

	/**
	 * @return 返回 ntotalinventorynumber_old。
	 */
	public static HashSet getHspricemnykey() {
		if (hspricemnykey == null) {
			hspricemnykey = new HashSet();
			for (int i = 0, loop = pricemnykeys.length; i < loop; i++) {
				hspricemnykey.add(pricemnykeys[i]);
			}
		}
		return hspricemnykey;
	}

	/**
	 * @return 返回 ntotalinventorynumber_old。
	 */
	public static boolean isPriceOrMny(String key) {
		if (SoVoTools.isEmptyString(key))
			return false;
		return getHspricemnykey().contains(key);
	}

	/**
	 * 返回数值对象的显示名称。
	 * 
	 * 创建日期：(2001-5-11)
	 * 
	 * @return java.lang.String 返回数值对象的显示名称。
	 */
	public String getEntityName() {

		return "SaleorderB";
	}

	/**
	 * <p>
	 * 需要在一个循环中访问的属性的名称数组。
	 * <p>
	 * 创建日期：(??Date??)
	 * 
	 * @return java.lang.String[]
	 */
	public java.lang.String[] getAttributeNames() {
		// 此处覆盖SmartVO方法，若pdm与VO字段一一对应，则两方法等价
		return arrNames;
	}

	/**
	 * 获得属性<公司主键/pk_corp>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getPkcorp() {
		return (String) getAttributeValue("pk_corp");
	}

	/**
	 * 给属性<公司主键/pk_corp>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setPkcorp(String value) {
		setAttributeValue("pk_corp", value);
	}

	/**
	 * 获得属性<原币税额/noriginalcurtaxmny>的值。 主计量单位税额
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNoriginalcurtaxmny() {
		Object value = getAttributeValue("noriginalcurtaxmny");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<原币税额/noriginalcurtaxmny>赋值。 主计量单位税额
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNoriginalcurtaxmny(UFDouble value) {
		setAttributeValue("noriginalcurtaxmny", value);
	}

	/**
	 * 获得属性<本币含税单价/ntaxprice>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNtaxprice() {
		Object value = getAttributeValue("ntaxprice");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<本币含税单价/ntaxprice>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNtaxprice(UFDouble value) {
		setAttributeValue("ntaxprice", value);
	}

	/**
	 * 获得属性<收货仓库/crecwareid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCrecwareid() {
		return (String) getAttributeValue("crecwareid");
	}

	/**
	 * 给属性<收货仓库/crecwareid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCrecwareid(String value) {
		setAttributeValue("crecwareid", value);
	}

	/**
	 * 获得属性<缺货标志/boosflag>的值。 Y:缺货 N:非缺货行
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFBoolean
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFBoolean getBoosflag() {
		Object value = getAttributeValue("boosflag");
		if (value == null) {
			return UFBoolean.FALSE;
		} else {
			return m_SVODataUtils.getUFBoolean(value);
		}
	}

	/**
	 * 给属性<缺货标志/boosflag>赋值。 Y:缺货 N:非缺货行
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setBoosflag(UFBoolean value) {
		setAttributeValue("boosflag", value);
	}

	/**
	 * 获得属性<制单人/coperatorid>的值。 制单人：中文描述
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCoperatorid() {
		return (String) getAttributeValue("coperatorid");
	}

	/**
	 * 给属性<制单人/coperatorid>赋值。 制单人：中文描述
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCoperatorid(String value) {
		setAttributeValue("coperatorid", value);
	}

	/**
	 * 获得属性<已参与返利辅数量/nastretprofnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNastretprofnum() {
		Object value = getAttributeValue("nastretprofnum");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<已参与返利辅数量/nastretprofnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNastretprofnum(UFDouble value) {
		setAttributeValue("nastretprofnum", value);
	}

	/**
	 * 获得属性<原币含税单价/noriginalcurtaxprice>的值。 主计量单位含税单价
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNoriginalcurtaxprice() {
		Object value = getAttributeValue("noriginalcurtaxprice");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<原币含税单价/noriginalcurtaxprice>赋值。 主计量单位含税单价
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNoriginalcurtaxprice(UFDouble value) {
		setAttributeValue("noriginalcurtaxprice", value);
	}

	/**
	 * 获得属性<合同ID/ct_manageid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCt_manageid() {
		return (String) getAttributeValue("ct_manageid");
	}

	/**
	 * 给属性<合同ID/ct_manageid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCt_manageid(String value) {
		setAttributeValue("ct_manageid", value);
	}

	/**
	 * 获得属性<折本汇率/nexchangeotobrate>的值。 兑换本币汇率
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNexchangeotobrate() {
		Object value = getAttributeValue("nexchangeotobrate");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<折本汇率/nexchangeotobrate>赋值。 兑换本币汇率
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNexchangeotobrate(UFDouble value) {
		setAttributeValue("nexchangeotobrate", value);
	}

	/**
	 * 获得属性<本币含税净价/ntaxnetprice>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNtaxnetprice() {
		Object value = getAttributeValue("ntaxnetprice");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<本币含税净价/ntaxnetprice>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNtaxnetprice(UFDouble value) {
		setAttributeValue("ntaxnetprice", value);
	}

	/**
	 * 获得属性<收货单位/creceiptcorpid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCreceiptcorpid() {
		return (String) getAttributeValue("creceiptcorpid");
	}

	/**
	 * 给属性<收货单位/creceiptcorpid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCreceiptcorpid(String value) {
		setAttributeValue("creceiptcorpid", value);
	}

	/**
	 * 获得属性<已参与返利主数量/nretprofnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNretprofnum() {
		Object value = getAttributeValue("nretprofnum");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<已参与返利主数量/nretprofnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNretprofnum(UFDouble value) {
		setAttributeValue("nretprofnum", value);
	}

	/**
	 * 获得属性<原币含税净价/noriginalcurtaxnetprice>的值。 主计量单位含税净架
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNoriginalcurtaxnetprice() {
		Object value = getAttributeValue("noriginalcurtaxnetprice");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<原币含税净价/noriginalcurtaxnetprice>赋值。 主计量单位含税净架
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNoriginalcurtaxnetprice(UFDouble value) {
		setAttributeValue("noriginalcurtaxnetprice", value);
	}

	/**
	 * 获得属性<询价原币无税单价/nqtorgprc>的值。 from 3.1
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNqtorgprc() {
		Object value = getAttributeValue("nqtorgprc");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<询价原币无税单价/nqtorgprc>赋值。 from 3.1
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNqtorgprc(UFDouble value) {
		setAttributeValue("nqtorgprc", value);
	}

	/**
	 * 获得属性<本币无税单价/nprice>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNprice() {
		Object value = getAttributeValue("nprice");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<本币无税单价/nprice>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNprice(UFDouble value) {
		setAttributeValue("nprice", value);
	}

	/**
	 * 获得属性<存货ID1/cinventoryid1>的值。 存货关联字段：指存货管理档案
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * if (cinventoryid1 == null || cinventoryid1.trim().length() <= 0) { if
	 * (cconsigncorpid == null) { cinventoryid1 = m_cinventoryid; } else if
	 * (cconsigncorpid.equals(m_pk_corp)) { cinventoryid1 = m_cinventoryid; } }
	 * return cinventoryid1;
	 */
	public String getCinventoryid1() {
		if (getAttributeValue("cinventoryid1") == null
				|| getAttributeValue("cinventoryid1").toString().trim().length() <= 0) {
			if (getCconsigncorpid() == null) {
				return getCinventoryid();
			} else if (getCconsigncorpid().equals(getPkcorp())) {
				return getCinventoryid();
			}
		}
		return (String) getAttributeValue("cinventoryid1");
	}

	/**
	 * 给属性<存货ID1/cinventoryid1>赋值。 存货关联字段：指存货管理档案
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCinventoryid1(String value) {
		setAttributeValue("cinventoryid1", value);
	}

	/**
	 * 获得属性<是否赠品/blargessflag>的值。 Y:赠品 N:不为赠品(缺省)
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFBoolean
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFBoolean getBlargessflag() {
		Object value = getAttributeValue("blargessflag");
		if (value == null) {
			return UFBoolean.FALSE;
		} else {
			return m_SVODataUtils.getUFBoolean(value);
		}
	}

	/**
	 * 给属性<是否赠品/blargessflag>赋值。 Y:赠品 N:不为赠品(缺省)
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setBlargessflag(UFBoolean value) {
		setAttributeValue("blargessflag", value);
	}

	/**
	 * 获得属性<报价单位本币含税单价/nqttaxprc>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNqttaxprc() {
		Object value = getAttributeValue("nqttaxprc");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<报价单位本币含税单价/nqttaxprc>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNqttaxprc(UFDouble value) {
		setAttributeValue("nqttaxprc", value);
	}

	/**
	 * 获得属性<本币无税净价/nnetprice>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNnetprice() {
		Object value = getAttributeValue("nnetprice");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<本币无税净价/nnetprice>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNnetprice(UFDouble value) {
		setAttributeValue("nnetprice", value);
	}

	/**
	 * 获得属性<税率/ntaxrate>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNtaxrate() {
		Object value = getAttributeValue("ntaxrate");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<税率/ntaxrate>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNtaxrate(UFDouble value) {
		setAttributeValue("ntaxrate", value);
	}

	/**
	 * 获得属性<是否直运/bdericttrans>的值。 Y:是 N：否
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFBoolean
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFBoolean getBdericttrans() {
		Object value = getAttributeValue("bdericttrans");
		if (value==null)
			return UFBoolean.FALSE;
		return m_SVODataUtils.getUFBoolean(value);
	}

	/**
	 * 给属性<是否直运/bdericttrans>赋值。 Y:是 N：否
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setBdericttrans(UFBoolean value) {
		setAttributeValue("bdericttrans", value);
	}

	/**
	 * 获得属性<数量/nnumber>的值。 主计量单位数量，订单数量、发货数量、发票数量
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNnumber() {
		Object value = getAttributeValue("nnumber");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<数量/nnumber>赋值。 主计量单位数量，订单数量、发货数量、发票数量
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNnumber(UFDouble value) {
		setAttributeValue("nnumber", value);
	}

	/**
	 * 获得属性<本币折扣额/ndiscountmny>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNdiscountmny() {
		Object value = getAttributeValue("ndiscountmny");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<本币折扣额/ndiscountmny>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNdiscountmny(UFDouble value) {
		setAttributeValue("ndiscountmny", value);
	}

	/**
	 * 获得属性<行状态/frowstatus>的值。 0无状态（未使用） 1自由 2审批 3冻结 4关闭（未使用）5作废 6结束 7正在审批
	 * 8审批未通过
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return Integer
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public Integer getFrowstatus() {
		Object value = getAttributeValue("frowstatus");
		return m_SVODataUtils.getInteger(value);
	}

	/**
	 * 给属性<行状态/frowstatus>赋值。 0无状态（未使用） 1自由 2审批 3冻结 4关闭（未使用）5作废 6结束 7正在审批
	 * 8审批未通过
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setFrowstatus(Integer value) {
		setAttributeValue("frowstatus", value);
	}

	/**
	 * 获得属性<原币无税金额/noriginalcurmny>的值。 主计量单位无税金额
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNoriginalcurmny() {
		Object value = getAttributeValue("noriginalcurmny");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<原币无税金额/noriginalcurmny>赋值。 主计量单位无税金额
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNoriginalcurmny(UFDouble value) {
		setAttributeValue("noriginalcurmny", value);
	}

	/**
	 * 获得属性<存货ID/cinventoryid>的值。 存货关联字段：指存货管理档案
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCinventoryid() {
		return (String) getAttributeValue("cinventoryid");
	}

	/**
	 * 给属性<存货ID/cinventoryid>赋值。 存货关联字段：指存货管理档案
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCinventoryid(String value) {
		setAttributeValue("cinventoryid", value);
	}

	/**
	 * 获得属性<本币无税金额/nmny>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNmny() {
		Object value = getAttributeValue("nmny");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<本币无税金额/nmny>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNmny(UFDouble value) {
		setAttributeValue("nmny", value);
	}

	/**
	 * 获得属性<报价单位含税单价/norgqttaxprc>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNorgqttaxprc() {
		Object value = getAttributeValue("norgqttaxprc");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<报价单位含税单价/norgqttaxprc>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNorgqttaxprc(UFDouble value) {
		setAttributeValue("norgqttaxprc", value);
	}

	/**
	 * 获得属性<赠品的主存货行号/clargessrowno>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getClargessrowno() {
		return (String) getAttributeValue("clargessrowno");
	}

	/**
	 * 给属性<赠品的主存货行号/clargessrowno>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setClargessrowno(String value) {
		setAttributeValue("clargessrowno", value);
	}

	/**
	 * 获得属性<报价单位本币无税净价/nqtnetprc>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNqtnetprc() {
		Object value = getAttributeValue("nqtnetprc");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<报价单位本币无税净价/nqtnetprc>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNqtnetprc(UFDouble value) {
		setAttributeValue("nqtnetprc", value);
	}

	/**
	 * 获得属性<包装数量/npacknumber>的值。 包装计量单位数量
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNpacknumber() {
		Object value = getAttributeValue("npacknumber");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<包装数量/npacknumber>赋值。 包装计量单位数量
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNpacknumber(UFDouble value) {
		setAttributeValue("npacknumber", value);
	}

	/**
	 * 获得属性<报价单位无税单价/norgqtprc>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNorgqtprc() {
		Object value = getAttributeValue("norgqtprc");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<报价单位无税单价/norgqtprc>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNorgqtprc(UFDouble value) {
		setAttributeValue("norgqtprc", value);
	}

	/**
	 * 获得属性<来源单据附表ID/csourcebillbodyid>的值。 继承的来源单据附表ID
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCsourcebillbodyid() {
		return (String) getAttributeValue("csourcebillbodyid");
	}

	/**
	 * 给属性<来源单据附表ID/csourcebillbodyid>赋值。 继承的来源单据附表ID
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCsourcebillbodyid(String value) {
		setAttributeValue("csourcebillbodyid", value);
	}

	public UFBoolean getBpreorderclose() {
		Object value = getAttributeValue("bpreorderclose");
		if (value == null)
			return UFBoolean.FALSE;
		else
			return m_SVODataUtils.getUFBoolean(value);
	}

	public void setBpreorderclose(UFBoolean value) {
		setAttributeValue("bpreorderclose", value);
	}

	/**
	 * 获得属性<产品线/cprolineid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCprolineid() {
		return (String) getAttributeValue("cprolineid");
	}

	/**
	 * 给属性<产品线/cprolineid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCprolineid(String value) {
		setAttributeValue("cprolineid", value);
	}

	/**
	 * 获得属性<报价单位本币含税净价/nqttaxnetprc>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNqttaxnetprc() {
		Object value = getAttributeValue("nqttaxnetprc");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<报价单位本币含税净价/nqttaxnetprc>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNqttaxnetprc(UFDouble value) {
		setAttributeValue("nqttaxnetprc", value);
	}

	/**
	 * 获得属性<收货库存组织/creccalbodyid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCreccalbodyid() {
		return (String) getAttributeValue("creccalbodyid");
	}

	/**
	 * 给属性<收货库存组织/creccalbodyid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCreccalbodyid(String value) {
		setAttributeValue("creccalbodyid", value);
	}

	/**
	 * 获得属性<单品折扣率/nitemdiscountrate>的值。 单品扣率
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNitemdiscountrate() {
		Object value = getAttributeValue("nitemdiscountrate");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<单品折扣率/nitemdiscountrate>赋值。 单品扣率
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNitemdiscountrate(UFDouble value) {
		setAttributeValue("nitemdiscountrate", value);
	}

	/**
	 * 获得属性<批次/cbatchid>的值。 存货批次ID
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCbatchid() {
		return (String) getAttributeValue("cbatchid");
	}

	/**
	 * 给属性<批次/cbatchid>赋值。 存货批次ID
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCbatchid(String value) {
		setAttributeValue("cbatchid", value);
	}

	/**
	 * 获得属性<库存冻结ID/cfreezeid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCfreezeid() {
		return (String) getAttributeValue("cfreezeid");
	}

	/**
	 * 给属性<库存冻结ID/cfreezeid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCfreezeid(String value) {
		setAttributeValue("cfreezeid", value);
	}

	/**
	 * 获得属性<价格计算过程/cpricecalproc>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCpricecalproc() {
		return (String) getAttributeValue("cpricecalproc");
	}

	/**
	 * 给属性<价格计算过程/cpricecalproc>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCpricecalproc(String value) {
		setAttributeValue("cpricecalproc", value);
	}

	/**
	 * 获得属性<销售主表ID/csaleid>的值。 销售单据主表主关键字
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCsaleid() {
		return (String) getAttributeValue("csaleid");
	}

	/**
	 * 给属性<销售主表ID/csaleid>赋值。 销售单据主表主关键字
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCsaleid(String value) {
		setAttributeValue("csaleid", value);
	}

	/**
	 * 获得属性<补货标志/bsupplyflag>的值。 Y:补货 N:非补货
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFBoolean
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFBoolean getBsupplyflag() {
		Object value = getAttributeValue("bsupplyflag");
		if (value == null) {
			return UFBoolean.FALSE;
		} else {
			return m_SVODataUtils.getUFBoolean(value);
		}
	}

	/**
	 * 给属性<补货标志/bsupplyflag>赋值。 Y:补货 N:非补货
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setBsupplyflag(UFBoolean value) {
		setAttributeValue("bsupplyflag", value);
	}

	/**
	 * 获得属性<发货公司/cconsigncorpid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCconsigncorpid() {
		return (String) getAttributeValue("cconsigncorpid");
	}

	/**
	 * 给属性<发货公司/cconsigncorpid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCconsigncorpid(String value) {
		setAttributeValue("cconsigncorpid", value);
	}

	/**
	 * 获得属性<原币价税合计/noriginalcursummny>的值。 主计量单位价税合计金额
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNoriginalcursummny() {
		Object value = getAttributeValue("noriginalcursummny");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<原币价税合计/noriginalcursummny>赋值。 主计量单位价税合计金额
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNoriginalcursummny(UFDouble value) {
		setAttributeValue("noriginalcursummny", value);
	}

	/**
	 * 获得属性<原币无税净价/noriginalcurnetprice>的值。 主计量单位无税净价
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNoriginalcurnetprice() {
		Object value = getAttributeValue("noriginalcurnetprice");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<原币无税净价/noriginalcurnetprice>赋值。 主计量单位无税净价
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNoriginalcurnetprice(UFDouble value) {
		setAttributeValue("noriginalcurnetprice", value);
	}

	/**
	 * 获得属性<配置单ID/cbomorderid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCbomorderid() {
		return (String) getAttributeValue("cbomorderid");
	}

	/**
	 * 给属性<配置单ID/cbomorderid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCbomorderid(String value) {
		setAttributeValue("cbomorderid", value);
	}

	/**
	 * 获得属性<渠道类型ID/cchantypeid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCchantypeid() {
		return (String) getAttributeValue("cchantypeid");
	}

	/**
	 * 给属性<渠道类型ID/cchantypeid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCchantypeid(String value) {
		setAttributeValue("cchantypeid", value);
	}

	/**
	 * 获得属性<收货地址/vreceiveaddress>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVreceiveaddress() {
		return (String) getAttributeValue("vreceiveaddress");
	}

	/**
	 * 给属性<收货地址/vreceiveaddress>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVreceiveaddress(String value) {
		setAttributeValue("vreceiveaddress", value);
	}

	/**
	 * 获得属性<报价计量单位/cquoteunitid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCquoteunitid() {
		return (String) getAttributeValue("cquoteunitid");
	}

	/**
	 * 给属性<报价计量单位/cquoteunitid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCquoteunitid(String value) {
		setAttributeValue("cquoteunitid", value);
	}

	/**
	 * 获得属性<存货档案主键/cinvbasdocid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCinvbasdocid() {
		return (String) getAttributeValue("cinvbasdocid");
	}

	/**
	 * 给属性<存货档案主键/cinvbasdocid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCinvbasdocid(String value) {
		setAttributeValue("cinvbasdocid", value);
	}

	/**
	 * 获得属性<报价计量单位换算率/nquoteunitrate>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNquoteunitrate() {
		Object value = getAttributeValue("nquoteunitrate");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<报价计量单位换算率/nquoteunitrate>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNquoteunitrate(UFDouble value) {
		setAttributeValue("nquoteunitrate", value);
	}

	/**
	 * 获得属性<销售订单附表ID/corder_bid>的值。 销售订单附表ID
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCorder_bid() {
		return (String) getAttributeValue("corder_bid");
	}

	/**
	 * 给属性<销售订单附表ID/corder_bid>赋值。 销售订单附表ID
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCorder_bid(String value) {
		setAttributeValue("corder_bid", value);
	}

	/**
	 * 获得属性<收货地区/creceiptareaid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCreceiptareaid() {
		return (String) getAttributeValue("creceiptareaid");
	}

	/**
	 * 给属性<收货地区/creceiptareaid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCreceiptareaid(String value) {
		setAttributeValue("creceiptareaid", value);
	}

	/**
	 * 获得属性<行号/crowno>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCrowno() {
		return (String) getAttributeValue("crowno");
	}

	/**
	 * 给属性<行号/crowno>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCrowno(String value) {
		setAttributeValue("crowno", value);
	}

	/**
	 * 获得属性<收货地点/crecaddrnode>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCrecaddrnode() {
		return (String) getAttributeValue("crecaddrnode");
	}

	/**
	 * 给属性<收货地点/crecaddrnode>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCrecaddrnode(String value) {
		setAttributeValue("crecaddrnode", value);
	}

	/**
	 * 获得属性<本币税额/ntaxmny>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNtaxmny() {
		Object value = getAttributeValue("ntaxmny");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<本币税额/ntaxmny>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNtaxmny(UFDouble value) {
		setAttributeValue("ntaxmny", value);
	}

	/**
	 * 获得属性<价保金额/ntaldcmny>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNtaldcmny() {
		Object value = getAttributeValue("ntaldcmny");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<价保金额/ntaldcmny>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNtaldcmny(UFDouble value) {
		setAttributeValue("ntaldcmny", value);
	}

	/**
	 * 获得属性<交货日期/ddeliverdate>的值。 存货到达日期
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDate
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDate getDdeliverdate() {
		Object value = getAttributeValue("ddeliverdate");
		return m_SVODataUtils.getUFDate(value);
	}

	/**
	 * 给属性<交货日期/ddeliverdate>赋值。 存货到达日期
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setDdeliverdate(UFDate value) {
		setAttributeValue("ddeliverdate", value);
	}

	/**
	 * 获得属性<发货时间/tconsigntime>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFTime
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getTconsigntime() {
		return (String) getAttributeValue("tconsigntime");
	}

	/**
	 * 给属性<发货时间/tconsigntime>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setTconsigntime(String value) {
		setAttributeValue("tconsigntime", value);
	}

	/**
	 * 获得属性<来源单据主表ID/csourcebillid>的值。 继承的来源单据主表ID
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCsourcebillid() {
		return (String) getAttributeValue("csourcebillid");
	}

	/**
	 * 给属性<来源单据主表ID/csourcebillid>赋值。 继承的来源单据主表ID
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCsourcebillid(String value) {
		setAttributeValue("csourcebillid", value);
	}

	/**
	 * 获得属性<原币/ccurrencytypeid>的值。 原始单据业务发生币种
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCcurrencytypeid() {
		return (String) getAttributeValue("ccurrencytypeid");
	}

	/**
	 * 给属性<原币/ccurrencytypeid>赋值。 原始单据业务发生币种
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCcurrencytypeid(String value) {
		setAttributeValue("ccurrencytypeid", value);
	}

	/**
	 * 获得属性<价目表/cpriceitemtable>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCpriceitemtable() {
		return (String) getAttributeValue("cpriceitemtable");
	}

	/**
	 * 给属性<价目表/cpriceitemtable>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCpriceitemtable(String value) {
		setAttributeValue("cpriceitemtable", value);
	}

	/**
	 * 获得属性<是否参与返利/breturnprofit>的值。 Y:是 N：否
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFBoolean
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFBoolean getBreturnprofit() {
		Object value = getAttributeValue("breturnprofit");
		return m_SVODataUtils.getUFBoolean(value);
	}

	/**
	 * 给属性<是否参与返利/breturnprofit>赋值。 Y:是 N：否
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setBreturnprofit(UFBoolean value) {
		setAttributeValue("breturnprofit", value);
	}

	/**
	 * 获得属性<修订理由/veditreason>的值。 修订理由备注信息
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getVeditreason() {
		return (String) getAttributeValue("veditreason");
	}

	/**
	 * 给属性<修订理由/veditreason>赋值。 修订理由备注信息
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setVeditreason(String value) {
		setAttributeValue("veditreason", value);
	}

	/**
	 * 获得属性<发货日期/dconsigndate>的值。 存货发出日期
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDate
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDate getDconsigndate() {
		Object value = getAttributeValue("dconsigndate");
		return m_SVODataUtils.getUFDate(value);
	}

	/**
	 * 给属性<发货日期/dconsigndate>赋值。 存货发出日期
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setDconsigndate(UFDate value) {
		setAttributeValue("dconsigndate", value);
	}

	/**
	 * 获得属性<报价单位数量/nquoteunitnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNquoteunitnum() {
		Object value = getAttributeValue("nquoteunitnum");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<报价单位数量/nquoteunitnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNquoteunitnum(UFDouble value) {
		setAttributeValue("nquoteunitnum", value);
	}

	/**
	 * 获得属性<报价单位本币无税单价/nqtprc>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNqtprc() {
		Object value = getAttributeValue("nqtprc");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<报价单位本币无税单价/nqtprc>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNqtprc(UFDouble value) {
		setAttributeValue("nqtprc", value);
	}

	/**
	 * 获得属性<原币无税单价/noriginalcurprice>的值。 主计量单位无税单价
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNoriginalcurprice() {
		Object value = getAttributeValue("noriginalcurprice");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<原币无税单价/noriginalcurprice>赋值。 主计量单位无税单价
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNoriginalcurprice(UFDouble value) {
		setAttributeValue("noriginalcurprice", value);
	}

	/**
	 * 获得属性<已参与价保主数量/ntaldcnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNtaldcnum() {
		Object value = getAttributeValue("ntaldcnum");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<已参与价保主数量/ntaldcnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNtaldcnum(UFDouble value) {
		setAttributeValue("ntaldcnum", value);
	}

	/**
	 * 获得属性<批次状态/fbatchstatus>的值。 作废字段，没有使用过
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return Integer
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public Integer getFbatchstatus() {
		Object value = getAttributeValue("fbatchstatus");
		return m_SVODataUtils.getInteger(value);
	}

	/**
	 * 给属性<批次状态/fbatchstatus>赋值。 作废字段，没有使用过
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setFbatchstatus(Integer value) {
		setAttributeValue("fbatchstatus", value);
	}

	/**
	 * 获得属性<工厂ID/cfactoryid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCfactoryid() {
		return (String) getAttributeValue("cfactoryid");
	}

	/**
	 * 给属性<工厂ID/cfactoryid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCfactoryid(String value) {
		setAttributeValue("cfactoryid", value);
	}

	/**
	 * 获得属性<报价单位无税净价/norgqtnetprc>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNorgqtnetprc() {
		Object value = getAttributeValue("norgqtnetprc");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<报价单位无税净价/norgqtnetprc>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNorgqtnetprc(UFDouble value) {
		setAttributeValue("norgqtnetprc", value);
	}

	/**
	 * 获得属性<询价原币含税单价/nqtorgtaxprc>的值。 from 3.1
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNqtorgtaxprc() {
		Object value = getAttributeValue("nqtorgtaxprc");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<询价原币含税单价/nqtorgtaxprc>赋值。 from 3.1
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNqtorgtaxprc(UFDouble value) {
		setAttributeValue("nqtorgtaxprc", value);
	}

	/**
	 * 获得属性<报价单位含税净价/norgqttaxnetprc>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNorgqttaxnetprc() {
		Object value = getAttributeValue("norgqttaxnetprc");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<报价单位含税净价/norgqttaxnetprc>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNorgqttaxnetprc(UFDouble value) {
		setAttributeValue("norgqttaxnetprc", value);
	}

	/**
	 * 获得属性<主计量单位/cunitid>的值。 主计量单位关联字段
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCunitid() {
		return (String) getAttributeValue("cunitid");
	}

	/**
	 * 给属性<主计量单位/cunitid>赋值。 主计量单位关联字段
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCunitid(String value) {
		setAttributeValue("cunitid", value);
	}

	/**
	 * 获得属性<整单折扣/ndiscountrate>的值。 整张单据折扣率
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNdiscountrate() {
		Object value = getAttributeValue("ndiscountrate");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<整单折扣/ndiscountrate>赋值。 整张单据折扣率
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNdiscountrate(UFDouble value) {
		setAttributeValue("ndiscountrate", value);
	}

	/**
	 * 获得属性<到货时间/tdelivertime>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFTime
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getTdelivertime() {
		return (String) getAttributeValue("tdelivertime");
	}

	/**
	 * 给属性<到货时间/tdelivertime>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setTdelivertime(String value) {
		setAttributeValue("tdelivertime", value);
	}

	/**
	 * 获得属性<是否参与价保/bsafeprice>的值。 Y:是 N：否
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFBoolean
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFBoolean getBsafeprice() {
		Object value = getAttributeValue("bsafeprice");
		return m_SVODataUtils.getUFBoolean(value);
	}

	/**
	 * 给属性<是否参与价保/bsafeprice>赋值。 Y:是 N：否
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setBsafeprice(UFBoolean value) {
		setAttributeValue("bsafeprice", value);
	}

	/**
	 * 获得属性<包装单位/cpackunitid>的值。 包装单位关联字段
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCpackunitid() {
		return (String) getAttributeValue("cpackunitid");
	}

	/**
	 * 给属性<包装单位/cpackunitid>赋值。 包装单位关联字段
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCpackunitid(String value) {
		setAttributeValue("cpackunitid", value);
	}

	/**
	 * 获得属性<供应商/cproviderid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCproviderid() {
		return (String) getAttributeValue("cproviderid");
	}

	/**
	 * 给属性<供应商/cproviderid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCproviderid(String value) {
		setAttributeValue("cproviderid", value);
	}

	/**
	 * 获得属性<原币折扣额/noriginalcurdiscountmny>的值。 主计量单位折扣额
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNoriginalcurdiscountmny() {
		Object value = getAttributeValue("noriginalcurdiscountmny");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<原币折扣额/noriginalcurdiscountmny>赋值。 主计量单位折扣额
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNoriginalcurdiscountmny(UFDouble value) {
		setAttributeValue("noriginalcurdiscountmny", value);
	}

	/**
	 * 获得属性<建议发货库存组织/cadvisecalbodyid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCadvisecalbodyid() {
		return (String) getAttributeValue("cadvisecalbodyid");
	}

	/**
	 * 给属性<建议发货库存组织/cadvisecalbodyid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCadvisecalbodyid(String value) {
		setAttributeValue("cadvisecalbodyid", value);
	}

	/**
	 * 获得属性<价格项目ID/cpriceitemid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCpriceitemid() {
		return (String) getAttributeValue("cpriceitemid");
	}

	/**
	 * 给属性<价格项目ID/cpriceitemid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCpriceitemid(String value) {
		setAttributeValue("cpriceitemid", value);
	}

	/**
	 * 获得属性<来源单据类型/creceipttype>的值。 继承的来源单据类型
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCreceipttype() {
		return (String) getAttributeValue("creceipttype");
	}

	/**
	 * 给属性<来源单据类型/creceipttype>赋值。 继承的来源单据类型
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCreceipttype(String value) {
		setAttributeValue("creceipttype", value);
	}

	/**
	 * 获得属性<本币价税合计/nsummny>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNsummny() {
		Object value = getAttributeValue("nsummny");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<本币价税合计/nsummny>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNsummny(UFDouble value) {
		setAttributeValue("nsummny", value);
	}

	/**
	 * 获得属性<已参与价保辅数量/nasttaldcnum>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNasttaldcnum() {
		Object value = getAttributeValue("nasttaldcnum");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<已参与价保辅数量/nasttaldcnum>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNasttaldcnum(UFDouble value) {
		setAttributeValue("nasttaldcnum", value);
	}

	/**
	 * 获得属性<附表仓库/cbodywarehouseid>的值。 附表仓库关联字段
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCbodywarehouseid() {
		return (String) getAttributeValue("cbodywarehouseid");
	}

	/**
	 * 给属性<附表仓库/cbodywarehouseid>赋值。 附表仓库关联字段
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCbodywarehouseid(String value) {
		setAttributeValue("cbodywarehouseid", value);
	}

	/**
	 * 获得属性<价格政策ID/cpricepolicyid>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getCpricepolicyid() {
		return (String) getAttributeValue("cpricepolicyid");
	}

	/**
	 * 给属性<价格政策ID/cpricepolicyid>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setCpricepolicyid(String value) {
		setAttributeValue("cpricepolicyid", value);
	}

	/**
	 * 获得属性<行备注/frownote>的值。 订单行备注信息
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return String
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public String getFrownote() {
		return (String) getAttributeValue("frownote");
	}

	/**
	 * 给属性<行备注/frownote>赋值。 订单行备注信息
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setFrownote(String value) {
		setAttributeValue("frownote", value);
	}

	/**
	 * 获得属性<出口退税率/nreturntaxrate>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNreturntaxrate() {
		Object value = getAttributeValue("nreturntaxrate");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<出口退税率/nreturntaxrate>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNreturntaxrate(UFDouble value) {
		setAttributeValue("nreturntaxrate", value);
	}

	/**
	 * 获得属性<返利金额/nretprofmny>的值。
	 * 
	 * 
	 * 参数说明: 属性itemkey
	 * 
	 * return UFDouble
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public UFDouble getNretprofmny() {
		Object value = getAttributeValue("nretprofmny");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<返利金额/nretprofmny>赋值。
	 * 
	 * 
	 * 
	 * return void
	 * 
	 * Generated By CodeSeed 3.1 修改记录： 修改人, 日期, 说明
	 * 
	 * 
	 */
	public void setNretprofmny(UFDouble value) {
		setAttributeValue("nretprofmny", value);
	}

	/**
	 * 获得属性<运输结束标志/biftransfinish>的值。 创建日期：(2004-4-24 13:04:32)
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getBiftransfinish() {
		Object value = getAttributeValue("biftransfinish");
		return m_SVODataUtils.getUFBoolean(value);
	}

	/**
	 * 给属性<运输结束标志/biftransfinish>赋值。 创建日期：(2004-4-24 13:04:32)
	 * 
	 * @param newBiftransfinish
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setBiftransfinish(nc.vo.pub.lang.UFBoolean value) {
		setAttributeValue("biftransfinish", value);
	}

	/**
	 * 获得属性<报价计量单位是否固定换算率/bqtfixedflag>的值。 创建日期：(2004-3-26 13:08:40)
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getBqtfixedflag() {
		Object value = getAttributeValue("bqtfixedflag");
		return m_SVODataUtils.getUFBoolean(value);
	}

	/**
	 * 给属性<报价计量单位是否固定换算率/bqtfixedflag>赋值。 创建日期：(2004-3-26 13:08:40)
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setBqtfixedflag(nc.vo.pub.lang.UFBoolean value) {
		setAttributeValue("bqtfixedflag", value);
	}

	/**
	 * 获得属性<发货公司/cconsigncorp>的值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCconsigncorp() {
		return (String) getAttributeValue("cconsigncorp");
	}

	/**
	 * 给属性<发货公司/cconsigncorp>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param value
	 *            java.lang.String
	 */
	public void setCconsigncorp(java.lang.String value) {
		setAttributeValue("cconsigncorp", value);
	}

	/**
	 * 获得属性<价格计算过程/cpricecalprocname>的值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCpricecalprocname() {
		return (String) getAttributeValue("cpricecalprocname");
	}

	/**
	 * 给属性<价格计算过程/cpricecalprocname>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param newCpricecalprocname
	 *            java.lang.String
	 */
	public void setCpricecalprocname(java.lang.String value) {
		setAttributeValue("cpricecalprocname", value);
	}

	/**
	 * 获得属性<价格项目/cpriceitem>的值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCpriceitem() {
		return (String) getAttributeValue("cpriceitem");
	}

	/**
	 * 给属性<价格项目/cpriceitem>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param value
	 *            java.lang.String
	 */
	public void setCpriceitem(java.lang.String value) {
		setAttributeValue("cpriceitem", value);
	}

	/**
	 * 获得属性<价目表/cpriceitemtablename>的值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCpriceitemtablename() {
		return (String) getAttributeValue("cpriceitemtablename");
	}

	/**
	 * 给属性<价目表/cpriceitemtablename>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param value
	 *            java.lang.String
	 */
	public void setCpriceitemtablename(java.lang.String value) {
		setAttributeValue("cpriceitemtablename", value);
	}

	/**
	 * 获得属性<价格政策/cpricepolicy>的值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCpricepolicy() {
		return (String) getAttributeValue("cpricepolicy");
	}

	/**
	 * 给属性<价格政策/cpricepolicy>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param value
	 *            java.lang.String
	 */
	public void setCpricepolicy(java.lang.String value) {
		setAttributeValue("cpricepolicy", value);
	}

	/**
	 * 获得属性<生产线/cprolinename>的值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCprolinename() {
		return (String) getAttributeValue("cprolinename");
	}

	/**
	 * 给属性<生产线/cprolinename>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param value
	 *            java.lang.String
	 */
	public void setCprolinename(java.lang.String value) {
		setAttributeValue("cprolinename", value);
	}

	/**
	 * 获得属性<报价计量单位/cquoteunit>的值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCquoteunit() {
		return (String) getAttributeValue("cquoteunit");
	}

	/**
	 * 给属性<报价计量单位/cquoteunit>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param newCquoteunit
	 *            java.lang.String
	 */
	public void setCquoteunit(java.lang.String value) {
		setAttributeValue("cquoteunit", value);
	}

	/**
	 * 获得属性<收货地点/crecaddrnodename>的值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCrecaddrnodename() {
		return (String) getAttributeValue("crecaddrnodename");
	}

	/**
	 * 给属性<收货地点/crecaddrnodename>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param value
	 *            java.lang.String
	 */
	public void setCrecaddrnodename(java.lang.String value) {
		setAttributeValue("crecaddrnodename", value);
	}

	/**
	 * 获得属性<收货库存组织/creccalbody>的值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCreccalbody() {
		return (String) getAttributeValue("creccalbody");
	}

	/**
	 * 给属性<收货库存组织/creccalbody>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param value
	 *            java.lang.String
	 */
	public void setCreccalbody(java.lang.String value) {
		setAttributeValue("creccalbody", value);
	}

	/**
	 * 获得属性<收货仓库/crecwarehouse>的值。 创 建日期：(2004-3-19 10:29:57)
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCrecwarehouse() {
		return (String) getAttributeValue("crecwarehouse");
	}

	/**
	 * 给属性<收货仓库/crecwarehouse>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param value
	 *            java.lang.String
	 */
	public void setCrecwarehouse(java.lang.String value) {
		setAttributeValue("crecwarehouse", value);
	}

	/**
	 * 获得属性<最近一次发货日期/dlastconsigdate>。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return nc.vo.pub.lang.UFDate
	 */
	public nc.vo.pub.lang.UFDate getDlastconsigdate() {
		Object value = getAttributeValue("dlastconsigdate");
		return m_SVODataUtils.getUFDate(value);
	}

	/**
	 * 给属性<最近一次发货日期/dlastconsigdate>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFDate
	 */
	public void setDlastconsigdate(nc.vo.pub.lang.UFDate value) {
		setAttributeValue("dlastconsigdate", value);
	}

	/**
	 * 获得属性<最近一次开票日期/dlastinvoicedt>的值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return nc.vo.pub.lang.UFDate
	 */
	public nc.vo.pub.lang.UFDate getDlastinvoicedt() {
		Object value = getAttributeValue("dlastinvoicedt");
		return m_SVODataUtils.getUFDate(value);
	}

	/**
	 * 给属性<最近一次开票日期/dlastinvoicedt>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFDate
	 */
	public void setDlastinvoicedt(nc.vo.pub.lang.UFDate value) {
		setAttributeValue("dlastinvoicedt", value);
	}

	/**
	 * 获得属性<最近一次出库日期/dlastoutdate>的值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return nc.vo.pub.lang.UFDate
	 */
	public nc.vo.pub.lang.UFDate getDlastoutdate() {
		Object value = getAttributeValue("dlastoutdate");
		return m_SVODataUtils.getUFDate(value);
	}

	/**
	 * 给属性<最近一次出库日期/dlastoutdate>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFDate
	 */
	public void setDlastoutdate(nc.vo.pub.lang.UFDate value) {
		setAttributeValue("dlastoutdate", value);
	}

	/**
	 * 获得属性<最近一次回款日期/dlastpaydate>的值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return nc.vo.pub.lang.UFDate
	 */
	public nc.vo.pub.lang.UFDate getDlastpaydate() {
		Object value = getAttributeValue("dlastpaydate");
		return m_SVODataUtils.getUFDate(value);
	}

	/**
	 * 给属性<最近一次回款日期/dlastpaydate>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFDate
	 */
	public void setDlastpaydate(nc.vo.pub.lang.UFDate value) {
		setAttributeValue("dlastpaydate", value);
	}

	/**
	 * 获得属性<最近一次运输日期/dlasttransdate>的值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return nc.vo.pub.lang.UFDate
	 */
	public nc.vo.pub.lang.UFDate getDlasttransdate() {
		Object value = getAttributeValue("dlasttransdate");
		return m_SVODataUtils.getUFDate(value);
	}

	/**
	 * 给属性<最近一次运输日期/dlasttransdate>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFDate
	 */
	public void setDlasttransdate(nc.vo.pub.lang.UFDate value) {
		setAttributeValue("dlasttransdate", value);
	}

	/**
	 * 获得属性<是否固定换算率/fixedflag>的值
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getFixedflag() {
		Object value = getAttributeValue("fixedflag");
		return m_SVODataUtils.getUFBoolean(value);
	}

	/**
	 * 给属性<是否固定换算率/fixedflag>赋值
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setFixedflag(nc.vo.pub.lang.UFBoolean value) {
		setAttributeValue("fixedflag", value);
	}

	/**
	 * 获得属性<辅计量单位/assistunit>的值。
	 * 
	 * 创建日期：(2001-5-11)
	 * 
	 * @return UFBoolean
	 */
	public UFBoolean getAssistunit() {
		Object value = getAttributeValue("assistunit");
		if (value == null) {
			return UFBoolean.FALSE;
		} else {
			return m_SVODataUtils.getUFBoolean(value);
		}
	}

	/**
	 * 给属性<辅计量单位/assistunit>赋值。
	 * 
	 * 创建日期：(2001-5-11)
	 * 
	 * @param value
	 *            UFBoolean
	 */
	public void setAssistunit(UFBoolean value) {

		setAttributeValue("assistunit", value);
	}

	/**
	 * 获得属性<整单结束/finish>的值。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getFinished() {
		Object value = getAttributeValue("finished");
		return m_SVODataUtils.getUFBoolean(value);
	}

	/**
	 * 给属性<整单结束/finish>赋值。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setFinished(nc.vo.pub.lang.UFBoolean value) {
		setAttributeValue("finished", value);
	}

	/**
	 * 获得属性<修订前是否出库结束/bifinventoryfinish_init>的值
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getBifinventoryfinish_init() {
		Object value = getAttributeValue("bifinventoryfinish_init");
		return m_SVODataUtils.getUFBoolean(value);
	}

	/**
	 * 给属性<修订前是否出库结束/bifinventoryfinish_init>赋值
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setBifinventoryfinish_init(nc.vo.pub.lang.UFBoolean value) {
		setAttributeValue("bifinventoryfinish_init", value);
	}

	/**
	 * 获得属性<修订前是否开票结束/bifinvoicefinish_init>的值
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getBifinvoicefinish_init() {
		Object value = getAttributeValue("bifinvoicefinish_init");
		return m_SVODataUtils.getUFBoolean(value);
	}

	/**
	 * 给属性<修订前是否开票结束/bifinvoicefinish_init>赋值
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setBifinvoicefinish_init(nc.vo.pub.lang.UFBoolean value) {
		setAttributeValue("bifinvoicefinish_init", value);
	}

	/**
	 * 获得属性<修订前是否结算关闭/bsquareendflag_init>的值
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getBsquareendflag_init() {
		Object value = getAttributeValue("bsquareendflag_init");
		return m_SVODataUtils.getUFBoolean(value);
	}

	/**
	 * 给属性<修订前是否结算关闭/bsquareendflag_init>赋值
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setBsquareendflag_init(nc.vo.pub.lang.UFBoolean value) {
		setAttributeValue("bsquareendflag_init", value);
	}

	/**
	 * 获得属性<渠道类型/cchantype>的值。 创建日期：(2004-7-2 14:25:08)
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCchantype() {
		return (String) getAttributeValue("cchantype");
	}

	/**
	 * 给属性<渠道类型/cchantype>赋值。 创建日期：(2004-7-2 14:25:08)
	 * 
	 * @param value
	 *            java.lang.String
	 */
	public void setCchantype(java.lang.String value) {
		setAttributeValue("cchantype", value);
	}

	/**
	 * 获得属性<将要对订单订单行采取的动作/iAction>的值
	 * 
	 * @return int
	 */
	public int getIAction() {

		Object value = getAttributeValue("iAction");
		if (value == null) {
			return nc.vo.so.so001.ISaleOrderAction.A_DEFAULT;
		} else {

			return m_SVODataUtils.getInteger(value).intValue();
		}
	}

	/**
	 * 给属性<将要对订单订单行采取的动作/iAction>赋值
	 * 
	 * @param value
	 *            int
	 */
	public void setIAction(int value) {
		setAttributeValue("iAction", value);
	}

	/**
	 * 获得属性<信用专用：(累计出库数量*（修订后本币含税净价-修订前本币含税净价）)/noutmny_diff>的值。
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getNoutmny_diff() {
		Object value = getAttributeValue("noutmny_diff");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<信用专用：(累计出库数量*（修订后本币含税净价-修订前本币含税净价）)/noutmny_diff>赋值。
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setNoutmny_diff(nc.vo.pub.lang.UFDouble value) {
		setAttributeValue("noutmny_diff", value);
	}

	/**
	 * 获得属性<发运需要的内部收货公司/pkarrivecorp>的值
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPkarrivecorp() {
		return (String) getAttributeValue("pkarrivecorp");
	}

	/**
	 * 给属性<发运需要的内部收货公司/pkarrivecorp>赋值。
	 * 
	 * @param value
	 *            java.lang.String
	 */
	public void setPkarrivecorp(java.lang.String value) {
		setAttributeValue("pkarrivecorp", value);
	}

	/**
	 * 获得属性<stempbody/stempbody>的值
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getStempbody() {
		return (String) getAttributeValue("stempbody");
	}

	/**
	 * 给属性<stempbody/stempbody>赋值
	 * 
	 * @param value
	 *            java.lang.String
	 */
	public void setStempbody(java.lang.String value) {
		setAttributeValue("stempbody", value);
	}

	/**
	 * 获得属性<是否出库关闭/bifinventoryfinish>的值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @return UFBoolean
	 */
	public UFBoolean getBifinventoryfinish() {
		Object value = getAttributeValue("bifinventoryfinish");
		return m_SVODataUtils.getUFBoolean(value);
	}

	/**
	 * 给属性<是否出库关闭/bifinventoryfinish>赋值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @param value
	 *            UFBoolean
	 */
	public void setBifinventoryfinish(UFBoolean value) {

		setAttributeValue("bifinventoryfinish", value);
	}

	/**
	 * 获得属性<是否开票关闭/bifinvoicefinish>的值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @return UFBoolean
	 */
	public UFBoolean getBifinvoicefinish() {
		Object value = getAttributeValue("bifinvoicefinish");
		return m_SVODataUtils.getUFBoolean(value);
	}

	/**
	 * 给属性<是否开票关闭/bifinvoicefinish>赋值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @param value
	 *            UFBoolean
	 */
	public void setBifinvoicefinish(UFBoolean value) {

		setAttributeValue("bifinvoicefinish", value);
	}

	/**
	 * 获得属性<是否收款关闭/bifpayfinish>的值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @return UFBoolean
	 */
	public UFBoolean getBifpayfinish() {
		Object value = getAttributeValue("bifpayfinish");
		return m_SVODataUtils.getUFBoolean(value);
	}

	/**
	 * 给属性<是否收款关闭/bifpayfinish>赋值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @param value
	 *            UFBoolean
	 */
	public void setBifpayfinish(UFBoolean value) {

		setAttributeValue("bifpayfinish", value);
	}

	/**
	 * 获得属性<是否发货关闭/bifreceivefinish>的值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @return UFBoolean
	 */
	public UFBoolean getBifreceivefinish() {
		Object value = getAttributeValue("bifreceivefinish");
		return m_SVODataUtils.getUFBoolean(value);
	}

	/**
	 * 给属性<是否发货关闭/bifreceivefinish>赋值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @param value
	 *            UFBoolean
	 */
	public void setBifreceivefinish(UFBoolean value) {

		setAttributeValue("bifreceivefinish", value);
	}

	/**
	 * 获得属性<存货类/bifreceivefinish>的值。 创建日期：(2003-05-04 14:03:23)
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getInvSort() {
		return (String) getAttributeValue("cinvsort");
	}

	/**
	 * 给属性<存货类/bifreceivefinish>赋值。
	 * 
	 * @param value
	 *            java.lang.String
	 */
	public void setInvSort(java.lang.String value) {
		setAttributeValue("cinvsort", value);
	}

	/**
	 * 获得属性<cprojectid/cprojectid>的值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @return String
	 */
	public String getCprojectid() {
		return (String) getAttributeValue("cprojectid");
	}

	/**
	 * 给属性<cprojectid/cprojectid>赋值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @param value
	 *            String
	 */
	public void setCprojectid(String value) {

		setAttributeValue("cprojectid", value);
	}

	/**
	 * 获得属性<cprojectid3/cprojectid3>的值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @return String
	 */
	public String getCprojectid3() {
		return (String) getAttributeValue("cprojectid3");
	}

	/**
	 * 给属性<cprojectid3/cprojectid3>赋值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @param value
	 *            String
	 */
	public void setCprojectid3(String value) {

		setAttributeValue("cprojectid3", value);
	}

	/**
	 * 获得属性<cprojectphaseid/cprojectphaseid>的值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @return String
	 */
	public String getCprojectphaseid() {
		return (String) getAttributeValue("cprojectphaseid");
	}

	/**
	 * 给属性<cprojectphaseid/cprojectphaseid>赋值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @param value
	 *            String
	 */
	public void setCprojectphaseid(String value) {

		setAttributeValue("cprojectphaseid", value);
	}

	/**
	 * @return 返回 nrowno。
	 */
	public Double getNrowno() {
		if (getAttributeValue("nrowno") == null) {
			if (getCrowno() == null || getCrowno().trim().length() <= 0) {
				setAttributeValue("nrowno", new Double(0.0));
			} else {
				try {
					setAttributeValue("nrowno", new Double(getCrowno()));
				} catch (Exception e) {
					setAttributeValue("nrowno", new Double(0.0));
					nc.vo.scm.pub.SCMEnv.out(e.getMessage());
				}
			}
		}
		return (Double) getAttributeValue("nrowno");
	}

	/**
	 * 获得属性<cstoreadmin/cstoreadmin>的值。 创建日期：(2003-05-04 13:48:30)
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getStoreAdmin() {
		return (String) getAttributeValue("cstoreadmin");
	}

	/**
	 * 给属性<cstoreadmin/cstoreadmin>赋值。 创建日期：(2003-05-04 13:48:30)
	 * 
	 * @param value
	 *            java.lang.String
	 */
	public void setStoreAdmin(java.lang.String value) {
		setAttributeValue("cstoreadmin", value);
	}

	/**
	 * 获得属性<合同存货类ID/ctinvclassid>的值。
	 * 
	 * 创建日期：(2001-5-11)
	 * 
	 * @return String
	 */
	public String getCtinvclassid() {
		return (String) getAttributeValue("ctinvclassid");
	}

	/**
	 * 给属性<合同存货类ID/ctinvclassid>赋值。
	 * 
	 * 创建日期：(2001-5-11)
	 * 
	 * @param value
	 *            String
	 */
	public void setCtinvclassid(String value) {
		setAttributeValue("ctinvclassid", value);
	}

	/**
	 * 获得属性<存货折扣属性/discountflag>的值
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getDiscountflag() {
		Object value = getAttributeValue("discountflag");
		if (value == null) {
			return UFBoolean.FALSE;
		} else {
			return m_SVODataUtils.getUFBoolean(value);
		}
	}

	/**
	 * 给属性<存货折扣属性/discountflag>赋值。
	 * 
	 * 创建日期：(2001-5-11)
	 * 
	 * @param value
	 *            UFBoolean
	 */
	public void setDiscountflag(UFBoolean value) {

		setAttributeValue("discountflag", value);
	}

	/**
	 * 获得属性<附属品属性/isappendant>的值
	 * 
	 * 创建日期：(2001-5-11)
	 * 
	 * @return UFBoolean
	 */
	public UFBoolean getIsappendant() {
		Object value = getAttributeValue("isappendant");
		return m_SVODataUtils.getUFBoolean(value);
	}

	/**
	 * 给属性<附属品属性/isappendant>赋值。
	 * 
	 * 创建日期：(2001-5-11)
	 * 
	 * @param value
	 *            UFBoolean
	 */
	public void setIsappendant(UFBoolean value) {

		setAttributeValue("isappendant", value);
	}

	/**
	 * 获得属性<存货劳务属性/laborflag>的值
	 * 
	 * 创建日期：(2001-5-11)
	 * 
	 * @return UFDate
	 */
	public UFBoolean getLaborflag() {
		Object value = getAttributeValue("laborflag");
		if (value == null) {
			return UFBoolean.FALSE;
		} else {
			return m_SVODataUtils.getUFBoolean(value);
		}
	}

	/**
	 * 给属性<存货劳务属性/laborflag>赋值
	 * 
	 * 创建日期：(2001-5-11)
	 * 
	 * @param value
	 *            UFBoolean
	 */
	public void setLaborflag(UFBoolean value) {

		setAttributeValue("laborflag", value);
	}

	/**
	 * 获得属性<标记存货可用量时所用的自然数序列行号/nlinenumber>的值
	 * 
	 * @return java.lang.Integer
	 */
	public Integer getNlinenumber() {
		Object value = getAttributeValue("nlinenumber");
		return m_SVODataUtils.getInteger(value);
	}

	/**
	 * 给属性<标记存货可用量时所用的自然数序列行号/nlinenumber>赋值
	 * 
	 * @param value
	 *            java.lang.Integer
	 */
	public void setNlinenumber(Integer value) {
		setAttributeValue("nlinenumber", value);
	}

	/**
	 * 获得属性<原币辅计量无税单价/norgviaprice>的值
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getOrgViaPrice() {
		Object value = getAttributeValue("norgviaprice");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<原币辅计量无税单价/norgviaprice>赋值
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setOrgViaPrice(nc.vo.pub.lang.UFDouble value) {
		setAttributeValue("norgviaprice", value);
	}

	/**
	 * 获得属性<累计确认应收数量/ntotalbalancenumber>的值
	 * 
	 * 创建日期：(2001-10-9)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNtotalbalancenumber() {
		Object value = getAttributeValue("ntotalbalancenumber");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计确认应收数量/ntotalbalancenumber>赋值
	 * 
	 * 创建日期：(2001-10-9)
	 * 
	 * @param value
	 *            UFDouble
	 */
	public void setNtotalbalancenumber(UFDouble value) {

		setAttributeValue("ntotalbalancenumber", value);
	}

	/**
	 * 获得属性<累计成本结算数量--累计传存货核算数量/ntotlbalcostnum>的值
	 * 
	 * 创建日期：(2001-10-9)
	 * 
	 * @return UFDouble
	 * 
	 */
	public UFDouble getNtotlbalcostnum() {
		Object value = getAttributeValue("ntotlbalcostnum");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计成本结算数量--累计传存货核算数量/ntotlbalcostnum>赋值
	 * 
	 * 创建日期：(2001-10-9)
	 * 
	 * @param value
	 *            UFDouble
	 */
	public void setNtotlbalcostnum(UFDouble value) {
		setAttributeValue("ntotlbalcostnum", value);
	}

	/**
	 * 获得属性< 累计对冲出库数量/nrushnum>的值
	 * 
	 * 创建日期：(2001-10-9)
	 * 
	 * @return UFDouble
	 * 
	 */
	public UFDouble getNrushnum() {
		Object value = getAttributeValue("nrushnum");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计对冲出库数量/nrushnum>赋值
	 * 
	 * 创建日期：(2001-10-9)
	 * 
	 * @param value
	 *            UFDouble
	 */
	public void setNrushnum(UFDouble value) {
		setAttributeValue("nrushnum", value);
	}

	/**
	 * 获得属性<累计发运数量/ntotalcarrynumber>的值。 创建日期：(2002-9-24 9:09:11)
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getNtotalcarrynumber() {
		Object value = getAttributeValue("ntotalcarrynumber");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计发运数量/ntotalcarrynumber>赋值
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setNtotalcarrynumber(nc.vo.pub.lang.UFDouble value) {
		setAttributeValue("ntotalcarrynumber", value);
	}

	/**
	 * 获得属性<累计成本金额/ntotalcostmny>的值。
	 * 
	 * 创建日期：(2001-10-9)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNtotalcostmny() {
		Object value = getAttributeValue("ntotalcostmny");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计成本金额/ntotalcostmny>赋值
	 * 
	 * 创建日期：(2001-10-9)
	 * 
	 * @param value
	 *            UFDouble
	 */
	public void setNtotalcostmny(UFDouble value) {

		setAttributeValue("ntotalcostmny", value);
	}

	/**
	 * 获得属性<累计出库数量/ntotalinventorynumber>的值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNtotalinventorynumber() {
		Object value = getAttributeValue("ntotalinventorynumber");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计出库数量/ntotalinventorynumber>赋值
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @param value
	 *            UFDouble
	 */
	public void setNtotalinventorynumber(UFDouble value) {

		setAttributeValue("ntotalinventorynumber", value);
	}

	/**
	 * 获得属性<累计开票金额/ntotalinvoicemny>的值。
	 * 
	 * 创建日期：(2001-10-9)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNtotalinvoicemny() {
		Object value = getAttributeValue("ntotalinvoicemny");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计开票金额/ntotalinvoicemny>赋值。
	 * 
	 * 创建日期：(2001-10-9)
	 * 
	 * @param value
	 *            UFDouble
	 */
	public void setNtotalinvoicemny(UFDouble value) {

		setAttributeValue("ntotalinvoicemny", value);
	}

	/**
	 * 获得属性<累计开票数量/ntotalinvoicenumber>的值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNtotalinvoicenumber() {
		Object value = getAttributeValue("ntotalinvoicenumber");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计开票数量/ntotalinvoicenumber>赋值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @param value
	 *            UFDouble
	 */
	public void setNtotalinvoicenumber(UFDouble value) {

		setAttributeValue("ntotalinvoicenumber", value);
	}

	/**
	 * 获得属性<累计收款金额/ntotalpaymny>的值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNtotalpaymny() {
		Object value = getAttributeValue("ntotalpaymny");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计收款金额/ntotalpaymny>赋值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @param value
	 *            UFDouble
	 */
	public void setNtotalpaymny(UFDouble value) {

		setAttributeValue("ntotalpaymny", value);
	}

	/**
	 * 获得属性<累计发货数量/ntotalreceivenumber>的值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNtotalreceivenumber() {
		Object value = getAttributeValue("ntotalreceivenumber");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计发货数量/ntotalreceivenumber>赋值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @param value
	 *            UFDouble
	 */
	public void setNtotalreceivenumber(UFDouble value) {

		setAttributeValue("ntotalreceivenumber", value);
	}

	/**
	 * 获得属性<累计退货数量/ntotalreturnnumber>的值。
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getNtotalreturnnumber() {
		Object value = getAttributeValue("ntotalreturnnumber");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计退货数量/ntotalreturnnumber>赋值。
	 * 
	 * @param newNtotalreturnnumber
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setNtotalreturnnumber(nc.vo.pub.lang.UFDouble value) {
		setAttributeValue("ntotalreturnnumber", value);
	}

	/**
	 * 获得属性<累计签收数量/ntotalsignnumber>的值。
	 * 
	 * 创建日期：(2001-10-9)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getNtotalsignnumber() {
		Object value = getAttributeValue("ntotalsignnumber");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计签收数量/ntotalsignnumber>赋值。
	 * 
	 * 创建日期：(2001-10-9)
	 * 
	 * @param value
	 *            UFDouble
	 */
	public void setNtotalsignnumber(UFDouble value) {

		setAttributeValue("ntotalsignnumber", value);
	}

	/**
	 * 获得属性<发货审批数量/outstoreauditnumber>的值。 创建日期：(2002-9-23 20:59:33)
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getOutstoreauditNumber() {
		Object value = getAttributeValue("outstoreauditnumber");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<发货审批数量/outstoreauditnumber>赋值。 创建日期：(2002-9-23 20:59:33)
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setOutstoreauditNumber(nc.vo.pub.lang.UFDouble value) {
		setAttributeValue("outstoreauditnumber", value);
	}

	/**
	 * 获得属性<出库审批数量/receiptauditnumber>的值。 创建日期：(2002-9-23 20:59:33)
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getReceiptauditNumber() {
		Object value = getAttributeValue("receiptauditnumber");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<出库审批数量/receiptauditnumber>赋值。 创建日期：(2002-9-23 20:59:33)
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setReceiptauditNumber(nc.vo.pub.lang.UFDouble value) {
		setAttributeValue("receiptauditnumber", value);
	}

	/**
	 * 获得属性<时间戳/ts>的值。
	 * 
	 * 创建日期：(2002-4-16)
	 * 
	 * @return UFDateTime
	 */
	public UFDateTime getTs() {
		Object value = getAttributeValue("ts");
		return m_SVODataUtils.getUFDateTime(value);
	}

	/**
	 * 给属性<时间戳/ts>赋值。
	 * 
	 * 创建日期：(2001-5-11)
	 * 
	 * @param value
	 *            String
	 */
	public void setTs(UFDateTime value) {

		setAttributeValue("ts", value);
	}

	/**
	 * 获得属性<执行表时间戳/exets>的值。
	 * 
	 * @return 返回 m_exets。
	 */
	public UFDateTime getExets() {
		Object value = getAttributeValue("exets");
		return m_SVODataUtils.getUFDateTime(value);
	}

	/**
	 * 给属性<执行表时间戳/exets>赋值。
	 * 
	 * @param m_exets
	 *            要设置的 value。
	 */
	public void setExets(UFDateTime value) {
		setAttributeValue("exets", value);
	}

	/**
	 * 获得属性<ATP/natp>的值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getNatp() {
		Object value = getAttributeValue("natp");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<ATP/natp>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setNatp(nc.vo.pub.lang.UFDouble value) {
		setAttributeValue("natp", value);
	}

	/**
	 * 获得属性<报价单位与主计量单位的换算率/nqtscalefactor>的值。 创建日期：(2004-3-26 8:51:05)
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getNqtscalefactor() {
		Object value = getAttributeValue("nqtscalefactor");
		if (value == null)
			return SoVoTools.div(getNnumber(), getNquoteunitnum());
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<报价单位与主计量单位的换算率/nqtscalefactor>赋值。 创建日期：(2004-3-26 8:51:05)
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setNqtscalefactor(nc.vo.pub.lang.UFDouble value) {
		setAttributeValue("nqtscalefactor", value);
	}

	/**
	 * 获得属性<累计结算金额/ntalbalancemny>的值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getNtalbalancemny() {
		Object value = getAttributeValue("ntalbalancemny");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计结算金额/ntalbalancemny>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setNtalbalancemny(nc.vo.pub.lang.UFDouble value) {
		setAttributeValue("ntalbalancemny", value);
	}

	/**
	 * 获得属性<累计运输数量/ntaltransnum>的值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getNtaltransnum() {
		Object value = getAttributeValue("ntaltransnum");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计运输数量/ntaltransnum>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setNtaltransnum(nc.vo.pub.lang.UFDouble value) {
		setAttributeValue("ntaltransnum", value);
	}

	/**
	 * 获得属性<运输货损数量/ntranslossnum>的值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getNtranslossnum() {
		Object value = getAttributeValue("ntranslossnum");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<运输货损数量/ntranslossnum>赋值。 创建日期：(2004-3-19 10:29:57)
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setNtranslossnum(nc.vo.pub.lang.UFDouble value) {
		setAttributeValue("ntranslossnum", value);
	}

	/**
	 * 获得属性<包装换算率/scalefactor>的值。
	 * 
	 * 创建日期：(2001-5-11)
	 * 
	 * @return UFBoolean
	 */
	public UFDouble getScalefactor() {
		Object value = getAttributeValue("scalefactor");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<包装换算率/scalefactor>赋值。
	 * 
	 * 创建日期：(2001-5-11)
	 * 
	 * @return UFDouble
	 */
	public void setScalefactor(UFDouble value) {
		setAttributeValue("scalefactor", value);
	}

	/**
	 * 获得属性<累计安排请购单数量/narrangepoapplynum>的值。
	 * 
	 * @return 返回 narrangepoapplynum。
	 */
	public UFDouble getNarrangepoapplynum() {
		Object value = getAttributeValue("narrangepoapplynum");
		if (value==null)
			return UFDouble.ZERO_DBL;
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计安排请购单数量/narrangepoapplynum>赋值。
	 * 
	 * @param value
	 *            要设置的 narrangepoapplynum。
	 */
	public void setNarrangepoapplynum(UFDouble value) {
		setAttributeValue("narrangepoapplynum", value);
	}

	/**
	 * 获得属性<累计安排委外订单数量/narrangescornum>的值。
	 * 
	 * @return 返回 narrangescornum。
	 */
	public UFDouble getNarrangescornum() {
		Object value = getAttributeValue("narrangescornum");
		if (value==null)
			return UFDouble.ZERO_DBL;
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计安排委外订单数量/narrangescornum>赋值。
	 * 
	 * @param value
	 *            要设置的 narrangescornum。
	 */
	public void setNarrangescornum(UFDouble value) {
		setAttributeValue("narrangescornum", value);
	}

	/**
	 * 给属性<累计可安排数量/arrangenum>赋值。
	 * 
	 * @param value
	 *            要设置的 arrangenum。
	 */
	public void setNarrangenum(UFDouble value) {
		setAttributeValue("arrangenum", value);
	}

	/**
	 * 获得属性<累计安排调拨订单数量/narrangetoornum>的值。
	 * 
	 * @return 返回 narrangetoornum。
	 */
	public UFDouble getNarrangetoornum() {
		Object value = getAttributeValue("narrangetoornum");
		if (value==null)
			return UFDouble.ZERO_DBL;
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性<累计安排数量/narrangetotolenum>的值。
	 * 
	 * @return 返回 narrangetoornum。
	 */
	public UFDouble getNarrangetotolenum() {
		Object value = getAttributeValue("narrangetotolenum");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 获得属性<累计可安排数量/arrangenum>的值。
	 * 
	 * @return 返回 arrangenum。
	 */
	public UFDouble getNarrangenum() {
		Object value = getAttributeValue("arrangenum");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计安排调拨订单数量/narrangetoornum>赋值。
	 * 
	 * @param value
	 *            要设置的 narrangetoornum。
	 */
	public void setNarrangetoornum(UFDouble value) {
		setAttributeValue("narrangetoornum", value);
	}

	/**
	 * 获得属性<累计安排调拨申请数量/norrangetoapplynum>的值。
	 * 
	 * @return 返回 norrangetoapplynum。
	 */
	public UFDouble getNorrangetoapplynum() {
		Object value = getAttributeValue("norrangetoapplynum");
		if (value==null)
			return UFDouble.ZERO_DBL;
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计安排调拨申请数量/norrangetoapplynum>赋值。
	 * 
	 * @param value
	 *            要设置的 norrangetoapplynum。
	 */
	public void setNorrangetoapplynum(UFDouble value) {
		setAttributeValue("norrangetoapplynum", value);
	}

	/**
	 * 获得属性<累计安排生产订单数量/narrangemonum>的值。
	 * 
	 * @return 返回 narrangemonum。
	 */
	public UFDouble getNarrangemonum() {
		Object value = getAttributeValue("narrangemonum");
		if (value==null)
			return UFDouble.ZERO_DBL;
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<累计安排生产订单数量/narrangemonum>赋值。
	 * 
	 * @param value
	 *            要设置的 narrangemonum。
	 */
	public void setNarrangemonum(UFDouble value) {
		setAttributeValue("narrangemonum", value);
	}

	/**
	 * 给属性<累计安排数量/narrangemonum>赋值。
	 * 
	 * @param value
	 *            要设置的 narrangemonum。
	 */
	public void setNarrangetotolenum(UFDouble value) {
		setAttributeValue("narrangetotolenum", value);
	}

	/**
	 * 获得属性<是否货源安排完毕/barrangedflag>的值。
	 * 
	 * @return 返回 barrangedflag。
	 */
	public UFBoolean getBarrangedflag() {
		Object value = getAttributeValue("barrangedflag");
		return m_SVODataUtils.getUFBoolean(value);
	}

	/**
	 * 给属性<是否货源安排完毕/barrangedflag>赋值。
	 * 
	 * @param value
	 *            要设置的 barrangedflag。
	 */
	public void setBarrangedflag(UFBoolean value) {
		setAttributeValue("barrangedflag", value);
	}

	/**
	 * 获得属性<最后货源安排人/carrangepersonid>的值。
	 * 
	 * @return 返回 carrangepersonid。
	 */
	public String getCarrangepersonid() {
		return (String) getAttributeValue("carrangepersonid");
	}

	/**
	 * 给属性<最后货源安排人/carrangepersonid>赋值。
	 * 
	 * @param value
	 *            要设置的 carrangepersonid。
	 */
	public void setCarrangepersonid(String value) {
		setAttributeValue("carrangepersonid", value);
	}

	/**
	 * 获得属性<最后货源安排时间/tlastarrangetime>的值。
	 * 
	 * @return 返回 tlastarrangetime。
	 */
	public UFDateTime getTlastarrangetime() {
		Object value = getAttributeValue("tlastarrangetime");
		return m_SVODataUtils.getUFDateTime(value);
	}

	/**
	 * 给属性<最后货源安排时间/tlastarrangetime>赋值。
	 * 
	 * @param value
	 *            要设置的 tlastarrangetime。
	 */
	public void setTlastarrangetime(UFDateTime value) {
		setAttributeValue("tlastarrangetime", value);
	}

	/**
	 * 获得属性<出库应发/ntotalshouldoutnum>的值。
	 * 
	 * @return 返回 tlastarrangetime。
	 */
	public nc.vo.pub.lang.UFDouble getNtotalshouldoutnum() {
		Object value = getAttributeValue("ntotalshouldoutnum");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<出库应发/ntotalshouldoutnum>赋值。
	 * 
	 * @param value
	 *            要设置的 ntotalshouldoutnum。
	 */
	public void setNtotalshouldoutnum(nc.vo.pub.lang.UFDouble value) {
		setAttributeValue("ntotalshouldoutnum", value);
	}

	/**
	 * 获得属性<自定义项1/vdef1>的值。
	 * 
	 * @return 返回 vdef1。
	 */
	public String getVdef1() {
		return (String) getAttributeValue("vdef1");
	}

	/**
	 * 给属性<自定义项1/vdef1>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef1。
	 */
	public void setVdef1(String value) {
		setAttributeValue("vdef1", value);
	}

	/**
	 * 获得属性<自定义项2/vdef2>的值。
	 * 
	 * @return 返回 vdef2。
	 */
	public String getVdef2() {
		return (String) getAttributeValue("vdef2");
	}

	/**
	 * 给属性<自定义项2/vdef2>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef2。
	 */
	public void setVdef2(String value) {
		setAttributeValue("vdef2", value);
	}

	/**
	 * 获得属性<自定义项3/vdef3>的值。
	 * 
	 * @return 返回 vdef3。
	 */
	public String getVdef3() {
		return (String) getAttributeValue("vdef3");
	}

	/**
	 * 给属性<自定义项3/vdef3>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef3。
	 */
	public void setVdef3(String value) {
		setAttributeValue("vdef3", value);
	}

	/**
	 * 获得属性<自定义项4/vdef4>的值。
	 * 
	 * @return 返回 vdef4。
	 */
	public String getVdef4() {
		return (String) getAttributeValue("vdef4");
	}

	/**
	 * 给属性<自定义项4/vdef4>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef4。
	 */
	public void setVdef4(String value) {
		setAttributeValue("vdef4", value);
	}

	/**
	 * 获得属性<自定义项5/vdef5>的值。
	 * 
	 * @return 返回 vdef5。
	 */
	public String getVdef5() {
		return (String) getAttributeValue("vdef5");
	}

	/**
	 * 给属性<自定义项5/vdef5>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef5。
	 */
	public void setVdef5(String value) {
		setAttributeValue("vdef5", value);
	}

	/**
	 * 获得属性<自定义项6/vdef6>的值。
	 * 
	 * @return 返回 vdef6。
	 */
	public String getVdef6() {
		return (String) getAttributeValue("vdef6");
	}

	/**
	 * 给属性<自定义项6/vdef6>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef6。
	 */
	public void setVdef6(String value) {
		setAttributeValue("vdef6", value);
	}

	/**
	 * 获得属性<自定义项7/vdef7>的值。
	 * 
	 * @return 返回 vdef7。
	 */
	public String getVdef7() {
		return (String) getAttributeValue("vdef7");
	}

	/**
	 * 给属性<自定义项7/vdef7>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef7。
	 */
	public void setVdef7(String value) {
		setAttributeValue("vdef7", value);
	}

	/**
	 * 获得属性<自定义项8/vdef8>的值。
	 * 
	 * @return 返回 vdef8。
	 */
	public String getVdef8() {
		return (String) getAttributeValue("vdef8");
	}

	/**
	 * 给属性<自定义项8/vdef8>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef8。
	 */
	public void setVdef8(String value) {
		setAttributeValue("vdef8", value);
	}

	/**
	 * 获得属性<自定义项9/vdef9>的值。
	 * 
	 * @return 返回 vdef9。
	 */
	public String getVdef9() {
		return (String) getAttributeValue("vdef9");
	}

	/**
	 * 给属性<自定义项9/vdef9>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef9。
	 */
	public void setVdef9(String value) {
		setAttributeValue("vdef9", value);
	}

	/**
	 * 获得属性<自定义项10/vdef10>的值。
	 * 
	 * @return 返回 vdef10。
	 */
	public String getVdef10() {
		return (String) getAttributeValue("vdef10");
	}

	/**
	 * 给属性<自定义项10/vdef10>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef10。
	 */
	public void setVdef10(String value) {
		setAttributeValue("vdef10", value);
	}

	/**
	 * 获得属性<自定义项11/vdef11>的值。
	 * 
	 * @return 返回 vdef11。
	 */
	public String getVdef11() {
		return (String) getAttributeValue("vdef11");
	}

	/**
	 * 给属性<自定义项11/vdef11>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef10。
	 */
	public void setVdef11(String value) {
		setAttributeValue("vdef11", value);
	}

	/**
	 * 获得属性<自定义项12/vdef12>的值。
	 * 
	 * @return 返回 vdef12。
	 */
	public String getVdef12() {
		return (String) getAttributeValue("vdef12");
	}

	/**
	 * 给属性<自定义项12/vdef12>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef12。
	 */
	public void setVdef12(String value) {
		setAttributeValue("vdef12", value);
	}

	/**
	 * 获得属性<自定义项13/vdef13>的值。
	 * 
	 * @return 返回 vdef10。
	 */
	public String getVdef13() {
		return (String) getAttributeValue("vdef13");
	}

	/**
	 * 给属性<自定义项13/vdef13>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef13。
	 */
	public void setVdef13(String value) {
		setAttributeValue("vdef13", value);
	}

	/**
	 * 获得属性<自定义项14/vdef14>的值。
	 * 
	 * @return 返回 vdef14。
	 */
	public String getVdef14() {
		return (String) getAttributeValue("vdef14");
	}

	/**
	 * 给属性<自定义项14/vdef14>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef14。
	 */
	public void setVdef14(String value) {
		setAttributeValue("vdef14", value);
	}

	/**
	 * 获得属性<自定义项15/vdef15>的值。
	 * 
	 * @return 返回 vdef15。
	 */
	public String getVdef15() {
		return (String) getAttributeValue("vdef15");
	}

	/**
	 * 给属性<自定义项15/vdef15>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef15。
	 */
	public void setVdef15(String value) {
		setAttributeValue("vdef15", value);
	}

	/**
	 * 获得属性<自定义项16/vdef16>的值。
	 * 
	 * @return 返回 vdef16。
	 */
	public String getVdef16() {
		return (String) getAttributeValue("vdef16");
	}

	/**
	 * 给属性<自定义项16/vdef16>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef16。
	 */
	public void setVdef16(String value) {
		setAttributeValue("vdef16", value);
	}

	/**
	 * 获得属性<自定义项17/vdef17>的值。
	 * 
	 * @return 返回 vdef17。
	 */
	public String getVdef17() {
		return (String) getAttributeValue("vdef17");
	}

	/**
	 * 给属性<自定义项17/vdef17>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef17。
	 */
	public void setVdef17(String value) {
		setAttributeValue("vdef17", value);
	}

	/**
	 * 获得属性<自定义项18/vdef18>的值。
	 * 
	 * @return 返回 vdef18。
	 */
	public String getVdef18() {
		return (String) getAttributeValue("vdef18");
	}

	/**
	 * 给属性<自定义项18/vdef18>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef18。
	 */
	public void setVdef18(String value) {
		setAttributeValue("vdef18", value);
	}

	/**
	 * 获得属性<自定义项19/vdef19>的值。
	 * 
	 * @return 返回 vdef19。
	 */
	public String getVdef19() {
		return (String) getAttributeValue("vdef19");
	}

	/**
	 * 给属性<自定义项19/vdef19>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef19。
	 */
	public void setVdef19(String value) {
		setAttributeValue("vdef19", value);
	}

	/**
	 * 获得属性<自定义项20/vdef20>的值。
	 * 
	 * @return 返回 vdef20。
	 */
	public String getVdef20() {
		return (String) getAttributeValue("vdef20");
	}

	/**
	 * 给属性<自定义项20/vdef20>赋值。
	 * 
	 * @param value
	 *            要设置的 vdef20。
	 */
	public void setVdef20(String value) {
		setAttributeValue("vdef20", value);
	}

	/**
	 * 获得属性<自定义项1/pk_defdoc1>的值。
	 * 
	 * @return 返回 pk_defdoc1。
	 */
	public String getPk_defdoc1() {
		return (String) getAttributeValue("pk_defdoc1");
	}

	/**
	 * 给属性<自定义项1/pk_defdoc1>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc1。
	 */
	public void setPk_defdoc1(String value) {
		setAttributeValue("pk_defdoc1", value);
	}

	/**
	 * 获得属性<自定义项2/pk_defdoc2>的值。
	 * 
	 * @return 返回 pk_defdoc2。
	 */
	public String getPk_defdoc2() {
		return (String) getAttributeValue("pk_defdoc2");
	}

	/**
	 * 给属性<自定义项2/pk_defdoc2>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc2。
	 */
	public void setPk_defdoc2(String value) {
		setAttributeValue("pk_defdoc2", value);
	}

	/**
	 * 获得属性<自定义项3/pk_defdoc3>的值。
	 * 
	 * @return 返回 pk_defdoc3。
	 */
	public String getPk_defdoc3() {
		return (String) getAttributeValue("pk_defdoc3");
	}

	/**
	 * 给属性<自定义项3/pk_defdoc3>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc3。
	 */
	public void setPk_defdoc3(String value) {
		setAttributeValue("pk_defdoc3", value);
	}

	/**
	 * 获得属性<自定义项4/pk_defdoc4>的值。
	 * 
	 * @return 返回 pk_defdoc4。
	 */
	public String getPk_defdoc4() {
		return (String) getAttributeValue("pk_defdoc4");
	}

	/**
	 * 给属性<自定义项4/pk_defdoc4>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc4。
	 */
	public void setPk_defdoc4(String value) {
		setAttributeValue("pk_defdoc4", value);
	}

	/**
	 * 获得属性<自定义项5/pk_defdoc5>的值。
	 * 
	 * @return 返回 pk_defdoc5。
	 */
	public String getPk_defdoc5() {
		return (String) getAttributeValue("pk_defdoc5");
	}

	/**
	 * 给属性<自定义项5/pk_defdoc5>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc5。
	 */
	public void setPk_defdoc5(String value) {
		setAttributeValue("pk_defdoc5", value);
	}

	/**
	 * 获得属性<自定义项6/pk_defdoc6>的值。
	 * 
	 * @return 返回 pk_defdoc6。
	 */
	public String getPk_defdoc6() {
		return (String) getAttributeValue("pk_defdoc6");
	}

	/**
	 * 给属性<自定义项6/pk_defdoc6>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc6。
	 */
	public void setPk_defdoc6(String value) {
		setAttributeValue("pk_defdoc6", value);
	}

	/**
	 * 获得属性<自定义项7/pk_defdoc7>的值。
	 * 
	 * @return 返回 pk_defdoc7。
	 */
	public String getPk_defdoc7() {
		return (String) getAttributeValue("pk_defdoc7");
	}

	/**
	 * 给属性<自定义项7/pk_defdoc7>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc7。
	 */
	public void setPk_defdoc7(String value) {
		setAttributeValue("pk_defdoc7", value);
	}

	/**
	 * 获得属性<自定义项8/pk_defdoc8>的值。
	 * 
	 * @return 返回 pk_defdoc8。
	 */
	public String getPk_defdoc8() {
		return (String) getAttributeValue("pk_defdoc8");
	}

	/**
	 * 给属性<自定义项8/pk_defdoc8>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc8。
	 */
	public void setPk_defdoc8(String value) {
		setAttributeValue("pk_defdoc8", value);
	}

	/**
	 * 获得属性<自定义项9/pk_defdoc9>的值。
	 * 
	 * @return 返回 pk_defdoc9。
	 */
	public String getPk_defdoc9() {
		return (String) getAttributeValue("pk_defdoc9");
	}

	/**
	 * 给属性<自定义项9/pk_defdoc9>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc9。
	 */
	public void setPk_defdoc9(String value) {
		setAttributeValue("pk_defdoc9", value);
	}

	/**
	 * 获得属性<自定义项10/pk_defdoc10>的值。
	 * 
	 * @return 返回 pk_defdoc10。
	 */
	public String getPk_defdoc10() {
		return (String) getAttributeValue("pk_defdoc10");
	}

	/**
	 * 给属性<自定义项10/pk_defdoc10>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc10。
	 */
	public void setPk_defdoc10(String value) {
		setAttributeValue("pk_defdoc10", value);
	}

	/**
	 * 获得属性<自定义项11/pk_defdoc11>的值。
	 * 
	 * @return 返回 pk_defdoc11。
	 */
	public String getPk_defdoc11() {
		return (String) getAttributeValue("pk_defdoc11");
	}

	/**
	 * 给属性<自定义项11/pk_defdoc11>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc11。
	 */
	public void setPk_defdoc11(String value) {
		setAttributeValue("pk_defdoc11", value);
	}

	/**
	 * 获得属性<自定义项12/pk_defdoc12>的值。
	 * 
	 * @return 返回 pk_defdoc12。
	 */
	public String getPk_defdoc12() {
		return (String) getAttributeValue("pk_defdoc12");
	}

	/**
	 * 给属性<自定义项12/pk_defdoc12>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc12。
	 */
	public void setPk_defdoc12(String value) {
		setAttributeValue("pk_defdoc12", value);
	}

	/**
	 * 获得属性<自定义项13/pk_defdoc13>的值。
	 * 
	 * @return 返回 pk_defdoc13。
	 */
	public String getPk_defdoc13() {
		return (String) getAttributeValue("pk_defdoc13");
	}

	/**
	 * 给属性<自定义项13/pk_defdoc13>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc13。
	 */
	public void setPk_defdoc13(String value) {
		setAttributeValue("pk_defdoc13", value);
	}

	/**
	 * 获得属性<自定义项14/pk_defdoc14>的值。
	 * 
	 * @return 返回 pk_defdoc14。
	 */
	public String getPk_defdoc14() {
		return (String) getAttributeValue("pk_defdoc14");
	}

	/**
	 * 给属性<自定义项14/pk_defdoc14>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc14。
	 */
	public void setPk_defdoc14(String value) {
		setAttributeValue("pk_defdoc14", value);
	}

	/**
	 * 获得属性<自定义项15/pk_defdoc15>的值。
	 * 
	 * @return 返回 pk_defdoc15。
	 */
	public String getPk_defdoc15() {
		return (String) getAttributeValue("pk_defdoc15");
	}

	/**
	 * 给属性<自定义项15/pk_defdoc15>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc15。
	 */
	public void setPk_defdoc15(String value) {
		setAttributeValue("pk_defdoc15", value);
	}

	/**
	 * 获得属性<自定义项16/pk_defdoc16>的值。
	 * 
	 * @return 返回 pk_defdoc16。
	 */
	public String getPk_defdoc16() {
		return (String) getAttributeValue("pk_defdoc16");
	}

	/**
	 * 给属性<自定义项16/pk_defdoc16>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc16。
	 */
	public void setPk_defdoc16(String value) {
		setAttributeValue("pk_defdoc16", value);
	}

	/**
	 * 获得属性<自定义项17/pk_defdoc17>的值。
	 * 
	 * @return 返回 pk_defdoc17。
	 */
	public String getPk_defdoc17() {
		return (String) getAttributeValue("pk_defdoc17");
	}

	/**
	 * 给属性<自定义项17/pk_defdoc17>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc17。
	 */
	public void setPk_defdoc17(String value) {
		setAttributeValue("pk_defdoc17", value);
	}

	/**
	 * 获得属性<自定义项18/pk_defdoc18>的值。
	 * 
	 * @return 返回 pk_defdoc18。
	 */
	public String getPk_defdoc18() {
		return (String) getAttributeValue("pk_defdoc18");
	}

	/**
	 * 给属性<自定义项18/pk_defdoc18>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc18。
	 */
	public void setPk_defdoc18(String value) {
		setAttributeValue("pk_defdoc18", value);
	}

	/**
	 * 获得属性<自定义项19/pk_defdoc19>的值。
	 * 
	 * @return 返回 pk_defdoc19。
	 */
	public String getPk_defdoc19() {
		return (String) getAttributeValue("pk_defdoc19");
	}

	/**
	 * 给属性<自定义项19/pk_defdoc19>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc19。
	 */
	public void setPk_defdoc19(String value) {
		setAttributeValue("pk_defdoc19", value);
	}

	/**
	 * 获得属性<自定义项20/pk_defdoc20>的值。
	 * 
	 * @return 返回 pk_defdoc20。
	 */
	public String getPk_defdoc20() {
		return (String) getAttributeValue("pk_defdoc20");
	}

	/**
	 * 给属性<自定义项20/pk_defdoc20>赋值。
	 * 
	 * @param value
	 *            要设置的 pk_defdoc20。
	 */
	public void setPk_defdoc20(String value) {
		setAttributeValue("pk_defdoc20", value);
	}

	/**
	 * 获得属性<是否强行删除日计划/isDel7D>的值。
	 * 
	 * @return boolean
	 */
	public boolean isIsDel7D() {
		return isDel7D;
	}

	/**
	 * 获得属性<nbalmny_diff/nbalmny_diff>的值。
	 * 
	 * @return 返回 nbalmny_diff。
	 */
	public UFDouble getNbalmny_diff() {
//		Object value = getAttributeValue("nbalmny_diff");
		return m_SVODataUtils.getUFDouble("nbalmny_diff");
	}

	/**
	 * 给属性<nbalmny_diff/nbalmny_diff>赋值
	 * 
	 * @param value
	 *            要设置的 nbalmny_diff。
	 */
	public void setNbalmny_diff(UFDouble value) {
		setAttributeValue("nbalmny_diff", value);
	}

	/**
	 * @return 返回 bCheckATP。
	 */
	public boolean isBCheckATP() {
		return bCheckATP;
	}

	/**
	 * @param checkATP
	 *            要设置的 bCheckATP。
	 */
	public void setBCheckATP(boolean checkATP) {
		bCheckATP = checkATP;
		setAttributeValue("bCheckATP", checkATP);
	}

	/**
	 * 获得属性<散户id/cfreecustid>的值。
	 * 
	 * @return 返回 cfreecustid。
	 */
	public String getCfreecustid() {
		return (String) getAttributeValue("cfreecustid");
	}

	/**
	 * 给属性<散户id/cfreecustid>赋值
	 * 
	 * @param value
	 *            要设置的 cfreecustid。
	 */
	public void setCfreecustid(String value) {
		setAttributeValue("cfreecustid", value);
	}

	/**
	 * 获得属性<客户id/ccustomerid>的值。
	 * 
	 * @return 返回 ccustomerid。
	 */
	public String getCcustomerid() {
		return (String) getAttributeValue("ccustomerid");
	}

	/**
	 * 给属性<客户id/ccustomerid>赋值
	 * 
	 * @param value
	 *            要设置的 ccustomerid。
	 */
	public void setCcustomerid(String value) {
		setAttributeValue("ccustomerid", value);
	}

	/**
	 * 获得属性<发票审批数量/invoiceauditnumber>的值。 创建日期：(2002-9-23 20:59:33)
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getInvoiceauditNumber() {
		Object value = getAttributeValue("invoiceauditnumber");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<发票审批数量/invoiceauditnumber>赋值 创建日期：(2002-9-23 20:59:33)
	 * 
	 * @param value
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setInvoiceauditNumber(nc.vo.pub.lang.UFDouble value) {
		setAttributeValue("invoiceauditnumber", value);
	}

	/**
	 * 获得属性<ntotalpaymny_old/ntotalpaymny_old>的值。
	 * 
	 * @return 返回 ntotalpaymny_old。
	 */
	public UFDouble getNtotalpaymny_old() {
		Object value = getAttributeValue("ntotalpaymny_old");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<ntotalpaymny_old/ntotalpaymny_old>赋值
	 * 
	 * @param value
	 *            要设置的 ntotalpaymny_old。
	 */
	public void setNtotalpaymny_old(UFDouble value) {
		setAttributeValue("ntotalpaymny_old", value);
	}

	/**
	 * 获得属性<是否捆绑/bbindflag>的值。
	 * 
	 * @return 返回 ntotalpaymny_old。
	 */
	public UFBoolean getBbindflag() {
		Object value = getAttributeValue("bbindflag");
		if (value == null) {
			return UFBoolean.FALSE;
		} else {
			return m_SVODataUtils.getUFBoolean(value);
		}
	}

	/**
	 * 给属性<是否捆绑/bbindflag>赋值
	 * 
	 * @param value
	 *            要设置的 ntotalpaymny_old。
	 */
	public void setBbindflag(UFBoolean value) {
		setAttributeValue("bbindflag", value);
	}

	/**
	 * 获得属性<原累计发货数量 /ntotalreceivenumber_old>的值。
	 * 
	 * @return 返回 ntotalreceivenumber_old。
	 */
	public UFDouble getNtotalreceivenumber_old() {
		return ntotalreceivenumber_old;
	}

	/**
	 * 获得属性<原累计开票数量 /ntotalinvoicenumber_old>的值。
	 * 
	 * @return 返回 ntotalinvoicenumber_old。
	 */
	public UFDouble getNtotalinvoicenumber_old() {
		return ntotalinvoicenumber_old;
	}

	/**
	 * 给属性<原累计开票数量 /ntotalinvoicenumber_old>赋值
	 * 
	 * @param ntotalinvoicenumber_old
	 *            要设置的 ntotalinvoicenumber_old。
	 */
	public void setNtotalinvoicenumber_old(UFDouble ntotalinvoicenumber_old) {
		this.ntotalinvoicenumber_old = ntotalinvoicenumber_old;
	}

	/**
	 * 获得属性<原累计出库数量 /ntotalinventorynumber_old>的值。
	 * 
	 * @return 返回 ntotalinventorynumber_old。
	 */
	public UFDouble getNtotalinventorynumber_old() {
		return ntotalinventorynumber_old;
	}

	/**
	 * 给属性<原累计出库数量 /ntotalinventorynumber_old>赋值
	 * 
	 * @param ntotalinventorynumber_old
	 *            要设置的 ntotalinventorynumber_old。
	 */
	public void setNtotalinventorynumber_old(UFDouble ntotalinventorynumber_old) {
		this.ntotalinventorynumber_old = ntotalinventorynumber_old;
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2005-1-25 19:02:47) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @return nc.vo.so.so001.SaleorderBVO
	 */
	public SaleorderBVO getOldbvo() {
		return oldbvo;
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 日期：(2005-1-25 19:02:47) 修改日期，修改人，修改原因，注释标志：
	 * 
	 * @param newOldbvo
	 *            nc.vo.so.so001.SaleorderBVO
	 */
	public void setOldbvo(SaleorderBVO newOldbvo) {
		oldbvo = newOldbvo;
	}

	/**
	 * 获得属性<自由项0/vfree0>的值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @return String
	 */
	public String getVfree0() {
		return (String) getAttributeValue("vfree0");
	}

	/**
	 * 给属性<自由项0/vfree0>赋值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @param value
	 *            String
	 */
	public void setVfree0(String value) {

		setAttributeValue("vfree0", value);
	}

	/**
	 * 获得属性<自由项1/vfree1>的值。
	 * 
	 * 创建日期：(2008-4-14)
	 * 
	 * @return String
	 */
	public String getVfree1() {
		return (String) getAttributeValue("vfree1");
	}

	/**
	 * 给属性<自由项1/vfree1>赋值。
	 * 
	 * 创建日期：(2008-4-14)
	 * 
	 * @param value
	 *            String
	 */
	public void setVfree1(String value) {

		setAttributeValue("vfree1", value);
	}

	/**
	 * 获得属性<自由项2/vfree2>的值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @return String
	 */
	public String getVfree2() {
		return (String) getAttributeValue("vfree2");
	}

	/**
	 * 给属性<自由项2/vfree2>赋值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @param value
	 *            String
	 */
	public void setVfree2(String value) {

		setAttributeValue("vfree2", value);
	}

	/**
	 * 获得属性<自由项3/vfree3>的值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @return String
	 */
	public String getVfree3() {
		return (String) getAttributeValue("vfree3");
	}

	/**
	 * 给属性<自由项3/vfree3>赋值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @param value
	 *            String
	 */
	public void setVfree3(String value) {

		setAttributeValue("vfree3", value);
	}

	/**
	 * 获得属性<自由项4/vfree4>的值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @return String
	 */
	public String getVfree4() {
		return (String) getAttributeValue("vfree4");
	}

	/**
	 * 给属性<自由项4/vfree4>赋值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @param value
	 *            String
	 */
	public void setVfree4(String value) {

		setAttributeValue("vfree4", value);
	}

	/**
	 * 获得属性<自由项5/vfree5>的值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @return String
	 */
	public String getVfree5() {
		return (String) getAttributeValue("vfree5");
	}

	/**
	 * 给属性<自由项5/vfree5>赋值。
	 * 
	 * 创建日期：(2001-6-14)
	 * 
	 * @param value
	 *            String
	 */
	public void setVfree5(String value) {

		setAttributeValue("vfree5", value);
	}

	/**
	 * 验证对象各属性之间的数据逻辑正确性。
	 * 
	 * 创建日期：(2001-4-20)
	 * 
	 * @exception nc.vo.pub.ValidationException
	 *                如果验证失败，抛出 ValidationException，对错误进行解释。
	 */
	public void validate() throws nc.vo.pub.ValidationException {
		ArrayList errFields = new ArrayList();
		// errFields record those null fields that cannot be null.
		// 请你将下面的字段名改为界面显示名：
		if (getCinventoryid() == null || getCinventoryid().trim().length() <= 0) {
			errFields.add(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0001439")/*
			 * @res
			 * "存货"
			 */);
		}
		if (getCcurrencytypeid() == null || getCcurrencytypeid().trim().length() <= 0) {
			errFields.add(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0001755")/*
			 * @res
			 * "币种"
			 */);
		}
		if (!(getDiscountflag() == null || getDiscountflag().booleanValue())) {
			if (getNnumber() == null) {
				errFields.add(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0002282")/*
				 * @res
				 * "数量"
				 */);
			}
			if (getNquoteunitnum() == null) {
				errFields.add(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0002104")/*
				 * @res
				 * "报价单位数量"
				 */);
			}

		}
		if (!(getDiscountflag() != null && getDiscountflag().booleanValue())
				&& !(getBlargessflag() != null && getBlargessflag().booleanValue())
				&& !(getIsappendant() != null && getIsappendant().booleanValue())) {
			if (getNtaxrate() == null) {
				errFields.add(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0003078")/*
				 * @res
				 * "税率"
				 */);
			}
			if (getNoriginalcurtaxmny() == null) {
				errFields.add(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0003084")/*
				 * @res
				 * "税额"
				 */);
			}
			if (getNoriginalcursummny() == null) {
				errFields.add(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0000227")/*
				 * @res
				 * "价税合计"
				 */);
			}
			if (getNsummny() == null) {
				errFields.add(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0002594")/*
				 * @res
				 * "本币价税合计"
				 */);
			}
			if (errFields.size() == 0) {
				if (getNdiscountrate() == null) {
					errFields.add(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0002290")/*
					 * @res
					 * "整单折扣"
					 */);
				}
				if (getNoriginalcurtaxprice()==null)
					errFields.add(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0001160")/*
							 * @res
							 * "含税单价"
							 */);
				if (getNoriginalcurprice()==null)
					errFields.add(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0002306")/*
							 * @res
							 * "无税单价"
							 */);
				if (getNoriginalcurnetprice() == null) {
					errFields.add(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0002305")/*
					 * @res
					 * "无税净价"
					 */);
				}
				if (getNoriginalcurtaxnetprice() == null) {
					errFields.add(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0001159")/*
					 * @res
					 * "含税净价"
					 */);
				}
				if (getNorgqttaxnetprc() == null) {
					errFields.add(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0002102")/*
					 * @res
					 * "报价单位含税净价"
					 */);
				}
				if (getNorgqtnetprc() == null) {
					errFields.add(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0002105")/*
					 * @res
					 * "报价单位无税净价"
					 */);
				}
				if (getNoriginalcurmny() == null) {
					errFields.add(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common", "UC000-0002307")/*
					 * @res
					 * "无税金额"
					 */);
				}
			}
		}
		StringBuffer message = new StringBuffer();
		message.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("40060301", "UPP40060301-000083")/*
		 * @res
		 * "下列字段不能为空："
		 */);
		// message.append("下列字段不能为空：");
		if (errFields.size() > 0) {
			Object[] temp = errFields.toArray();

			message.append("[");
			message.append(temp[0].toString());
			for (int i = 1; i < temp.length; i++) {
				message.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes()
						.getStrByID("SCMCOMMON", "UPPSCMCommon-000000"));
				// message.append("、");
				message.append(temp[i].toString());
			}
			message.append("]");
			// message.append(nc.vo.pub.CommonConstant.END_MARK);
			// throw the exception:
			throw new NullFieldException(message.toString());
		}
		// 发货日期
		// if (m_dconsigndate != null && m_ddeliverdate != null) {
		// if (m_dconsigndate.after(m_ddeliverdate))
		// throw new ValidationException("发货日期应小于等于交货日期.");
		// }
		// 折扣额
		if (getNdiscountmny() != null && getNdiscountmny().toString().length() > 16) {
			throw new ValidationException(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("40060301",
					"UPP40060301-000092")/*
			 * @res "折扣额不能过16位"
			 */);
		}
		// 辅数量不为空，辅单位也不能为空
		if (getNpacknumber() != null) {
			if (getCpackunitid() == null || getCpackunitid().length() == 0)
				throw new ValidationException(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("40060301",
						"UPP40060301-000093")/* @res "有辅数量时，应有辅单位." */);
		}
	}

	/**
	 * 获取v30增加的所有字段。 创建日期：(2004-2-19 9:36:27)
	 * 
	 * @return nc.vo.so.so001.SOField[]
	 */
	public static SOField[] getAddFields() {
		SOField[] fields1 = getSoSaleOrderBAddFields();
		SOField[] fields2 = getSoSaleExecuteAddFields();
		int count = 0;
		if (fields1 != null)
			;
		count += fields1.length;
		if (fields2 != null)
			;
		count += fields2.length;
		if (count <= 0)
			return null;
		SOField[] refields = new SOField[count];
		if (fields1 != null) {
			System.arraycopy(fields1, 0, refields, 0, fields1.length);
		}
		if (fields2 != null) {
			System.arraycopy(fields2, 0, refields, fields1 == null ? 0 : fields1.length, fields2.length);
		}
		return refields;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-3-1 13:06:14)
	 * 
	 * @return java.util.HashMap
	 */
	public java.util.HashMap getArrHs() {

		if (arrhs == null) {
			String[] names = getAttributeNames();
			if (names == null || names.length <= 0)
				return arrhs;
			arrhs = new java.util.HashMap(300);
			for (int i = 0, loop = names.length; i < loop; i++) {
				arrhs.put(names[i], new Integer(i));
			}
		}
		return arrhs;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-2-18 17:14:42)
	 * 
	 * @return nc.vo.so.so001.SOField[]
	 */
	public static SOField[] getSoSaleExecuteAddFields() {
		// v30 so_saleexecute
		/*
		 * "ntalplconsigmny", // 已计划（发货）金额 "ntaltransnum",//累计运输数量
		 * "ntalbalancemny",//累计结算金额 "ntranslossnum",//运输货损数量
		 * "biftransfinish",//运输结束标志 "dlastconsigdate",//最近一次发货日期
		 * "dlasttransdate",//最近一次运输日期 "dlastoutdate",//最近一次出库日期
		 * "dlastinvoicedt",//最近一次开票日期 "dlastpaydate"//最近一次回款日期
		 */

		if (addSaleExecuteFields == null) {
			
			SOField[] addSaleExecuteFields_t = new SOField[52]; 
			
			SOField sofield = new SOField();
			sofield.setVoname("tlastarrangetime");
			sofield.setDatabasename("tlastarrangetime");
			sofield.setUftype(SODataDesc.UFDATETIME);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[0] = sofield;

			sofield = new SOField();
			sofield.setVoname("ntaltransnum");
			sofield.setDatabasename("ntaltransnum");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[1] = sofield;

			sofield = new SOField();
			sofield.setVoname("carrangepersonid");
			sofield.setDatabasename("carrangepersonid");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[2] = sofield;

			sofield = new SOField();
			sofield.setVoname("barrangedflag");
			sofield.setDatabasename("barrangedflag");
			sofield.setUftype(SODataDesc.UFBOOLEAN);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[3] = sofield;

			sofield = new SOField();
			sofield.setVoname("ntalbalancemny");
			sofield.setDatabasename("ntalbalancemny");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[4] = sofield;

			sofield = new SOField();
			sofield.setVoname("narrangemonum");
			sofield.setDatabasename("narrangemonum");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[5] = sofield;

			sofield = new SOField();
			sofield.setVoname("ntranslossnum");
			sofield.setDatabasename("ntranslossnum");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[6] = sofield;

			sofield = new SOField();
			sofield.setVoname("biftransfinish");
			sofield.setDatabasename("biftransfinish");
			sofield.setUftype(SODataDesc.UFBOOLEAN);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[7] = sofield;

			sofield = new SOField();
			sofield.setVoname("dlastconsigdate");
			sofield.setDatabasename("dlastconsigdate");
			sofield.setUftype(SODataDesc.UFDATE);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[8] = sofield;

			sofield = new SOField();
			sofield.setVoname("dlasttransdate");
			sofield.setDatabasename("dlasttransdate");
			sofield.setUftype(SODataDesc.UFDATE);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[9] = sofield;

			sofield = new SOField();
			sofield.setVoname("dlastoutdate");
			sofield.setDatabasename("dlastoutdate");
			sofield.setUftype(SODataDesc.UFDATE);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[10] = sofield;

			sofield = new SOField();
			sofield.setVoname("dlastinvoicedt");
			sofield.setDatabasename("dlastinvoicedt");
			sofield.setUftype(SODataDesc.UFDATE);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[11] = sofield;

			sofield = new SOField();
			sofield.setVoname("dlastpaydate");
			sofield.setDatabasename("dlastpaydate");
			sofield.setUftype(SODataDesc.UFDATE);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[12] = sofield;

			// /////////////////////////////////////////

			sofield = new SOField();
			sofield.setVoname("vdef7");
			sofield.setDatabasename("vdef7");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[13] = sofield;

			sofield = new SOField();
			sofield.setVoname("vdef8");
			sofield.setDatabasename("vdef8");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[14] = sofield;

			sofield = new SOField();
			sofield.setVoname("vdef9");
			sofield.setDatabasename("vdef9");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[15] = sofield;

			sofield = new SOField();
			sofield.setVoname("vdef10");
			sofield.setDatabasename("vdef10");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[16] = sofield;

			sofield = new SOField();
			sofield.setVoname("vdef11");
			sofield.setDatabasename("vdef11");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[17] = sofield;

			sofield = new SOField();
			sofield.setVoname("vdef12");
			sofield.setDatabasename("vdef12");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[18] = sofield;

			sofield = new SOField();
			sofield.setVoname("vdef13");
			sofield.setDatabasename("vdef13");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[19] = sofield;

			sofield = new SOField();
			sofield.setVoname("vdef14");
			sofield.setDatabasename("vdef14");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[20] = sofield;

			sofield = new SOField();
			sofield.setVoname("vdef15");
			sofield.setDatabasename("vdef15");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[21] = sofield;

			sofield = new SOField();
			sofield.setVoname("vdef16");
			sofield.setDatabasename("vdef16");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[22] = sofield;

			sofield = new SOField();
			sofield.setVoname("vdef17");
			sofield.setDatabasename("vdef17");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[23] = sofield;

			sofield = new SOField();
			sofield.setVoname("vdef18");
			sofield.setDatabasename("vdef18");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[24] = sofield;

			sofield = new SOField();
			sofield.setVoname("vdef19");
			sofield.setDatabasename("vdef19");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[25] = sofield;

			sofield = new SOField();
			sofield.setVoname("vdef20");
			sofield.setDatabasename("vdef20");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[26] = sofield;

			// /////////////////////////////////////////

			sofield = new SOField();
			sofield.setVoname("pk_defdoc1");
			sofield.setDatabasename("pk_defdoc1");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[27] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc2");
			sofield.setDatabasename("pk_defdoc2");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[28] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc3");
			sofield.setDatabasename("pk_defdoc3");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[29] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc4");
			sofield.setDatabasename("pk_defdoc4");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[30] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc5");
			sofield.setDatabasename("pk_defdoc5");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[31] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc6");
			sofield.setDatabasename("pk_defdoc6");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[32] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc7");
			sofield.setDatabasename("pk_defdoc7");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[33] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc8");
			sofield.setDatabasename("pk_defdoc8");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[34] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc9");
			sofield.setDatabasename("pk_defdoc9");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[35] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc10");
			sofield.setDatabasename("pk_defdoc10");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[36] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc11");
			sofield.setDatabasename("pk_defdoc11");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[37] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc12");
			sofield.setDatabasename("pk_defdoc12");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[38] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc13");
			sofield.setDatabasename("pk_defdoc13");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[39] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc14");
			sofield.setDatabasename("pk_defdoc14");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[40] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc15");
			sofield.setDatabasename("pk_defdoc15");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[41] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc16");
			sofield.setDatabasename("pk_defdoc16");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[42] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc17");
			sofield.setDatabasename("pk_defdoc17");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[43] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc18");
			sofield.setDatabasename("pk_defdoc18");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[44] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc19");
			sofield.setDatabasename("pk_defdoc19");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[45] = sofield;

			sofield = new SOField();
			sofield.setVoname("pk_defdoc20");
			sofield.setDatabasename("pk_defdoc20");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[46] = sofield;

			sofield = new SOField();
			sofield.setVoname("narrangescornum");
			sofield.setDatabasename("narrangescornum");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[47] = sofield;

			sofield = new SOField();
			sofield.setVoname("narrangepoapplynum");
			sofield.setDatabasename("narrangepoapplynum");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[48] = sofield;

			sofield = new SOField();
			sofield.setVoname("narrangetoornum");
			sofield.setDatabasename("narrangetoornum");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[49] = sofield;

			sofield = new SOField();
			sofield.setVoname("norrangetoapplynum");
			sofield.setDatabasename("norrangetoapplynum");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[50] = sofield;
			
			sofield = new SOField();
			sofield.setVoname("narrangepoordernum");
			sofield.setDatabasename("narrangepoordernum");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleexecute");
			addSaleExecuteFields_t[51] = sofield;

			addSaleExecuteFields = addSaleExecuteFields_t;
		}
		return addSaleExecuteFields;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2004-2-18 17:14:42)
	 * 
	 * @return nc.vo.so.so001.SOField[]
	 */
	public static SOField[] getSoSaleOrderBAddFields() {
		// v30 so_saleorder_b
		/*
		 * "cconsigncorpid",// 发货公司id "nreturntaxrate", //出口退税率
		 * "creccalbodyid",//收货库存组织id "crecwareid",// 收货仓库id
		 * "bdericttrans",//是否直运 "tconsigntime", //发货时间 "tdelivertime",//到货时间
		 * "bsafeprice",//是否参与价保 "ntaldcnum", //已参与价保主数量
		 * "nasttaldcnum",//已参与价保辅数量 "ntaldcmny", //价保金额 "breturnprofit", //
		 * 是否参与返利 "nretprofnum", //已参与返利主数量 "nastretprofnum",//已参与返利辅数量
		 * "nretprofmny", //返利金额 "cpricepolicyid", //价格政策ID
		 * "cpriceitemid",//价格项目ID "cpriceitemtable",//价目表id
		 * "cpricecalproc",//价格计算过程id "cquoteunitid", //报价计量单位id
		 * "nquoteunitnum", // 报价单位数量 "norgqttaxprc", //报价单位含税单价 "norgqtprc",
		 * //报价单位无税单价 "norgqttaxnetprc", //报价单位含税净价 "norgqtnetprc", //报价单位无税净价
		 * "nqttaxnetprc", //报价单位本币含税净价 "nqtnetprc",//报价单位本币无税净价
		 * "nqttaxprc",//报价单位本币含税单价 "nqtprc",//报价单位本币无税单价 "cprolineid",//生产线id
		 * "crecaddrnode", //收货地点id "cinventoryid1","发货公司的存货管理档案"
		 */
		if (addSaleOrderBFields == null) {
			// SOField[] addSaleOrderBFields_t = new SOField[40];
			ArrayList<SOField> sofields = new ArrayList();

			SOField sofield = new SOField();
			sofield.setVoname("cconsigncorpid");
			sofield.setDatabasename("cconsigncorpid");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("nreturntaxrate");
			sofield.setDatabasename("nreturntaxrate");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("creccalbodyid");
			sofield.setDatabasename("creccalbodyid");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("crecwareid");
			sofield.setDatabasename("crecwareid");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("bdericttrans");
			sofield.setDatabasename("bdericttrans");
			sofield.setUftype(SODataDesc.UFBOOLEAN);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("tconsigntime");
			sofield.setDatabasename("tconsigntime");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("tdelivertime");
			sofield.setDatabasename("tdelivertime");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("bsafeprice");
			sofield.setDatabasename("bsafeprice");
			sofield.setUftype(SODataDesc.UFBOOLEAN);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("ntaldcnum");
			sofield.setDatabasename("ntaldcnum");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("nasttaldcnum");
			sofield.setDatabasename("nasttaldcnum");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("ntaldcmny");
			sofield.setDatabasename("ntaldcmny");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("breturnprofit");
			sofield.setDatabasename("breturnprofit");
			sofield.setUftype(SODataDesc.UFBOOLEAN);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("nretprofnum");
			sofield.setDatabasename("nretprofnum");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("nastretprofnum");
			sofield.setDatabasename("nastretprofnum");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("nretprofmny");
			sofield.setDatabasename("nretprofmny");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("cpricepolicyid");
			sofield.setDatabasename("cpricepolicyid");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("cpriceitemid");
			sofield.setDatabasename("cpriceitemid");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("cpriceitemtable");
			sofield.setDatabasename("cpriceitemtable");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("cpricecalproc");
			sofield.setDatabasename("cpricecalproc");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("cquoteunitid");
			sofield.setDatabasename("cquoteunitid");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("nquoteunitnum");
			sofield.setDatabasename("nquoteunitnum");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("norgqttaxprc");
			sofield.setDatabasename("norgqttaxprc");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("norgqtprc");
			sofield.setDatabasename("norgqtprc");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("norgqttaxnetprc");
			sofield.setDatabasename("norgqttaxnetprc");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("norgqtnetprc");
			sofield.setDatabasename("norgqtnetprc");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("nqttaxnetprc");
			sofield.setDatabasename("nqttaxnetprc");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("nqtnetprc");
			sofield.setDatabasename("nqtnetprc");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("nqttaxprc");
			sofield.setDatabasename("nqttaxprc");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("nqtprc");
			sofield.setDatabasename("nqtprc");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("cprolineid");
			sofield.setDatabasename("cprolineid");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("crecaddrnode");
			sofield.setDatabasename("crecaddrnode");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("cinventoryid1");
			sofield.setDatabasename("cinventoryid1");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("cchantypeid");
			sofield.setDatabasename("cchantypeid");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("nqtorgprc");
			sofield.setDatabasename("nqtorgprc");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("nqtorgtaxprc");
			sofield.setDatabasename("nqtorgtaxprc");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("nqtscalefactor");
			sofield.setDatabasename("nquoteunitrate");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("nqtorgtaxnetprc");
			sofield.setDatabasename("nqtorgtaxnetprc");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("nqtorgnetprc");
			sofield.setDatabasename("nqtorgnetprc");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("clargessrowno");
			sofield.setDatabasename("clargessrowno");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);

			sofield = new SOField();
			sofield.setVoname("bbindflag");
			sofield.setDatabasename("bbindflag");
			sofield.setUftype(SODataDesc.UFBOOLEAN);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);
			
			// PTA销售二开 ， 设置持久化到数据库的字段
			// add by river for 2012-07-17
			// start .. 
			
//			"saleinvoiceid", // 销售发票ID
			sofield = new SOField();
			sofield.setVoname("saleinvoiceid");
			sofield.setDatabasename("saleinvoiceid");
			sofield.setUftype(SODataDesc.STRING);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);
			
//			"numof" , // 件数
			sofield = new SOField();
			sofield.setVoname("numof");
			sofield.setDatabasename("numof");
			sofield.setUftype(SODataDesc.INTEGER);
			sofield.setDatabasetype(java.sql.Types.INTEGER);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);
			
//			"lastingprice" , // 挂牌价
			sofield = new SOField();
			sofield.setVoname("lastingprice");
			sofield.setDatabasename("lastingprice");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);
			
//			"settlementprice" , // 结算价
			sofield = new SOField();
			sofield.setVoname("settlementprice");
			sofield.setDatabasename("settlementprice");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);
			
//			"deliverydate" , // 提货截止日期
			sofield = new SOField();
			sofield.setVoname("deliverydate");
			sofield.setDatabasename("deliverydate");
			sofield.setUftype(SODataDesc.UFDATE);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);
			
//			"settlementdate" , //挂结差结算日期
			sofield = new SOField();
			sofield.setVoname("settlementdate");
			sofield.setDatabasename("settlementdate");
			sofield.setUftype(SODataDesc.UFDATE);
			sofield.setDatabasetype(java.sql.Types.CHAR);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);
			
//			"lssubprice" // 挂结价差
			sofield = new SOField();
			sofield.setVoname("lssubprice");
			sofield.setDatabasename("lssubprice");
			sofield.setUftype(SODataDesc.UFDOUBLE);
			sofield.setDatabasetype(java.sql.Types.DECIMAL);
			sofield.setTablename("so_saleorder_b");
			sofields.add(sofield);
			
			// .. end

			sofields.addAll(Arrays.asList(getPluginFields()));

			addSaleOrderBFields = sofields.toArray(new SOField[0]);

		}
		return addSaleOrderBFields;
	}

	/** **********与库存硬锁定相关的属性*********** */

	// 前台环境变量
	private ClientLink clientLink;

	public ClientLink getClientLink() {
		return clientLink;
	}

	public void setClientLink(ClientLink cl) {
		clientLink = cl;
	}

	//	
	// //表头的业务类型
	// private String billtype;
	//	
	// public String getBillType(){
	// return billtype;
	// }
	//	
	// public void setBillType(String bt){
	// billtype = bt;
	// }

	/**
	 * 根类Object的方法,克隆这个VO对象。
	 * 
	 * 创建日期：(2004-3-18)
	 */
	public int compareTo(java.lang.Object obj) {
		if (obj == null || obj.getClass() != SaleorderBVO.class)
			return -1;

		SaleorderBVO combvo = (SaleorderBVO) obj;
		return this.getNrowno().compareTo(combvo.getNrowno());
	}

	/**
	 * 取得整单折扣
	 * 
	 * @return UFDouble
	 */
	public UFDouble getDiscount() {
		return getNdiscountrate();
	}

	/**
	 * 取得预订单订单表体存货id
	 */
	public String getInventory() {
		return getCinventoryid();
	}

	/**
	 * 取得单品折扣
	 * 
	 * @return UFDouble
	 */
	public UFDouble getItemDiscount() {
		return getNitemdiscountrate();
	}

	/**
	 * 取得本币含税净价
	 * 
	 * @return UFDouble
	 */
	public UFDouble getTaxNetPrice() {
		return getNtaxnetprice();
	}

	/** **********与库存硬锁定相关的属性*********** */

	public Object getEqualValueToDownByRule(String myBillType, String downBillType, String sMyKey) {
		if (sMyKey.equals("nnumber")) {
			return getNnumber();
		} else if (sMyKey.equals("ccurrencytypeid")) {
			return getCcurrencytypeid();
		} else if (sMyKey.equals("noriginalcurnetprice")) {
			return getNoriginalcurnetprice();
		} else if (sMyKey.equals("noriginalcurmny")) {
			return getNoriginalcurmny();
		} else if (sMyKey.equals("noriginalcurtaxnetprice")) {
			return getNoriginalcurtaxnetprice();
		} else if (sMyKey.equals("noriginalcursummny")) {
			return getNoriginalcursummny();
		}

		return null;
	}

	public String getCorpPk() {
		return getPkcorp();
	}

	public String getCurrTypePk() {
		return getCcurrencytypeid();
	}

	public Object getEqualValueToUpByRule(String upBillType, String myBillType) {

		return this.getCsourcebillbodyid();
	}

	public Object getEqualValueToUpByRule(String upBillType, String myBillType, String myKey) {

		if (myKey.equals("nnumber")) {
			return getNnumber();
		} else if (myKey.equals("ccurrencytypeid")) {
			return getCcurrencytypeid();
		} else if (myKey.equals("noriginalcurnetprice")) {
			return getNoriginalcurnetprice();
		} else if (myKey.equals("noriginalcurmny")) {
			return getNoriginalcurmny();
		} else if (myKey.equals("noriginalcurtaxnetprice")) {
			return getNoriginalcurtaxnetprice();
		} else if (myKey.equals("noriginalcursummny")) {
			return getNoriginalcursummny();
		}

		return null;

	}

	public void setEqualValueByUpBill(String upBillType, String myBillType, String myOutputKey,
			Object equalValueToDownByRule) {
		if (myOutputKey.equals("noriginalcurmny")) {
			this.setNoriginalcurmny((UFDouble) equalValueToDownByRule);
		} else if (myOutputKey.equals("noriginalcursummny")) {
			this.setNoriginalcursummny((UFDouble) equalValueToDownByRule);
		}

	}

	public Object getEqualValueToDownByRule(String upBillType, String myBillType) {
		return this.getCorder_bid();
	}

	public String getCbomver() {
		return cbomver;
	}

	public void setCbomver(String cbomver) {
		this.cbomver = cbomver;
	}

	public String getIbomlevel() {
		return ibomlevel;
	}

	public void setIbomlevel(String ibomlevel) {
		this.ibomlevel = ibomlevel;
	}

	public String getIsbomenable() {
		return isbomenable;
	}

	public void setIsbomenable(String isbomenable) {
		this.isbomenable = isbomenable;
	}

	public String getIsbomimag() {
		return isbomimag;
	}

	public void setIsbomimag(String isbomimag) {
		this.isbomimag = isbomimag;
	}

	public String getIsbominv() {
		return isbominv;
	}

	public void setIsbominv(String isbominv) {
		this.isbominv = isbominv;
	}

	public String getIsbomtoord() {
		return isbomtoord;
	}

	public void setIsbomtoord(String isbomtoord) {
		this.isbomtoord = isbomtoord;
	}

	public UFDouble getNarrangepurordernum() {
		Object value = getAttributeValue("narrangepurordernum");
		return m_SVODataUtils.getUFDouble(value);
	}

	public void setNarrangepurordernum(UFDouble value) {
		setAttributeValue("narrangepurordernum", value);
	}

	/**
	 * 累计安排采购订单
	 */
	public void setNarrangepoordernum(UFDouble value) {
		setAttributeValue("narrangepoordernum", value);
	}
	
	/**
	 * 累计安排采购订单
	 */
	public UFDouble getNarrangepoordernum() {
		Object value = getAttributeValue("narrangepoordernum");
		if (value==null)
			return UFDouble.ZERO_DBL;
		return m_SVODataUtils.getUFDouble(value);
	}
	
	public UFDouble getNcanconvnum() {
		Object value = getAttributeValue("ncanconvnum");
		return m_SVODataUtils.getUFDouble(value);
	}

	public void setNcanconvnum(UFDouble value) {
		setAttributeValue("ncanconvnum", value);
	}

	/**
	 * 询价含税净价 获得属性<nqtorgtaxnetprc>的值。
	 * 
	 * @return 返回 nqtorgtaxnetprc。
	 */
	public UFDouble getNqtorgtaxnetprc() {
		Object value = getAttributeValue("nqtorgtaxnetprc");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 
	 * 给属性<nqtorgtaxnetprc>赋值
	 * 
	 * @param value
	 *            要设置的 nqtorgtaxnetprc。
	 */
	public void setNqtorgtaxnetprc(UFDouble value) {
		setAttributeValue("nqtorgtaxnetprc", value);
	}

	/**
	 * 询价无税净价 获得属性<nqtorgnetprc>的值。
	 * 
	 * @return 返回 nqtorgnetprc。
	 */
	public UFDouble getNqtorgnetprc() {
		Object value = getAttributeValue("nqtorgnetprc");
		return m_SVODataUtils.getUFDouble(value);
	}

	/**
	 * 给属性<nqtorgnetprc>赋值
	 * 
	 * @param value
	 *            要设置的 nqtorgnetprc。
	 */
	public void setNqtorgnetprc(UFDouble value) {
		setAttributeValue("nqtorgnetprc", value);
	}

	public UFBoolean getBsquareendflag() {
		Object value = getAttributeValue("bsquareendflag");
		return m_SVODataUtils.getUFBoolean(value);
	}

	public void setBsquareendflag(UFBoolean value) {
		setAttributeValue("bsquareendflag", value);
	}

	/**
	 * 返回可以生成的单句类型 对于补货生成的单据类型前面用前缀X_+生成的单据类型 对于直运生成的单据类型前面用前缀Y_+生成的单据类型
	 */
	public ArrayList getProduceBill() {
		ArrayList list = new ArrayList();
		// 直运安排采购
		if ("Z".equals(myhead.getVerifyRule())) {
			list.add(ISourceAttribute.Prefix_Trans_PU);
		}
		// 直运安排调拨
		else if (getBdericttrans() != null && getBdericttrans().booleanValue()) {
			list.add(ISourceAttribute.Prefix_Trans_TO);
		}
		// 补货安排
		else if ((getCconsigncorpid() == null) || (getCconsigncorpid().equals(getPkcorp()))) {
			list.add("X_" + SaleBillType.PurchaseOrder);
			list.add("X_" + SaleBillType.PurchasePray);
			list.add("X_" + SaleBillType.TransferApplyItem);
			list.add("X_" + SaleBillType.TransferOrderItem);
			list.add("X_" + ScmConst.SC_Order);
			list.add("X_" + ScmConst.MM_Order);
		}

		return list;
	}

	private SaleorderHVO myhead;

	public void setMyHead(SaleorderHVO hvo) {
		myhead = hvo;
	}

	/**
	 * 检查当前行是否满足补货直运要求
	 * 
	 * @param sourceRedunVO
	 * @return
	 */
	public boolean checkItem4BillRedun(ISourceRedunVO sourceRedunVO) {

		// 补货安排――只查询发货公司为订单公司，没有直运标记，非直运销售采购核算规则
		if (sourceRedunVO.getOperateType() == ISourceRedunVO.INDIRECT) {
			if ((getAttributeValue("isbominv") != null)
					|| (((getCconsigncorpid() == null) || (getCconsigncorpid().equals(getPkcorp())))
							&& (getBdericttrans() == null || !getBdericttrans().booleanValue()) 
							&& (!"Z".equals(myhead.getVerifyRule()))
					    )
				)
				return true;
		}
		// 直运
		else if (sourceRedunVO.getOperateType() == ISourceRedunVO.DIRECT) {
			//BOM仅支持补货安排
			if (getAttributeValue("isbominv") != null) {
				return false;
			}
			//不指定生成下游单据类型，直接返回true
			else if (sourceRedunVO.getBillTpye() == null) {
				if ("Z".equals(myhead.getVerifyRule()))
					return true;
				if (getBdericttrans() != null && getBdericttrans().booleanValue())
					return true;
			}
			// //直运安排采购――核算规则为直运销售采购
			else if ("20".equals(sourceRedunVO.getBillTpye()) || "21".equals(sourceRedunVO.getBillTpye())) {
				if ("Z".equals(myhead.getVerifyRule()))
					return true;
			}
			// //直运安排调拨――有直运标记
			else if (("5A".equals(sourceRedunVO.getBillTpye()) || "5X".equals(sourceRedunVO.getBillTpye()))
					&& (getBdericttrans() != null && getBdericttrans().booleanValue()))
				return true;
		}

		return false;
	}

	/**
	 * add by fengjb V55 销售订单关闭管理增加结算关闭
	 */
	// 出库未签字数量
	public UFDouble getNoutstorenotauditnumber() {
		Object oValue = getAttributeValue("noutstorenotauditnumber");
		return SmartVODataUtils.getUFDouble(oValue);
	}

	public void setNoutstorenotauditnumber(UFDouble noutstorenotauditnumber) {
		setAttributeValue("noutstorenotauditnumber", noutstorenotauditnumber);
	}

	// 未传确认应收数量
	public UFDouble getNoutnotchecknumber() {
		Object oValue = getAttributeValue("noutnotchecknumber");
		return SmartVODataUtils.getUFDouble(oValue);
	}

	public void setNoutnotchecknumber(UFDouble noutnotchecknumber) {
		setAttributeValue("noutnotchecknumber", noutnotchecknumber);
	}

	// 途损单未审核量
	public UFDouble getNwaylossnotauditnumber() {
		Object oValue = getAttributeValue("nwaylossnotauditnumber");
		return SmartVODataUtils.getUFDouble(oValue);
	}

	public void setNwaylossnotauditnumber(UFDouble nwaylossnotauditnumber) {
		setAttributeValue("nwaylossnotauditnumber", nwaylossnotauditnumber);
	}

	// 未传存货核算数量
	public UFDouble getNcalnotnumber() {
		Object oValue = getAttributeValue("ncalnotnumber");
		return SmartVODataUtils.getUFDouble(oValue);
	}

	public void setNcalnotnumber(UFDouble ncalnotnumber) {
		setAttributeValue("ncalnotnumber", ncalnotnumber);
	}

	// 业务类型
	public String getCbiztype() {
		return (String) getAttributeValue("cbiztype");
	}

	public void setCbiztype(String cbiztype) {
		setAttributeValue("cbiztype", cbiztype);
	}

	// 公司
	public String getPk_corp() {
		return (String) getAttributeValue("pk_corp");
	}

	public void setPk_corp(String pk_corp) {
		setAttributeValue("pk_corp", pk_corp);
	}

	// 累计出库数量
	public UFDouble getNtotaloutnumber() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("ntotaloutnumber"));
	}

	public void setNtotaloutnumber(UFDouble ntotaloutnumber) {
		setAttributeValue("ntotaloutnumber", ntotaloutnumber);
	}

	// 累计传确认应收 累计出库对冲 累计传存货核 是否结算关闭 算已存在
	// 累计开票数量
	public UFDouble getNtotalinvoicenum() {
		return SmartVODataUtils.getUFDouble(getAttributeValue("ntotalinvoicenum"));
	}

	public void setNtotalinvoicenum(UFDouble ntotalinvoicenum) {
		setAttributeValue("ntotalinvoicenum", ntotalinvoicenum);
	}

	// 结算单据类型
	public int getBalbilltype() {
		Object oValue = getAttributeValue("balbilltype");
		return SmartVODataUtils.getInteger(oValue);
	}

	public void setBalbilltype(int balbilltype) {
		setAttributeValue("balbilltype", balbilltype);
	}

	// 是否为先货后票流程
	public UFBoolean getIsOutFirst() {
		Object oValue = getAttributeValue("isoutfirst");
		return SmartVODataUtils.getUFBoolean(oValue);
	}

	public void setIsOutFirst(UFBoolean isoutfirst) {
		setAttributeValue("isoutfirst", isoutfirst);
	}

	private static SOField[] pluginfields = new SOField[0];

	public static SOField[] getPluginFields() {
		// 支持二次开发VO扩展
		try {
			SmartFieldMeta[] metas = ScmPluginXML.getInstance().getExtSmartFieldMetas("so", null,
					SaleorderBVO.class.getName());

			if (metas != null && metas.length > 0) {
				ArrayList<SOField> fields = new ArrayList();

				for (SmartFieldMeta mt : metas) {
					SOField sofield = new SOField();
					sofield.setVoname(mt.getName());
					// 同voname dmo使用时判断
					sofield.setDatabasename(mt.getName());
			
					sofield.setTablename("so_saleorder_b");
					
					// 使用smart类型设置
					sofield.setUftype(mt.getType());
					sofield.setDatabasetype(mt.getDbType());

					fields.add(sofield);
				}
				
				pluginfields = fields.toArray(new SOField[0]);

			}

		} catch (Exception e) {
			//
		}

		return pluginfields;

	}

	public FieldDBValidateVO[] getFieldDBValidateVOs() {
		return	new	FieldDBValidateVO[]{
			new	FieldDBValidateVO(
				AddressField.class,
				new	String[]{nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0000642")/*@res "到货地址"*/},
				new	String[]{getVreceiveaddress()}
			),
			new	FieldDBValidateVO(
				DefField.class,
				new	String[]{nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("SCMCOMMON","UPPSCMCommon-000330")/*@res "自定义项1"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("SCMCOMMON","UPPSCMCommon-000332")/*@res "自定义项2"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("SCMCOMMON","UPPSCMCommon-000333")/*@res "自定义项3"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("SCMCOMMON","UPPSCMCommon-000334")/*@res "自定义项4"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("SCMCOMMON","UPPSCMCommon-000335")/*@res "自定义项5"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("SCMCOMMON","UPPSCMCommon-000336")/*@res "自定义项6"*/},
				new	String[]{getVdef1(),getVdef2(),getVdef3(),getVdef4(),getVdef5(),getVdef6()}
			),
			new	FieldDBValidateVO(
				DiscountRateField.class,
				new	String[]{nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0002289")/*@res "整单扣率"*/
					,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0000790")/*@res "扣率"*/},
				new	UFDouble[]{getNdiscountrate(),getNitemdiscountrate()}
			),
			new	FieldDBValidateVO(
				FreeField.class,
				new	String[]{nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0003330")/*@res "自由项1"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0003333")/*@res "自由项2"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0003335")/*@res "自由项3"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0003337")/*@res "自由项4"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0003339")/*@res "自由项5"*/},
				new	String[]{getVfree1(),getVfree2(),getVfree3(),getVfree4(),getVfree5()}
			),
			new	FieldDBValidateVO(
				MemoField.class,
				new	String[]{nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0001376")/*@res "备注"*/},
				new	String[]{getFrownote()}
			),
			new	FieldDBValidateVO(
				MoneyField.class,
				new	String[]{
					nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0000926")/*@res "原币金额"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0000922")/*@res "原币税额"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0000902")/*@res "原币价税合计"*/,
					nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0002615")/*@res "本币金额"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0002613")/*@res "本币税额"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0002594")/*@res "本币价税合计"*/
					},
				new	UFDouble[]{
					getNoriginalcurmny(),getNoriginalcurtaxmny(),getNoriginalcursummny(),
					getNmny(),getNtaxmny(),getNsummny()}
			),
			new	FieldDBValidateVO(
				NumField.class,
				new	String[]{
					nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0002282")/*@res "数量"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0003971")/*@res "辅数量"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("40060301","UPT40060301-000575")/*@res "报价数量"*/},
				new	UFDouble[]{
					getNnumber(),getNpacknumber(),getNquoteunitnum()}
			),
			new	FieldDBValidateVO(
				PriceField.class,
				new	String[]{
					nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0000741")/*@res "单价"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0000450")/*@res "净单价"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0001160")/*@res "含税单价"*/,nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0000452")/*@res "净含税单价"*/},
				new	UFDouble[]{
					getNoriginalcurprice(),getNoriginalcurnetprice(),getNoriginalcurtaxprice(),getNoriginalcurtaxnetprice()}
			),
			new	FieldDBValidateVO(
				ProduceNumField.class,
				new	String[]{nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0002060")/*@res "批次号"*/},
				new	String[]{getCbatchid()}
			),
			new	FieldDBValidateVO(
				RowNoField.class,
				new	String[]{nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0003389")/*@res "行号"*/},
				new	UFDouble[]{nc.vo.scm.pub.BillRowNoVO.getUFDouble(getCrowno())}
			),
			new	FieldDBValidateVO(
				TaxRateField.class,
				new	String[]{nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0003078")/*@res "税率"*/},
				new	UFDouble[]{getNtaxrate()}
			),
			new	FieldDBValidateVO(
				ToBRateField.class,
				new	String[]{nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("common","UC000-0002092")/*@res "折本汇率"*/},
				new	UFDouble[]{	getNexchangeotobrate()}
			)
		} ;
	}
	public boolean isClosed(){
		if(this.getFrowstatus().intValue()==BillStatus.FINISH){
			return true;
		}else{
			return false;
		}
	}
	
	// PTA销售二开 ， 添加 setter / getter
	// add by river for 2012-07-17
	// start ..
	
//	"saleinvoiceid", // 销售发票ID
	public String getSaleinvoiceid() {
		return (String) getAttributeValue("saleinvoiceid");
	}
	
	public void setSaleinvoiceid(String saleinvoiceid) {
		setAttributeValue("saleinvoiceid", saleinvoiceid);
	}
	
//	"numof" , // 件数
	public Integer getNumof() {
		return (Integer) getAttributeValue("numof");
	}
	
	public void setNumof(Integer numof) {
		setAttributeValue("numof", numof);
	}
	
//	"lastingprice" , // 挂牌价
	public UFDouble getLastingprice() {
		return m_SVODataUtils.getUFDouble(getAttributeValue("lastingprice"));
	}
	
	public void setLastingprice(UFDouble lastingprice) {
		setAttributeValue("lastingprice", lastingprice);
	}
	
//	"settlementprice" , // 结算价
	public UFDouble getSettlementprice() {
		return m_SVODataUtils.getUFDouble(getAttributeValue("settlementprice"));
	}
	
	public void setSettlementprice(UFDouble settlementprice) {
		setAttributeValue("settlementprice", settlementprice);
	}
	
//	"deliverydate" , // 提货截止日期
	public UFDate getDeliverydate() {
		return m_SVODataUtils.getUFDate(getAttributeValue("deliverydate"));
	}
	
	public void setDeliverydate(UFDate deliverydate) {
		setAttributeValue("deliverydate", deliverydate);
	}
	
//	"settlementdate" , //挂结差结算日期
	public UFDate getSettlementdate() {
		return m_SVODataUtils.getUFDate(getAttributeValue("settlementdate"));
	}
	
	public void setSettlementdate(UFDate settlementdate) {
		setAttributeValue("settlementdate", settlementdate);
	}
	
//	"lssubprice" // 挂结价差
	public UFDouble getLssubprice() {
		return m_SVODataUtils.getUFDouble(getAttributeValue("lssubprice"));
	}
	
	public void setLssubprice(UFDouble lssubprice) {
		setAttributeValue("lssubprice", lssubprice);
	}
	
	// .. end

}
