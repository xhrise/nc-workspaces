  /***************************************************************\
  *     The skeleton of this class is generated by an automatic *
  * code generator for NC product. It is based on Velocity.     *
  \***************************************************************/
      	package nc.vo.ehpta.hq010402;
   	
	import java.util.ArrayList;
	import nc.vo.pub.*;
	import nc.vo.pub.lang.*;
	
/**
 * <b> 在此处简要描述此类的功能 </b>
 *
 * <p>
 *     在此处添加此类的描述信息
 * </p>
 *
 * 创建日期:2012-7-10
 * @author ${vmObject.author}
 * @version Your Project 1.0
 */
     public class PrepolicyVO extends SuperVO {
           
             public String def5;
             public String pk_contract;
             public UFDouble prerate;
             public String def2;
             public UFDouble upcomprate;
             public String ts;
             public UFDouble lowcomprate;
             public String def4;
             public Integer dr;
             public String def1;
             public String def3;
             public String pk_prepolicy;
            
             public static final String  DEF5="def5";   
             public static final String  PK_CONTRACT="pk_contract";   
             public static final String  PRERATE="prerate";   
             public static final String  DEF2="def2";   
             public static final String  UPCOMPRATE="upcomprate";   
             public static final String  TS="ts";   
             public static final String  LOWCOMPRATE="lowcomprate";   
             public static final String  DEF4="def4";   
             public static final String  DR="dr";   
             public static final String  DEF1="def1";   
             public static final String  DEF3="def3";   
             public static final String  PK_PREPOLICY="pk_prepolicy";   
      
    
        /**
	   * 属性def5的Getter方法.
	   *
	   * 创建日期:2012-7-10
	   * @return String
	   */
	 public String getDef5() {
		 return def5;
	  }   
	  
     /**
	   * 属性def5的Setter方法.
	   *
	   * 创建日期:2012-7-10
	   * @param newDef5 String
	   */
	public void setDef5(String newDef5) {
		
		def5 = newDef5;
	 } 	  
       
        /**
	   * 属性pk_contract的Getter方法.
	   *
	   * 创建日期:2012-7-10
	   * @return String
	   */
	 public String getPk_contract() {
		 return pk_contract;
	  }   
	  
     /**
	   * 属性pk_contract的Setter方法.
	   *
	   * 创建日期:2012-7-10
	   * @param newPk_contract String
	   */
	public void setPk_contract(String newPk_contract) {
		
		pk_contract = newPk_contract;
	 } 	  
       
        /**
	   * 属性prerate的Getter方法.
	   *
	   * 创建日期:2012-7-10
	   * @return UFDouble
	   */
	 public UFDouble getPrerate() {
		 return prerate;
	  }   
	  
     /**
	   * 属性prerate的Setter方法.
	   *
	   * 创建日期:2012-7-10
	   * @param newPrerate UFDouble
	   */
	public void setPrerate(UFDouble newPrerate) {
		
		prerate = newPrerate;
	 } 	  
       
        /**
	   * 属性def2的Getter方法.
	   *
	   * 创建日期:2012-7-10
	   * @return String
	   */
	 public String getDef2() {
		 return def2;
	  }   
	  
     /**
	   * 属性def2的Setter方法.
	   *
	   * 创建日期:2012-7-10
	   * @param newDef2 String
	   */
	public void setDef2(String newDef2) {
		
		def2 = newDef2;
	 } 	  
       
        /**
	   * 属性upcomprate的Getter方法.
	   *
	   * 创建日期:2012-7-10
	   * @return UFDouble
	   */
	 public UFDouble getUpcomprate() {
		 return upcomprate;
	  }   
	  
     /**
	   * 属性upcomprate的Setter方法.
	   *
	   * 创建日期:2012-7-10
	   * @param newUpcomprate UFDouble
	   */
	public void setUpcomprate(UFDouble newUpcomprate) {
		
		upcomprate = newUpcomprate;
	 } 	  
       
        /**
	   * 属性ts的Getter方法.
	   *
	   * 创建日期:2012-7-10
	   * @return UFDateTime
	   */
	 public String getTs() {
		 return ts;
	  }   
	  
     /**
	   * 属性ts的Setter方法.
	   *
	   * 创建日期:2012-7-10
	   * @param newTs UFDateTime
	   */
	public void setTs(String newTs) {
		
		ts = newTs;
	 } 	  
       
        /**
	   * 属性lowcomprate的Getter方法.
	   *
	   * 创建日期:2012-7-10
	   * @return UFDouble
	   */
	 public UFDouble getLowcomprate() {
		 return lowcomprate;
	  }   
	  
     /**
	   * 属性lowcomprate的Setter方法.
	   *
	   * 创建日期:2012-7-10
	   * @param newLowcomprate UFDouble
	   */
	public void setLowcomprate(UFDouble newLowcomprate) {
		
		lowcomprate = newLowcomprate;
	 } 	  
       
        /**
	   * 属性def4的Getter方法.
	   *
	   * 创建日期:2012-7-10
	   * @return String
	   */
	 public String getDef4() {
		 return def4;
	  }   
	  
     /**
	   * 属性def4的Setter方法.
	   *
	   * 创建日期:2012-7-10
	   * @param newDef4 String
	   */
	public void setDef4(String newDef4) {
		
		def4 = newDef4;
	 } 	  
       
        /**
	   * 属性dr的Getter方法.
	   *
	   * 创建日期:2012-7-10
	   * @return Integer
	   */
	 public Integer getDr() {
		 return dr;
	  }   
	  
     /**
	   * 属性dr的Setter方法.
	   *
	   * 创建日期:2012-7-10
	   * @param newDr Integer
	   */
	public void setDr(Integer newDr) {
		
		dr = newDr;
	 } 	  
       
        /**
	   * 属性def1的Getter方法.
	   *
	   * 创建日期:2012-7-10
	   * @return String
	   */
	 public String getDef1() {
		 return def1;
	  }   
	  
     /**
	   * 属性def1的Setter方法.
	   *
	   * 创建日期:2012-7-10
	   * @param newDef1 String
	   */
	public void setDef1(String newDef1) {
		
		def1 = newDef1;
	 } 	  
       
        /**
	   * 属性def3的Getter方法.
	   *
	   * 创建日期:2012-7-10
	   * @return String
	   */
	 public String getDef3() {
		 return def3;
	  }   
	  
     /**
	   * 属性def3的Setter方法.
	   *
	   * 创建日期:2012-7-10
	   * @param newDef3 String
	   */
	public void setDef3(String newDef3) {
		
		def3 = newDef3;
	 } 	  
       
        /**
	   * 属性pk_prepolicy的Getter方法.
	   *
	   * 创建日期:2012-7-10
	   * @return String
	   */
	 public String getPk_prepolicy() {
		 return pk_prepolicy;
	  }   
	  
     /**
	   * 属性pk_prepolicy的Setter方法.
	   *
	   * 创建日期:2012-7-10
	   * @param newPk_prepolicy String
	   */
	public void setPk_prepolicy(String newPk_prepolicy) {
		
		pk_prepolicy = newPk_prepolicy;
	 } 	  
       
       
    /**
	  * 验证对象各属性之间的数据逻辑正确性.
	  *
	  * 创建日期:2012-7-10
	  * @exception nc.vo.pub.ValidationException 如果验证失败,抛出
	  * ValidationException,对错误进行解释.
	 */
	 public void validate() throws ValidationException {
	
	 	ArrayList errFields = new ArrayList(); // errFields record those null

                                                      // fields that cannot be null.
       		  // 检查是否为不允许空的字段赋了空值,你可能需要修改下面的提示信息:
	
	   		if (pk_prepolicy == null) {
			errFields.add(new String("pk_prepolicy"));
			  }	
	   	
	    StringBuffer message = new StringBuffer();
		message.append("下列字段不能为空:");
		if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append(",");
			message.append(temp[i]);
		}
		throw new NullFieldException(message.toString());
		}
	 }
			   
       
   	/**
	  * <p>取得父VO主键字段.
	  * <p>
	  * 创建日期:2012-7-10
	  * @return java.lang.String
	  */
	public java.lang.String getParentPKFieldName() {
	  	 
	 		return "pk_contract";
	 	
	}   
    
    /**
	  * <p>取得表主键.
	  * <p>
	  * 创建日期:2012-7-10
	  * @return java.lang.String
	  */
	public java.lang.String getPKFieldName() {
	 	  return "pk_prepolicy";
	 	}
    
	/**
      * <p>返回表名称.
	  * <p>
	  * 创建日期:2012-7-10
	  * @return java.lang.String
	 */
	public java.lang.String getTableName() {
				
		return "ehpta_prepolicy";
	}    
    
    /**
	  * 按照默认方式创建构造子.
	  *
	  * 创建日期:2012-7-10
	  */
	public PrepolicyVO() {
			
			   super();	
	  }    
    
            /**
	 * 使用主键进行初始化的构造子.
	 *
	 * 创建日期:2012-7-10
	 * @param newPk_prepolicy 主键值
	 */
	 public PrepolicyVO(String newPk_prepolicy) {
		
		// 为主键字段赋值:
		 pk_prepolicy = newPk_prepolicy;
	
    	}
    
     
     /**
	  * 返回对象标识,用来唯一定位对象.
	  *
	  * 创建日期:2012-7-10
	  * @return String
	  */
	   public String getPrimaryKey() {
				
		 return pk_prepolicy;
	   
	   }

     /**
	  * 设置对象标识,用来唯一定位对象.
	  *
	  * 创建日期:2012-7-10
	  * @param newPk_prepolicy  String    
	  */
	 public void setPrimaryKey(String newPk_prepolicy) {
				
				pk_prepolicy = newPk_prepolicy; 
				
	 } 
           
	  /**
       * 返回数值对象的显示名称.
	   *
	   * 创建日期:2012-7-10
	   * @return java.lang.String 返回数值对象的显示名称.
	   */
	 public String getEntityName() {
				
	   return "ehpta_prepolicy"; 
				
	 } 
} 
