package nc.bs.ic.pub.bill;

/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
 \***************************************************************/

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Vector;

import javax.naming.NamingException;

import nc.bd.accperiod.AccountCalendar;
import nc.bs.bd.b48.StorVSCostBO;
import nc.bs.framework.common.NCLocator;
import nc.bs.ic.pub.GenMethod;
import nc.bs.ic.pub.PriceDMO;
import nc.bs.ic.pub.check.CheckBarcodeDMO;
import nc.bs.ic.pub.check.CheckBusiDMO;
import nc.bs.ic.pub.check.CheckDMO;
import nc.bs.ic.pub.check.CheckInvVendorDMO;
import nc.bs.ic.pub.settlement.SettlementDMO;
import nc.bs.ic.pub.sn.SNDMO;
import nc.bs.ic.pub.vmi.ICSmartToolsDmo;
import nc.bs.pub.SystemException;
import nc.bs.scm.pub.smart.SmartDMO;
import nc.impl.ic.ic001.BatchcodeImpl;
import nc.impl.ic.ic003.StorectlDMO;
import nc.impl.ic.ic008.FixOnhandnumDMO;
import nc.itf.ic.service.IICPub_GeneralBillBO;
import nc.itf.uap.busibean.ISysInitQry;
import nc.jdbc.framework.JdbcSession;
import nc.jdbc.framework.PersistenceManager;
import nc.jdbc.framework.exception.DbException;
import nc.jdbc.framework.generator.SystemTsGenerator;
import nc.vo.ic.ic700.ICDataSet;
import nc.vo.ic.pub.ICConst;
import nc.vo.ic.pub.ICGenVO;
import nc.vo.ic.pub.ScaleSetter;
import nc.vo.ic.pub.bill.BillStatus;
import nc.vo.ic.pub.bill.GeneralBillHeaderVO;
import nc.vo.ic.pub.bill.GeneralBillItemVO;
import nc.vo.ic.pub.bill.GeneralBillVO;
import nc.vo.ic.pub.bill.QryConditionVO;
import nc.vo.ic.pub.bill.QryInfoConst;
import nc.vo.ic.pub.bill.Timer;
import nc.vo.ic.pub.check.VOCheck;
import nc.vo.ic.pub.locator.LocatorVO;
import nc.vo.ic.pub.sn.SerialVO;
import nc.vo.pub.AggregatedValueObject;
import nc.vo.pub.BusinessException;
import nc.vo.pub.VOStatus;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDouble;
import nc.vo.scm.constant.ic.InOutFlag;
import nc.vo.scm.ic.bill.InvVO;
import nc.vo.scm.ic.bill.WhVO;
import nc.vo.scm.ic.exp.ICNumException;
import nc.vo.scm.pub.SCMEnv;

/**
 * 出入库单服务器端业务控制类 作者：张欣
 * 
 * @version 2001-07-17
 * @see 需要参见的其它类
 * @since 从产品的那一个版本，此类被添加进来。（可选）
 * @deprecated该类从产品的那一个版本后，已经被其它类替换。（可选）
 */

public class GeneralBillBO implements IICPub_GeneralBillBO {

  // sn原来的状态、现在的状态 列号
  private final int SN_STA_ORG = 0, SN_STA_NOW = 1;

  /**
   * GeneralHBO 构造子注解。
   */
  public GeneralBillBO() {
    super();
  }

  /**
   * 创建者：余大英 功能：取消签字 参数：
   * 
   * 返回： 例外： 日期：(2001-6-14 14:46:54) 修改日期，修改人，修改原因，注释标志：
   * 
   * @return nc.voAuditBill.ic.pub.bill.InvVO
   * @param sWh
   *            java.lang.String
   * @param sInvID
   *            java.lang.String
   */
  protected ArrayList cancelSignBill(GeneralBillVO voAuditBill)
      throws BusinessException {
    try {
      if (voAuditBill == null)
        throw new BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("4008bill",
                "UPP4008bill-000162")/* @res "VO参数错误。" */);

      GeneralBillHeaderVO voHead = (GeneralBillHeaderVO) voAuditBill
          .getParentVO();
      if (voHead == null)
        throw new BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("4008bill",
                "UPP4008bill-000162")/* @res "VO参数错误。" */);
      
//    二次开发扩展
      nc.bs.scm.plugin.InvokeEventProxy iep =  new nc.bs.scm.plugin.InvokeEventProxy(ICConst.MODULE_IC,voAuditBill.getHeaderVO().getCbilltypecode());
      iep.beforeAction(nc.vo.scm.plugin.Action.UNAUDIT, 
              new GeneralBillVO[]{voAuditBill}, null);

      // 参数准备

      ArrayList alRes = new ArrayList(); // 执行结果

      if (voHead.getDaccountdate() == null)
        throw new BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("4008bill",
                "UPP4008bill-000163")/*
                             * @res
                             * "库房取消签字时发现非法的数据：没有取消签字日期。"
                             */);

      // 出入库单DMO
      GeneralBillDMO dmoBill = getBillDMO();

      // 执行取消签字
      // alRes = cancelSignBills(alP);
      alRes.add(voAuditBill.getHeaderVO().getCgeneralhid());
      alRes.add(dmoBill.cancelSign(voAuditBill));

      freshTs(voAuditBill, voAuditBill.getPrimaryKey());
      
      
//    二次开发扩展
      iep.afterAction(nc.vo.scm.plugin.Action.UNAUDIT, 
              new GeneralBillVO[]{voAuditBill}, null);

      return alRes;
    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }
    return null;
  }

  /**
   * 创建者：王乃军 功能：取消签字
   * 
   * 参数： 返回： 例外： 日期：(2001-6-14 14:46:54) 修改日期，修改人，修改原因，注释标志：
   * 
   * @return nc.vo.ic.pub.bill.InvVO
   * @param sWh
   *            java.lang.String
   * @param sInvID
   *            java.lang.String
   */
  protected ArrayList cancelSignBills(ArrayList alParam)
      throws BusinessException {
    try {
      if (alParam != null && alParam.size() > 0) {
        ArrayList alRet = new ArrayList();
        GeneralBillDMO dmo = getBillDMO();
        for (int i = 0; i < alParam.size(); i++)
          if (alParam.get(i) != null)
            alRet.add(dmo.cancelSign((ArrayList) alParam.get(i)));
          else
            alRet.add(null);
        return alRet;
      }
      return null;
    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }
    return null;
  }

  /**
   * 创建者：韩卫 功能：删除指定的单据条码状态为修改和删除的记录 返回： 例外：检查到其它错误 日期：(2004-4-18 13:52:05)
   * 修改日期，修改人，修改原因，注释标志：
   * 
   * @param voBill
   *            nc.voNewBill.ic.pub.bill.GeneralBillItemVO
   */
  protected void deleteBarCode(GeneralBillItemVO[] voaItem,
      boolean bSaveBarcodeFinal) throws BusinessException {

    if (voaItem == null || voaItem.length == 0)
      return;

    if (bSaveBarcodeFinal) {

      ArrayList alBarCode = new ArrayList();
      for (int i = 0; i < voaItem.length; i++) {
        GeneralBillItemVO itemvo = voaItem[i];
        if (itemvo.getBarCodeVOs() != null
            && itemvo.getBarCodeVOs().length > 0) {
          for (int j = 0; j < itemvo.getBarCodeVOs().length; j++) {
            if (itemvo.getBarCodeVOs()[j] != null
                && (itemvo.getBarCodeVOs()[j].getStatus() == VOStatus.DELETED || itemvo
                    .getBarCodeVOs()[j].getStatus() == VOStatus.UPDATED))
              alBarCode.add(itemvo.getBarCodeVOs()[j]);
          }

        }

      }
      if (alBarCode.size() > 0) {
        nc.bs.ic.pub.bc.BarCodeDMO dmoBill;
        try {
          dmoBill = new nc.bs.ic.pub.bc.BarCodeDMO();
        } catch (Exception e) {
          // 日志异常
          nc.vo.scm.pub.SCMEnv.out(e);
          // 库存组异常抛出规范
          throw nc.bs.ic.pub.GenMethod.handleException(
              e.getMessage(), e);
        }
        dmoBill.deleteArray(alBarCode);
      }
    }
  }

  /**
   * 创建者：韩卫 功能：删除指定的单据条码状态为修改和删除的记录 返回： 例外：检查到其它错误 日期：(2004-4-18 13:52:05)
   * 修改日期，修改人，修改原因，注释标志：
   * 
   * @param voBill
   *            nc.voNewBill.ic.pub.bill.GeneralBillItemVO
   */
  protected void deleteBarCode(GeneralBillVO voNewBill)
      throws BusinessException {

    if (voNewBill == null)
      return;
    GeneralBillItemVO[] voaItem = (GeneralBillItemVO[]) voNewBill
        .getChildrenVO();
    if (voaItem == null || voaItem.length == 0)
      return;

    if (voNewBill.bSaveBarcodeFinal()) {

      ArrayList alBarCode = new ArrayList();
      for (int i = 0; i < voaItem.length; i++) {
        GeneralBillItemVO itemvo = voaItem[i];
        if (itemvo.getBarCodeVOs() != null
            && itemvo.getBarCodeVOs().length > 0) {
          for (int j = 0; j < itemvo.getBarCodeVOs().length; j++) {
            if (itemvo.getBarCodeVOs()[j] != null
                && (itemvo.getBarCodeVOs()[j].getStatus() == VOStatus.DELETED || itemvo
                    .getBarCodeVOs()[j].getStatus() == VOStatus.UPDATED))
              alBarCode.add(itemvo.getBarCodeVOs()[j]);
          }

        }

      }
      if (alBarCode.size() > 0) {
        nc.bs.ic.pub.bc.BarCodeDMO dmoBill;
        try {
          dmoBill = new nc.bs.ic.pub.bc.BarCodeDMO();
        } catch (Exception e) {
          // 日志异常
          nc.vo.scm.pub.SCMEnv.out(e);
          // 库存组异常抛出规范
          throw nc.bs.ic.pub.GenMethod.handleException(
              e.getMessage(), e);
        }
        dmoBill.deleteArray(alBarCode);
      }
    }
  }

  /**
   * 创建者：韩卫 功能：整单删除条码 返回： 例外：检查到其它错误 日期：(2004-4-18 13:52:05)
   * 修改日期，修改人，修改原因，注释标志：
   * 
   * @param voBill
   *            nc.voNewBill.ic.pub.bill.GeneralBillItemVO
   */
  protected void deleteBarCodeAllBill(GeneralBillVO voNewBill)
      throws BusinessException {

    if (voNewBill == null)
      return;
    GeneralBillItemVO[] voaItem = (GeneralBillItemVO[]) voNewBill
        .getChildrenVO();
    if (voaItem == null || voaItem.length == 0)
      return;
    deleteBarcodeBillItems(voaItem);
  }

  /**
   * 创建者：韩卫 功能：删除指定的BillItem对应的条码记录 返回： 例外：检查到其它错误 日期：(2004-4-18 13:52:05)
   * 修改日期，修改人，修改原因，注释标志：
   * 
   * @param voBill
   *            nc.voNewBill.ic.pub.bill.GeneralBillItemVO
   */
  protected void deleteBarcodeBillItems(GeneralBillItemVO[] voaItem)
      throws BusinessException {

    if (voaItem == null || voaItem.length == 0)
      return;
    ArrayList alBarCodeBillItem = new ArrayList();
    GeneralBillItemVO itemvo = null;
    for (int i = 0; i < voaItem.length; i++) {
      itemvo = voaItem[i];
      if (itemvo.getBarCodeVOs() != null
          && itemvo.getBarCodeVOs().length > 0) {
        alBarCodeBillItem.add(itemvo.getCgeneralbid());
      }
    }
    if (alBarCodeBillItem.size() > 0) {
      nc.bs.ic.pub.bc.BarCodeDMO dmoBill;
      try {
        dmoBill = new nc.bs.ic.pub.bc.BarCodeDMO();
      } catch (Exception e) {
        // 日志异常
        nc.vo.scm.pub.SCMEnv.out(e);
        // 库存组异常抛出规范
        throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
      }
      dmoBill.deleteBarcodeByBillItemIDs(alBarCodeBillItem);
    }
  }

  /**
   * 创建者：王乃军 功能： 删除单据 返回：
   * 
   * 例外：检查到其它错误 日期：(2004-4-18 13:52:05) 修改日期，修改人，修改原因，注释标志： 2004-6-8 hanwei
   * 删除动作添加后台日志 由于删除会是多个单据，不适合放在前台添加日志
   * 
   * 
   * @param voDeleteBill
   *            nc.voDeleteBill.ic.pub.bill.GeneralBillVO
   */
  protected void deleteBill(GeneralBillVO voDeleteBill)
      throws BusinessException {
    try {
      // 参数数据合法性检查
      if (voDeleteBill == null)
        throw new BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("4008bill",
                "UPP4008bill-000162")/* @res "VO参数错误。" */);

      GeneralBillHeaderVO voHead = (GeneralBillHeaderVO) voDeleteBill
          .getParentVO();
      if (voHead == null)
        throw new BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("4008bill",
                "UPP4008bill-000162")/* @res "VO参数错误。" */);
      
//    二次开发扩展
      
      nc.bs.scm.plugin.InvokeEventProxy iep = new nc.bs.scm.plugin.InvokeEventProxy(ICConst.MODULE_IC,voDeleteBill.getHeaderVO().getCbilltypecode());
      iep.beforeAction(nc.vo.scm.plugin.Action.DELETE, 
              new GeneralBillVO[]{voDeleteBill}, null);

      // v5 lj 检查是否签字，签字的单据不能删除
      try {
        // 增加对单据状态的检查 and lock
        new CheckBusiDMO().checkBillStatusFor(
            new GeneralBillVO[] { voDeleteBill },
            nc.vo.ic.pub.GenMethod.BillAction.Delete);

        // CheckDMO dmo = new CheckDMO();
        // if (dmo.isBillSign(voDeleteBill)) {
        // String billcode =
        // (String)voDeleteBill.getHeaderValue("vbillcode");
        // throw new
        // BusinessException(NCLangResOnserver.getInstance().getStrByID("4008bill","UPP4008bill-000505")+":"+billcode);
        // }
      } catch (Exception e1) {
        nc.vo.scm.pub.SCMEnv.error(e1);
        throw new BusinessException(e1.getMessage());
      }

      // 置为删除状态
      // 表头
      voHead.setStatus(nc.vo.pub.VOStatus.DELETED);
      GeneralBillItemVO voaBillItemTemp[] = voDeleteBill.getItemVOs(); // 表体
      // 表体行置为删除状态
      for (int item = 0; item < voaBillItemTemp.length; item++)
        voaBillItemTemp[item].setStatus(nc.vo.pub.VOStatus.DELETED);

      // 检查
      // check(voDeleteBill);
      // 执行删除。
      deleteThisBill(voDeleteBill);

      // 修改人:刘家清 修改日期:2007-04-13 修改原因:把条码唯一性和结存检查放到单据保存后
      // 入库时是否检查条码唯一性 出库时是否检查条码结存
      (new CheckBarcodeDMO()).checkBCOnhandAndRepeat(voDeleteBill);
      
//    二次开发扩展
      iep.afterAction(nc.vo.scm.plugin.Action.DELETE, 
              new GeneralBillVO[]{voDeleteBill}, null);

    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }

  }

  /**
   * 创建者：王乃军 功能：调用dmo删除单据， 返回：
   * 
   * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
   * 
   * 
   * @param voDeletedBill
   *            nc.voDeleteBill.ic.pub.bill.GeneralBillVO
   */
  public void deleteThisBill(GeneralBillVO voDeletedBill)
      throws BusinessException {

    try {
      if (voDeletedBill == null || voDeletedBill.getHeaderVO() == null
          || voDeletedBill.getItemVOs() == null
          || voDeletedBill.getItemVOs().length == 0) {
        throw new BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("4008bill",
                "UPP4008bill-000164")/* @res "删除时传入的参数错误！" */);
      }
      
      //更新现存量开始，获取保存前信息
      FixOnhandnumDMO onhanddmo = null;
      try{
        onhanddmo = new FixOnhandnumDMO();
      }catch(Exception e){
        throw GenMethod.handleException(null, e);
      }
      ArrayList lbeforeinvonhand = onhanddmo.updateOnHandBegin(voDeletedBill,ICConst.OnHandUpdateType.Onhand_All);  

      // 重读单据，看看单据是否存在
      GeneralBillHeaderVO voHeader = voDeletedBill.getHeaderVO(); // 表头
      voDeletedBill.setStatus(nc.vo.pub.VOStatus.DELETED);
      String sBillPK = voHeader.getPrimaryKey(); // 单据PK
      GeneralBillItemVO[] voaItem = voDeletedBill.getItemVOs(); // 单据体

      // 删除条码记录必须放在单据删除之前. add by hanwei 2004-03-23
      deleteBarCodeAllBill(voDeletedBill);

      // 如果有子或相关单据 ，不能删除。如 借出单有了还回单，就不能删除了。除非先删子单据。
      String sCorpID = voHeader.getPk_corp(); // 公司ID
      // ===============
      GeneralBillDMO dmoBill = getBillDMO(); // 出入库单 DMO
      // 查关联单据
      Timer t = new Timer();
      t.start();
      // ArrayList alChildrenBill = dmoBill.queryRelatedBillInfo(sBillPK);
      t.stopAndShow("@@--qry rel");
      // 如果有错，抛异常
      // dmoBill.checkBillInfo(alChildrenBill, "本单据有如下相关单据:\n",
      // "\n不能删除。");

      // 货位
      nc.bs.ic.pub.locator.LocatorDMO dmoLoc = new nc.bs.ic.pub.locator.LocatorDMO();
      // 补足货位信息 2003-08-07 ydy
      // if (voDeletedBill!=null && voDeletedBill.getWh()!=null)
      // {
      // Integer isLoc = voDeletedBill.getWh().getIsLocatorMgt();
      // if (isLoc != null && isLoc.intValue() == 1) {
      // if (voDeletedBill.getItemVOs()[0].getLocator() == null) {
      ArrayList alLocsn = getBillDMO().getLocSNInfo(sBillPK);
      if (alLocsn != null && alLocsn.size() > 0) {
        voDeletedBill.setLocators((ArrayList) alLocsn.get(0));
      }
      if (alLocsn != null && alLocsn.size() > 1) {
        voDeletedBill.setSNs((ArrayList) alLocsn.get(1));
      }

      // }
      // }
      // }
      // bb3
      nc.bs.ic.pub.settlement.SettlementDMO dmoStl = new nc.bs.ic.pub.settlement.SettlementDMO();

      // 序列号
      SerialVO[] voasn = null;
      // 表体PK
      String sItemPK = null;
      t.start();
      for (int row = 0; row < voaItem.length; row++) {
        if (voaItem[row] != null) {
          // 设置为删除态
          voaItem[row].setStatus(VOStatus.DELETED);
        }
      }
      // 添加删除SN的操作 hanwei 2003-06-26
      String sMsg = snDelete(voDeletedBill);
      if (sMsg != null && sMsg.length() > 0)
        throw new BusinessException(sMsg);

      t.stopAndShow("@@--sn -- del ");
      // 可能有的业务检查错误信息
      // String sMsg = dmoBill.getSnHintMsg(vEx, vNotEx, vRet, vOut);
      // if (sMsg != null && sMsg.length() > 0)
      // throw new BusinessException(sMsg);
      t.start();
      // 当有数量时才会有货位，删之。
      // if (voaItem[0] != null
      // && (voaItem[0].getNinnum() != null || voaItem[0].getNoutnum() !=
      // null))
      dmoLoc.deleteLocatorsForCopyByBillPK(sBillPK);

      // 删bb3
      dmoStl.deleteBB3ForCopyByBillPK(sBillPK);
      // 删除表体
      dmoBill.deleteItemsForHeader(sBillPK);
      // 删除表头
      dmoBill.deleteHeader(sBillPK);
      t.stopAndShow("@@--del bill");
      // 修改现存量--删除的前提是单据未被修改，所以这里直接用传入的单据。
      // 把表体行的数量取负值
      // ------- clone 以保证不修改参数 --------
      // ydy2004-06-23不用clone ，在modifyOnhandNum中已经clone
      // GeneralBillVO voTempBill = (GeneralBillVO) voDeletedBill.clone();
      // if (voDeletedBill.isQtyFilled()) {
      t.start();
      
//    更新现存量完成，实际更新现存量表
      onhanddmo.updateOnHandEnd(null,voDeletedBill, lbeforeinvonhand,ICConst.OnHandUpdateType.Onhand_All); 
      
//      synchronized (this) {
//        modifyOnhandNum(null, voDeletedBill);
//      }

      t.stopAndShow("@@--del num");
      // }
    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }

  }
  
  public void freshTs(GeneralBillVO[] voBills)
  throws BusinessException {
	  if (null == voBills || 0 == voBills.length)
		  return;
	  for (GeneralBillVO voBill : voBills){
		  if (null != voBill && null != voBill.getHeaderVO() && null != voBill.getHeaderVO().getCgeneralhid())
			  freshTs(voBill,voBill.getHeaderVO().getCgeneralhid());
	  }
  }

  /**
   * 此处插入方法说明。 功能：刷新ts, 参数： 返回： 例外： 日期：(2002-6-4 19:54:51) 修改日期，修改人，修改原因，注释标志：
   * 
   * @return java.lang.String
   * @param sBillPK
   *            java.lang.String
   */
  public void freshTs(GeneralBillVO voBill, String sBillPK)
      throws BusinessException {
    String sBillStatus = null;
    if (voBill == null || voBill.getParentVO() == null
        || voBill.getChildrenVO() == null)
      return;

    ArrayList alTs = null;
    try {
      GeneralBillDMO dmo = getBillDMO();
      alTs = dmo.getTs(sBillPK);
    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }

    // 2005-02-03zhy
    // if (alTs == null || alTs.get(0) == null) {
    if (alTs == null || alTs.size() == 0 || alTs.get(0) == null) {
      throw new BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4008bill", "UPP4008bill-000165")/*
                                         * @res
                                         * "没有得到最新时间戳!"
                                         */);
    }
    // set
    GeneralBillHeaderVO voHead = (GeneralBillHeaderVO) voBill.getParentVO();
    GeneralBillItemVO[] voItems = (GeneralBillItemVO[]) voBill
        .getChildrenVO();
    voHead.setTs((String) alTs.get(0));
    ArrayList alItemTs = null;
    Hashtable ht = new Hashtable();
    for (int i = 1; i < alTs.size(); i++) {
      alItemTs = (ArrayList) alTs.get(i);
      if (alItemTs != null && alItemTs.size() > 1) {
        if (alItemTs.get(0) != null && alItemTs.get(1) != null) {
          ht.put((String) alItemTs.get(0), alItemTs);
        }
      }
    }
    String bid = null;
    nc.vo.pub.lang.UFBoolean ufBFalse = new nc.vo.pub.lang.UFBoolean(false);
    for (int i = 0; i < voItems.length; i++) {
      bid = voItems[i].getCgeneralbid();

      if (ht.containsKey(bid)) {
        alItemTs = (ArrayList) ht.get(bid);
        if (alItemTs != null && alItemTs.size() > 7) {
          voItems[i].setTs((String) alItemTs.get(1));
          voItems[i].setVfirstbillcode((String) alItemTs.get(4));

          if (alItemTs.get(6) != null)
            voItems[i]
                .setListnbarcodenum((nc.vo.pub.lang.UFDouble) alItemTs
                    .get(6));

          if (alItemTs.get(7) == null
              || alItemTs.get(7).toString().trim().length() == 0)
            voItems[i].setBarcodeClose(ufBFalse);
          else
            voItems[i]
                .setBarcodeClose((nc.vo.pub.lang.UFBoolean) alItemTs
                    .get(7));
          // voItems[i].set
        } else {
          int xxx = 0;
        }
      }
    }

    return;
  }

  /**
   * 李俊 功能：更新表体行的Ts 参数： 返回： 例外： 日期：(2004-10-11 15:55:02) 修改日期，修改人，修改原因，注释标志：
   * 
   * @param voItems
   *            java.util.ArrayList
   * @param sHeadPK
   *            java.lang.String
   */
  private void freshTsBodyItem(ArrayList alParam) throws BusinessException {

    String sHeadPK = (String) alParam.get(0);
    ArrayList alBids = (ArrayList) alParam.get(1);
    ArrayList alTss = (ArrayList) alParam.get(2);
    // query
    ArrayList alTs = null;
    try {
      GeneralBillDMO dmo = getBillDMO();
      alTs = dmo.getTs(sHeadPK);
    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }

    if (alTs == null || alTs.get(0) == null) {
      throw new BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4008bill", "UPP4008bill-000165")/*
                                         * @res
                                         * "没有得到最新时间戳!"
                                         */);

    }
    // set
    ArrayList alItemTs = null;
    Hashtable ht = new Hashtable();
    for (int i = 1; i < alTs.size(); i++) {
      alItemTs = (ArrayList) alTs.get(i);
      if (alItemTs != null && alItemTs.size() > 1) {
        if (alItemTs.get(0) != null && alItemTs.get(1) != null) {
          ht.put((String) alItemTs.get(0), alItemTs);
        }
      }
    }

    String bid = null;
    for (int i = 0; i < alBids.size(); i++) {
      bid = (String) alBids.get(i);
      if (ht.containsKey(bid)) {
        alItemTs = (ArrayList) ht.get(bid);
        if (alItemTs != null && alItemTs.size() > 4) {
          alTss.set(i, (String) alItemTs.get(1));
        }
      }
    }

    return;

  }

  /**
   * 创建者：王乃军 功能：获得传入的VO的表头PK，====和所有表体PK=== ,作为一个数组返回。 -----〉改为只返回表头的PK. 参数：
   * 返回： 例外： 日期：(2001-9-18 11:36:19) 修改日期，修改人，修改原因，注释标志：
   * 
   * @return java.lang.String[]
   * @param vo
   *            nc.vo.ic.pub.bill.GeneralBillVO
   */
  protected String[] getAllPK(GeneralBillVO voBill) throws BusinessException {
    if (voBill == null || voBill.getHeaderVO() == null) // ||
                              // voBill.getItemCount()<=0)
      return null;
    // 暂存器
    Vector vAllPK = new Vector();
    // 自己的PK，新增时为空。
    String sMyPK = voBill.getHeaderVO().getPrimaryKey();
    if (sMyPK != null && sMyPK.trim().length() > 0)
      vAllPK.addElement(sMyPK);
    GeneralBillItemVO voaItem[] = voBill.getItemVOs(); // 表体行
    int iLineNum = 0; // 行数
    if (voaItem != null)
      iLineNum = voaItem.length;
    // Object oBodyPK=null;
    // for(int row=0;row<iLineNum;row++){
    // oBodyPK=voBill.getItemValue(row,"cgeneralbid");
    // if(oBodyPK!=null && oBodyPK.toString().trim().length()>0)
    // vAllPK.addElement(oBodyPK);
    // }
    String sSourcePK = null; // 源单据
    String sCorrPK = null; // 对应单据
    for (int row = 0; row < iLineNum; row++) {
      // 源单据的表头PK
      sSourcePK = voaItem[row].getCsourcebillhid();
      if (sSourcePK != null && sSourcePK.trim().length() > 0
          && !vAllPK.contains(sSourcePK))
        vAllPK.addElement(sSourcePK);

      // 源单据的表体PK，不需要。
      // sSourcePK=voaItem[row].getCsourcebillbid();
      // if(sSourcePK!=null && sSourcePK.trim().length()>0)
      // vAllPK.addElement(sSourcePK);
      // ===========================================
      // 对应单据
      sCorrPK = voaItem[row].getCcorrespondhid();
      if (sCorrPK != null && sCorrPK.trim().length() > 0
          && !vAllPK.contains(sCorrPK))
        vAllPK.addElement(sCorrPK);
      // 对应单据的表体PK，不需要。
      // sCorrPK=voBill.getItemValue(row,"ccorrespondbid");
      // if(sCorrPK!=null && sCorrPK.toString().trim().length()>0)
      // vAllPK.addElement(sCorrPK);
    }
    // 子单据的PK
    if (sMyPK != null && sMyPK.trim().length() > 0) {
      try {
        GeneralBillDMO dmo = getBillDMO();
        String saChildrenPK[] = null;// dmo.queryChildrenBillPK(sMyPK);
        // 附加到vector
        if (saChildrenPK != null)
          for (int u = 0; u < saChildrenPK.length; u++)
            if (saChildrenPK[u] != null
                && saChildrenPK[u].trim().length() > 0
                && !vAllPK.contains(saChildrenPK[u]))
              vAllPK.addElement(saChildrenPK[u]);

      } catch (Exception e) {

        // 库存组异常抛出规范
        throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);

      }
    }
    // OK!处理新增单据外，至少有自己的PK
    String saRet[] = null;
    if (vAllPK.size() > 0) {
      saRet = new String[vAllPK.size()];
      vAllPK.copyInto(saRet);
    }

    return saRet;
  }

  /**
   * 张欣IC 功能：获得因为条码更新的单据行 参数： 返回： 例外： 日期：(2004-10-11 15:32:52)
   * 修改日期，修改人，修改原因，注释标志：
   * 
   * @return java.util.ArrayList
   * @param voaItem
   *            nc.vo.ic.pub.bill.GeneralBillItemVO[]
   */
  public ArrayList getBarcodeUPdateItem(GeneralBillItemVO[] voaItem,
      boolean onlyUnChange) {
    ArrayList alUpdateItem = new ArrayList();
    GeneralBillItemVO itemvo = null;
    for (int i = 0; i < voaItem.length; i++) {
      itemvo = voaItem[i];
      if (itemvo == null)
        continue;
      if ((itemvo.getStatus() == VOStatus.UNCHANGED)
          || (!onlyUnChange && (itemvo.getStatus() == VOStatus.UPDATED))) {

        if (itemvo.getBarCodeVOs() != null
            && itemvo.getBarCodeVOs().length > 0) {
          for (int j = 0; j < itemvo.getBarCodeVOs().length; j++) {
            if (itemvo.getBarCodeVOs()[j] != null
                && (itemvo.getBarCodeVOs()[j].getStatus() == VOStatus.DELETED
                    || itemvo.getBarCodeVOs()[j]
                        .getStatus() == VOStatus.UPDATED || itemvo
                    .getBarCodeVOs()[j].getStatus() == VOStatus.NEW)) {
              alUpdateItem.add(itemvo);
              break;
            }
          }
        }
      }
    }
    return alUpdateItem;
  }

  /**
   * 此处插入方法说明。 创建日期：(2003-11-26 10:55:37)
   * 
   * @return nc.bs.ic.pub.bill.GeneralBillDMO
   */
  protected GeneralBillDMO getBillDMO() throws BusinessException {

    try {
      return new GeneralBillDMO();
    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }
    return null;
  }

  /**
   * 此处插入方法说明。 功能描述: 从 aryBillItem 的Arraylist中 获得generalbid 的Arraylist 作者：韩卫
   * 输入参数: 返回值: 异常处理: 日期:(2003-6-24 14:29:32)
   * 
   * @return java.util.ArrayList
   * @param aryBillItem
   *            java.util.ArrayList
   */
  protected ArrayList getBillItemAryID(ArrayList aryBillItem) {
    ArrayList aryBillItemID = null;
    if (aryBillItem != null) {
      aryBillItemID = new ArrayList();
      String sID = null;
      Object objTemp = null;
      for (int i = 0; i < aryBillItem.size(); i++) {
        objTemp = aryBillItem.get(i);
        if (objTemp != null) {
          sID = ((GeneralBillItemVO) objTemp).getCgeneralbid();
          if (sID != null)
            aryBillItemID.add(sID);
        }

      }
    }
    return aryBillItemID;
  }

  /**
   * 此处插入方法说明。 功能描述:获得错误提示信息 作者：韩卫 输入参数: 返回值: 异常处理: 日期:(2003-6-23 14:14:04)
   * 
   * @return java.lang.String
   * @param arrylistEx：
   *            已经有相同的序列号
   * @param aryListNotEx：
   *            不存在
   * @param aryListReturn：
   *            退回
   * @param aryListOutOrFreeze：已经出库或已经冻结
   */
  protected String getSnHintMsg(ArrayList arrylistEx, ArrayList aryListNotEx,
      ArrayList aryListReturn, ArrayList aryListOutOrFreeze) {

    StringBuffer sbMsg = new StringBuffer();
    // 判断序列号的状态，出现在返回结果中的序列号都是有问题的。
    String sSn = null;
    int iCount = 0;

    if (arrylistEx != null) {
      iCount = arrylistEx.size();
      if (iCount > 0) {
        sbMsg
            .append(nc.bs.ml.NCLangResOnserver.getInstance()
                .getStrByID("4008bill", "UPP4008bill-000167")/*
                                         * @res
                                         * "重复的序列号："
                                         */);
        for (int sn = 0; sn < iCount; sn++) {
          sSn = (String) arrylistEx.get(sn);
          if (sSn != null)
            // zhx I18N
            sbMsg.append(sSn);
          if (sn != iCount - 1)
            sbMsg
                .append(nc.bs.ml.NCLangResOnserver
                    .getInstance().getStrByID("4008bill",
                        "UPPSCMCommon-000000")/*
                                     * @res
                                     * "、"
                                     */);
          else
            sbMsg
                .append(nc.bs.ml.NCLangResOnserver
                    .getInstance().getStrByID("4008bill",
                        "UPP4008bill-000168")/*
                                     * @res
                                     * "。"
                                     */);
        }

      }
    }

    if (aryListNotEx != null) {
      iCount = aryListNotEx.size();
      if (iCount > 0) {
        sbMsg
            .append(nc.bs.ml.NCLangResOnserver.getInstance()
                .getStrByID("4008bill", "UPP4008bill-000345")/*
                                         * @res
                                         * "不存在的序列号："
                                         */);
        for (int sn = 0; sn < iCount; sn++) {
          sSn = (String) aryListNotEx.get(sn);
          if (sSn != null)
            sbMsg.append(sSn);
          if (sn != iCount - 1)
            sbMsg
                .append(nc.bs.ml.NCLangResOnserver
                    .getInstance().getStrByID("4008bill",
                        "UPPSCMCommon-000000")/*
                                     * @res
                                     * "、"
                                     */);
          else
            sbMsg
                .append(nc.bs.ml.NCLangResOnserver
                    .getInstance().getStrByID("4008bill",
                        "UPP4008bill-000168")/*
                                     * @res
                                     * "。"
                                     */);
        }
      }
    }

    if (aryListReturn != null) {
      iCount = aryListReturn.size();
      if (iCount > 0) {
        sbMsg
            .append(nc.bs.ml.NCLangResOnserver.getInstance()
                .getStrByID("4008bill", "UPP4008bill-000169")/*
                                         * @res
                                         * "已退回的序列号："
                                         */);
        for (int sn = 0; sn < iCount; sn++) {
          sSn = (String) aryListReturn.get(sn);
          if (sSn != null)
            // zhx I18N
            sbMsg.append(sSn);
          if (sn != iCount - 1)
            sbMsg
                .append(nc.bs.ml.NCLangResOnserver
                    .getInstance().getStrByID("4008bill",
                        "UPPSCMCommon-000000")/*
                                     * @res
                                     * "、"
                                     */);
          else
            sbMsg
                .append(nc.bs.ml.NCLangResOnserver
                    .getInstance().getStrByID("4008bill",
                        "UPP4008bill-000168")/*
                                     * @res
                                     * "。"
                                     */);
        }
      }
    }

    if (aryListOutOrFreeze != null) {
      iCount = aryListOutOrFreeze.size();
      if (iCount > 0) {
        sbMsg
            .append(nc.bs.ml.NCLangResOnserver.getInstance()
                .getStrByID("4008bill", "UPP4008bill-000170")/*
                                         * @res
                                         * "不存在或已出库或冻结的序列号："
                                         */);
        for (int sn = 0; sn < iCount; sn++) {
          sSn = (String) aryListOutOrFreeze.get(sn);
          if (sSn != null)
            // zhx I18N
            sbMsg.append(sSn);
          if (sn != iCount - 1)
            sbMsg
                .append(nc.bs.ml.NCLangResOnserver
                    .getInstance().getStrByID("4008bill",
                        "UPPSCMCommon-000000")/*
                                     * @res
                                     * "、"
                                     */);
          else
            sbMsg
                .append(nc.bs.ml.NCLangResOnserver
                    .getInstance().getStrByID("4008bill",
                        "UPP4008bill-000168")/*
                                     * @res
                                     * "。"
                                     */);
        }
      }
    }
    return sbMsg.toString();

  }

  /**
   * 此处插入方法说明。 功能描述: 收集表体行序列号信息 作者：韩卫 输入参数: 返回值:ArrayList Result Result[0]
   * boolean isOneOpeter:是否都入或都出；True:都入或出；False:既有入又有出； Result[1] boolean
   * isInTrue:入False:出 Result[2]: aryBillItemAddIn:入库增加
   * Result[3]:aryBillItemAddOut：出库增加 Result[4]:aryBillItemDelIn：入库删除
   * Result[5]:aryBillItemDelOut: 出库删除 Result[6]:arybillItemUpdateIn 入库修改
   * Result[7]:aryBillItemUpateOut: 出库修改 异常处理: 日期:(2003-6-23 14:07:07)
   * 
   * @return java.util.ArrayList
   * @param billItem
   *            nc.vo.ic.pub.bill.GeneralBillItemVO[]
   */
  private ArrayList getSnStatues(GeneralBillVO voUpdate, GeneralBillVO voOld,
      Hashtable htOldItems) throws BusinessException {
    ArrayList arylistResult = new ArrayList();

    boolean isOneOpeter = false; // 统一入或出
    boolean isInTrue = false; // 是否入
    boolean isSnStatuese = false; // 是否有序列号管理的存货
    ArrayList aryBillItemAddIn = new ArrayList();
    ArrayList aryBillItemAddOut = new ArrayList();
    ArrayList aryBillItemDelIn = new ArrayList();
    ArrayList aryBillItemDelOut = new ArrayList();
    ArrayList aryBillItemUpdateIn = new ArrayList();
    ArrayList aryBillItemUpdateOut = new ArrayList();

    // 单据行的出入库属性
    long lTime = System.currentTimeMillis();

    if (voUpdate != null && htOldItems == null) // 新增（出库、入库）
    {
      GeneralBillItemVO[] billItemUpdate = (GeneralBillItemVO[]) voUpdate
          .getChildrenVO();

      if (billItemUpdate != null && billItemUpdate.length > 0) {

        int iNewInOut[] = voUpdate.getBillItemInOutPty();
        int iLen = billItemUpdate.length;
        for (int i = 0; i < iLen; i++) {
          if (billItemUpdate[i].getSerial() != null) {
            if (iNewInOut[i] == InOutFlag.IN)
              aryBillItemAddIn.add(billItemUpdate[i]);
            else if (iNewInOut[i] == InOutFlag.OUT)
              aryBillItemAddOut.add(billItemUpdate[i]);

          }
        }
        // 判断是否是全入、全出
        if (aryBillItemAddIn.size() > 0
            && aryBillItemAddOut.size() == 0) {
          isOneOpeter = true;
          isInTrue = true;
        }
        if (aryBillItemAddOut.size() > 0
            && aryBillItemAddIn.size() == 0) {
          isOneOpeter = true;
          isInTrue = false;
        }

      }
    } else if (voUpdate == null && voOld != null) // 删除（出库、入库）
    {

      GeneralBillItemVO[] billItemOld = (GeneralBillItemVO[]) voOld
          .getChildrenVO();
      if (billItemOld != null && billItemOld.length > 0) {

        int iNewInOut[] = voOld.getBillItemInOutPty();
        int iLen = billItemOld.length;
        Integer isSerialMgt = null;
        for (int i = 0; i < iLen; i++) {

          isSerialMgt = billItemOld[i].getInv().getIsSerialMgt();
          if (((isSerialMgt != null) && (isSerialMgt.intValue() == 1))
              || (billItemOld[i].getSerial() != null && billItemOld[i]
                  .getSerial().length > 0)) {
            // {
            if (iNewInOut[i] == InOutFlag.IN)
              aryBillItemDelIn.add(billItemOld[i]);
            else if (iNewInOut[i] == InOutFlag.OUT)
              aryBillItemDelOut.add(billItemOld[i]);

            // }
          }
        }
        // 判断是否是全入、全出
        if (aryBillItemDelIn.size() > 0
            && aryBillItemDelOut.size() == 0) {
          isOneOpeter = true;
          isInTrue = true;
        }
        if (aryBillItemDelOut.size() > 0
            && aryBillItemDelIn.size() == 0) {
          isOneOpeter = true;
          isInTrue = false;
        }

      }
    } else if (voUpdate == null && htOldItems == null) // 都为空
    {
      throw new BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4008bill", "UPP4008bill-000055")/*
                                         * @res
                                         * "单据为空！"
                                         */);
    } else if (voUpdate != null && htOldItems != null) // 修改：行新增、修改、删除、序列号修改
    {
      GeneralBillItemVO[] billItemUpdate = (GeneralBillItemVO[]) voUpdate
          .getChildrenVO();

      int iNewInOut[] = voUpdate.getBillItemInOutPty();
      int iNewInOutOld[] = voOld.getBillItemInOutPty();
      int iLen = billItemUpdate.length;
      Integer isSerialMgt = null;
      Integer isSerialMgtOld = null;

      // 存货ID新\旧
      String sInvIDNew = null, sInvIDOld = null;
      boolean isHasUnchange = false;
      boolean isSameInv = false; // 是否同一存货
      boolean bOldSerialMgt = false;
      boolean bUpdateSerialMgt = false;
      String sCgeneralbid = null; // 行ID

      for (int i = 0; i < iLen; i++) {
        int iNewStatus = billItemUpdate[i].getStatus();
        int iTempSnStatus = billItemUpdate[i].getSnStatus();

        sCgeneralbid = billItemUpdate[i].getCgeneralbid();
        GeneralBillItemVO billItemVoOld = null;

        if (htOldItems.containsKey(sCgeneralbid)) {
          billItemVoOld = (GeneralBillItemVO) htOldItems
              .get(sCgeneralbid);
          // zhy2005-08-25改变序列号的状态，由于在前台并没有处理，也许可以放在此处处理，若不处理会出错
          if (!nc.vo.ic.pub.GenMethod.isStringEqual(billItemUpdate[i]
              .getCvendorid(), billItemVoOld.getCvendorid())
              && billItemUpdate[i].getSnStatus() == VOStatus.UNCHANGED) {
            billItemUpdate[i].setSnStatus(VOStatus.UPDATED);
          }
          iTempSnStatus = billItemUpdate[i].getSnStatus();

          if (billItemVoOld != null) {
            sInvIDOld = billItemVoOld.getInv().getCinventoryid();
            isSerialMgtOld = billItemVoOld.getInv()
                .getIsSerialMgt();
            sInvIDNew = billItemUpdate[i].getInv()
                .getCinventoryid();
            if ((sInvIDOld != null)
                && (!sInvIDOld.equalsIgnoreCase(sInvIDNew))) {
              isSameInv = false;
              // 两个存货不相同，并且旧存货是序列号管理
            } else {
              isSameInv = true;
            }
            if ((isSerialMgtOld != null)
                && (isSerialMgtOld.intValue() == 1))
              bOldSerialMgt = true;
            else
              bOldSerialMgt = false;
          }
        } else {
          bOldSerialMgt = false;
          isSameInv = false;
        }
        // ////////////////////

        // 更新行是否是序列号管理
        isSerialMgt = billItemUpdate[i].getInv().getIsSerialMgt();
        if ((isSerialMgt != null) && (isSerialMgt.intValue() == 1))
          bUpdateSerialMgt = true;
        else
          bUpdateSerialMgt = false;

        switch (iNewStatus) {
        case VOStatus.NEW:
          if (bUpdateSerialMgt) {
            if (iNewInOut[i] == InOutFlag.IN)
              aryBillItemAddIn.add(billItemUpdate[i]);
            else if (iNewInOut[i] == InOutFlag.OUT)
              aryBillItemAddOut.add(billItemUpdate[i]);

          }
          break;
        case VOStatus.DELETED:
          if (bUpdateSerialMgt) {
            if (iNewInOut[i] == InOutFlag.IN)
              aryBillItemDelIn.add(billItemUpdate[i]);
            else if (iNewInOut[i] == InOutFlag.OUT)
              aryBillItemDelOut.add(billItemUpdate[i]);
          }
          break;
        case VOStatus.UNCHANGED:
          if (iTempSnStatus == VOStatus.UNCHANGED) {
            isHasUnchange = true;
            break;
          }
        case VOStatus.UPDATED: // 处理同UNCHANGED
          if (!isSameInv) // 非同一存货
          {
            if (bOldSerialMgt) {
              // 删除入库或出库序列号
              if (iNewInOutOld[i] == InOutFlag.IN) {
                // 入库序列号删除
                if (billItemVoOld != null)
                  aryBillItemDelIn.add(billItemVoOld);

              } else if (iNewInOutOld[i] == InOutFlag.OUT) {
                // 出库序列号删除
                if (billItemVoOld != null)
                  aryBillItemDelOut.add(billItemVoOld);
              }
            }
            // 添加新的入库或出库序列号
            if (bUpdateSerialMgt) {
              if (iNewInOut[i] == InOutFlag.IN)
                aryBillItemAddIn.add(billItemUpdate[i]);
              else if (iNewInOut[i] == InOutFlag.OUT)
                aryBillItemAddOut.add(billItemUpdate[i]);

            }
          } else // 同一存货
          {
            if (bUpdateSerialMgt) {

              // GeneralBillItemVO itemOld =
              // (GeneralBillItemVO)
              // htOldItems.get(billItemUpdate[i].getPrimaryKey());
              int iOldInOut = billItemVoOld.getInOutFlag();
              if (iTempSnStatus != VOStatus.UNCHANGED) {

                if (iNewInOut[i] == InOutFlag.IN) {
                  if (iTempSnStatus == VOStatus.UPDATED) {
                    if (iOldInOut == InOutFlag.OUT) {
                      // 出库改成入库：
                      // 需要先删除出库，再添加新入库
                      aryBillItemDelOut
                          .add(billItemVoOld);
                      aryBillItemAddIn
                          .add(billItemUpdate[i]);
                    } else {
                      // 入库改入库：
                      // 修改入库
                      aryBillItemUpdateIn
                          .add(billItemUpdate[i]);
                    }
                  }
                  // ?如何进入该状态
                  else if (iTempSnStatus == VOStatus.DELETED)
                    aryBillItemDelIn.add(billItemUpdate[i]);

                  // ?如何进入该状态
                  else if (iTempSnStatus == VOStatus.NEW)
                    aryBillItemAddIn.add(billItemUpdate[i]);
                } else if (iNewInOut[i] == InOutFlag.OUT) {
                  if (iTempSnStatus == VOStatus.UPDATED) {
                    if (iOldInOut == InOutFlag.OUT) {
                      // 出库改成出库：
                      // 修改出库
                      aryBillItemUpdateOut
                          .add(billItemUpdate[i]);
                    } else {
                      // 入库改成出库：
                      // 删除入库
                      aryBillItemDelIn.add(billItemVoOld);
                      // 新增出库
                      aryBillItemAddOut
                          .add(billItemUpdate[i]);
                    }

                  }
                  // ?如何进入该状态
                  else if (iTempSnStatus == VOStatus.DELETED)
                    aryBillItemDelOut
                        .add(billItemUpdate[i]);
                  // ?如何进入该状态
                  else if (iTempSnStatus == VOStatus.NEW)
                    aryBillItemAddOut
                        .add(billItemUpdate[i]);
                } else // 既不是入库，也不是出库数量为0或为null情况下（ iInOut =
                    // InOutFlag.SPECIAL;）
                {
                  // 出库设置成空，或入库设置成空，这时需要oldItem状态来判断单据出入库状态
                  // 修改 by hanwei 2004-01-05
                  if (iOldInOut == InOutFlag.OUT) {
                    // 旧单据为出库
                    // 这里为删除出库
                    aryBillItemDelOut.add(billItemVoOld);

                  } else {
                    // 旧单据为入库
                    // 这里为删除入库
                    // 删除入库
                    aryBillItemDelIn.add(billItemVoOld);
                  }
                }

              } else {
                isHasUnchange = true;
              }
            }
          }

          break;
        }

      }

      // 删除入库整单校验
      if (!isHasUnchange && aryBillItemDelIn.size() > 0
          && aryBillItemDelOut.size() == 0
          && aryBillItemUpdateIn.size() == 0
          && aryBillItemUpdateOut.size() == 0
          && aryBillItemAddIn.size() == 0
          && aryBillItemAddOut.size() == 0) {
        isOneOpeter = true;
        isInTrue = true;
      }
      // 删除出库整单校验
      if (!isHasUnchange && aryBillItemDelOut.size() > 0
          && aryBillItemDelIn.size() == 0
          && aryBillItemUpdateIn.size() == 0
          && aryBillItemUpdateOut.size() == 0
          && aryBillItemAddIn.size() == 0
          && aryBillItemAddOut.size() == 0) {
        isOneOpeter = true;
        isInTrue = false;
      }
      // 修改入库整单校验
      if (!isHasUnchange && aryBillItemUpdateIn.size() > 0
          && aryBillItemDelIn.size() == 0
          && aryBillItemDelOut.size() == 0
          && aryBillItemUpdateOut.size() == 0
          && aryBillItemAddIn.size() == 0
          && aryBillItemAddOut.size() == 0) {
        isOneOpeter = true;
        isInTrue = true;
      }

      // 修改出库整单校验
      if (!isHasUnchange && aryBillItemUpdateOut.size() > 0
          && aryBillItemDelIn.size() == 0
          && aryBillItemDelOut.size() == 0
          && aryBillItemUpdateIn.size() == 0
          && aryBillItemAddIn.size() == 0
          && aryBillItemAddOut.size() == 0) {
        isOneOpeter = true;
        isInTrue = false;
      }

      // 修改新增入库整单校验
      if (!isHasUnchange && aryBillItemUpdateOut.size() == 0
          && aryBillItemDelIn.size() == 0
          && aryBillItemDelOut.size() == 0
          && aryBillItemUpdateIn.size() == 0
          && aryBillItemAddIn.size() > 0
          && aryBillItemAddOut.size() == 0) {
        isOneOpeter = true;
        isInTrue = true;
      }

      // 修改新增出库整单校验
      if (!isHasUnchange && aryBillItemUpdateOut.size() == 0
          && aryBillItemDelIn.size() == 0
          && aryBillItemDelOut.size() == 0
          && aryBillItemUpdateIn.size() == 0
          && aryBillItemAddIn.size() == 0
          && aryBillItemAddOut.size() > 0) {
        isOneOpeter = true;
        isInTrue = false;
      }

    }

    if (nc.vo.scm.pub.SCMEnv.DEBUG) {
      if (isOneOpeter) {
        nc.vo.scm.pub.SCMEnv.out("sndmo:整单操作");
      } else
        nc.vo.scm.pub.SCMEnv.out("sndmo:非整单操作");

      if (isInTrue)
        nc.vo.scm.pub.SCMEnv.out("sndmo:入库操作");
      else
        nc.vo.scm.pub.SCMEnv.out("sndmo:出库操作");
    }
    arylistResult.add(new Boolean(isOneOpeter));
    arylistResult.add(new Boolean(isInTrue));
    arylistResult.add(aryBillItemAddIn);
    arylistResult.add(aryBillItemAddOut);
    arylistResult.add(aryBillItemDelIn);
    arylistResult.add(aryBillItemDelOut);
    arylistResult.add(aryBillItemUpdateIn);
    arylistResult.add(aryBillItemUpdateOut);

    if ((aryBillItemAddIn.size() > 0) || (aryBillItemAddOut.size() > 0)
        || (aryBillItemDelIn.size() > 0)
        || (aryBillItemDelOut.size() > 0)
        || (aryBillItemUpdateIn.size() > 0)
        || (aryBillItemUpdateOut.size() > 0)) {
      isSnStatuese = true;
    } else
      isSnStatuese = false;

    arylistResult.add(new Boolean(isSnStatuese));
    SCMEnv.showTime(lTime, "getSnStatues:");

    return arylistResult;
  }

  /**
   * 创建者：王乃军 功能：读系统参数 参数： 返回： 例外： 日期：(2001-10-27 14:36:28) 修改日期，修改人，修改原因，注释标志：
   * 
   * @return java.lang.String[]
   * @param alParamValue
   *            java.lang.String[]
   */
  protected String[] getSysParam(String sCorpID, String[] saParam)
      throws BusinessException {
    try {
      MiscDMO dmo = new MiscDMO();
      return dmo.getSysParam(sCorpID, saParam);
    } catch (Exception e) {
      throw new BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4008bill", "UPP4008bill-000346")/*
                                         * @res
                                         * "参数获得错误！"
                                         */
          + e.getMessage());
    }
  }

  /**
   * 创建者：王乃军 功能：插入指定的条码记录 条码状态为修改和新增的记录 返回： 例外：检查到其它错误 日期：(2001-6-14 9:11:16)
   * 修改日期，修改人，修改原因，注释标志：
   * 
   * @param voBill
   *            nc.voNewBill.ic.pub.bill.GeneralBillItemVO
   */
  protected void insertBarCode(GeneralBillItemVO[] voaItem,
      boolean bSaveBarcodeFinal) throws BusinessException {

    if (voaItem == null || voaItem.length == 0)
      throw new BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4008bill", "UPP4008bill-000171")/*
                                         * @res
                                         * "新增时传入的参数错误！"
                                         */);

    // 综合参数，结果是否保存条码
    if (bSaveBarcodeFinal) {
      ArrayList alBarCode = new ArrayList();
      for (int i = 0; i < voaItem.length; i++) {
        GeneralBillItemVO itemvo = voaItem[i];
        if (itemvo.getBarCodeVOs() != null
            && itemvo.getBarCodeVOs().length > 0) {
          for (int j = 0; j < itemvo.getBarCodeVOs().length; j++) {
            if (itemvo.getBarCodeVOs()[j] != null
                && (itemvo.getBarCodeVOs()[j].getStatus() == VOStatus.NEW || itemvo
                    .getBarCodeVOs()[j].getStatus() == VOStatus.UPDATED))
              alBarCode.add(itemvo.getBarCodeVOs()[j]);
          }

        }

      }

      if (alBarCode.size() > 0) {
        nc.bs.ic.pub.bc.BarCodeDMO dmoBill;
        try {
          dmoBill = new nc.bs.ic.pub.bc.BarCodeDMO();
        } catch (Exception e) {
          // 日志异常
          nc.vo.scm.pub.SCMEnv.out(e);
          // 库存组异常抛出规范
          throw nc.bs.ic.pub.GenMethod.handleException(
              e.getMessage(), e);
        }
        dmoBill.insertArray(alBarCode);
      }
    }

  }

  /**
   * 创建者：王乃军 功能：插入指定的条码记录 条码状态为修改和新增的记录 返回： 例外：检查到其它错误 日期：(2001-6-14 9:11:16)
   * 修改日期，修改人，修改原因，注释标志：
   * 
   * @param voBill
   *            nc.voNewBill.ic.pub.bill.GeneralBillItemVO
   */
  protected void insertBarCode(GeneralBillVO voNewBill)
      throws BusinessException {

    // 按条码状态标志插入
    insertBarCode(voNewBill, false);

  }

  /**
   * 创建者：王乃军 功能：插入指定的条码记录 条码状态为修改和新增的记录 返回： 例外：检查到其它错误 日期：(2001-6-14 9:11:16)
   * 修改日期，修改人，修改原因，注释标志：
   * 
   * @param voBill
   *            nc.voNewBill.ic.pub.bill.GeneralBillItemVO bAllInsert： true
   *            插入所有的条码数据 false 根据条码状态插入
   * 
   */
  protected void insertBarCode(GeneralBillVO voNewBill, boolean bAllInsert)
      throws BusinessException {

    if (voNewBill == null)
      throw new BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4008bill", "UPP4008bill-000171")/*
                                         * @res
                                         * "新增时传入的参数错误！"
                                         */);
    GeneralBillItemVO[] voaItem = (GeneralBillItemVO[]) voNewBill
        .getChildrenVO();
    if (voaItem == null || voaItem.length == 0)
      throw new BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4008bill", "UPP4008bill-000171")/*
                                         * @res
                                         * "新增时传入的参数错误！"
                                         */);

    if (voNewBill.bSaveBarcodeFinal()) {
      ArrayList alBarCode = new ArrayList();
      for (int i = 0; i < voaItem.length; i++) {
        GeneralBillItemVO itemvo = voaItem[i];
        if (itemvo.getStatus() != nc.vo.pub.VOStatus.DELETED
            && itemvo.getBarCodeVOs() != null
            && itemvo.getBarCodeVOs().length > 0) {
          for (int j = 0; j < itemvo.getBarCodeVOs().length; j++) {
            if (itemvo.getBarCodeVOs()[j] != null
                && itemvo.getBarCodeVOs()[j].getStatus() != VOStatus.DELETED
                && (bAllInsert
                    || itemvo.getStatus() == nc.vo.pub.VOStatus.NEW || (!bAllInsert && (itemvo
                    .getBarCodeVOs()[j].getStatus() == VOStatus.NEW || itemvo
                    .getBarCodeVOs()[j].getStatus() == VOStatus.UPDATED))))
              alBarCode.add(itemvo.getBarCodeVOs()[j]);
          }

        }

      }

      if (alBarCode.size() > 0) {
        nc.bs.ic.pub.bc.BarCodeDMO dmoBill;
        try {
          dmoBill = new nc.bs.ic.pub.bc.BarCodeDMO();
        } catch (Exception e) {
          // 日志异常
          nc.vo.scm.pub.SCMEnv.out(e);
          // 库存组异常抛出规范
          throw nc.bs.ic.pub.GenMethod.handleException(
              e.getMessage(), e);
        }
        dmoBill.insertArray(alBarCode);
      }
    }

  }

  /**
   * 此处插入方法说明。 功能：不加锁的单据保存 参数： 单据数组 返回： 例外： 日期：(2001-10-22 13:54:04)
   * 修改日期，修改人，修改原因，注释标志：
   */
  protected ArrayList insertBillsWithNoLock(GeneralBillVO[] vos)
      throws BusinessException {
    ArrayList alKey = null;
    if (vos != null) {
      alKey = new ArrayList();
      for (int i = 0; i < vos.length; i++)
        alKey.add(insertThisBill(vos[i]));
    }
    return alKey;
  }

  /**
   * 创建者：王乃军 功能：插入指定的单据 返回：
   * 
   * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
   * 
   * @param voBill
   *            nc.voNewBill.ic.pub.bill.GeneralBillVO
   */
  public ArrayList insertThisBill(GeneralBillVO voNewBill)
      throws BusinessException {
    try {
      return insertThisBill_Batch(voNewBill);
    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }
    return null;

  }

  /**
   * 创建者：王乃军 功能：插入指定的单据 返回：
   * 
   * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
   * 
   * @param voBill
   *            nc.voNewBill.ic.pub.bill.GeneralBillVO
   * 
   */
  protected ArrayList insertThisBill_Batch(GeneralBillVO voNewBill)
      throws BusinessException {
    if (voNewBill == null)
      throw new BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4008bill", "UPP4008bill-000171")/*
                                         * @res
                                         * "新增时传入的参数错误！"
                                         */);

    GeneralBillHeaderVO voHead = voNewBill.getHeaderVO(); // 表头
    GeneralBillItemVO[] voaItem = voNewBill.getItemVOs(); // 表体

    if (voHead == null || voaItem == null || voaItem.length == 0
        || voHead.getCbilltypecode() == null
        || voHead.getPk_corp() == null
        || voHead.getCbilltypecode().trim().length() == 0
        || voHead.getPk_corp().trim().length() == 0)
      throw new BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4008bill", "UPP4008bill-000172")/*
                                         * @res
                                         * "VO参数错误。传入单据为空，或者无单据、公司编码。"
                                         */);
    //更新现存量开始，获取保存前信息
    FixOnhandnumDMO onhanddmo = null;
    try{
      onhanddmo = new FixOnhandnumDMO();
    }catch(Exception e){
      throw GenMethod.handleException(null, e);
    }
    ArrayList lbeforeinvonhand = onhanddmo.updateOnHandBegin(voNewBill,ICConst.OnHandUpdateType.Onhand_All);   
    
    // 修改人：刘家清 修改日期：2007-11-14下午01:50:04 修改原因：设置新增单据的初始时间
    GeneralBillBOHelper.setNewBillInitDateTime(voNewBill);
    // 修改人：刘家清 修改日期：2008-4-7上午09:32:14 修改原因：把表头库存组织、仓库、单据类型同步到表体中去。
    GeneralBillBOHelper.setBodyAddInfoFromHead(voNewBill, null);

    try {
      nc.vo.ic.pub.check.VOCheck.checkVMIWh(
          new nc.bs.ic.pub.QueryInfoDMO(), voNewBill);
    } catch (Exception e) {
      // 日志异常
      nc.vo.scm.pub.SCMEnv.out(e);
      // 库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
    }
    // 置成自由态
    voHead.setFbillflag(new Integer(BillStatus.FREE));
    Timer t = new Timer();
    t.start();
    // 出入库单 DMO
    GeneralBillDMO dmoBill = getBillDMO();
    // 2003-06-10 预置pk
    ArrayList alKey = dmoBill.setBillPrimaryKeys(voNewBill);

    t.showExecuteTime("new** batchgetpk--@@");
    // 插入表头：
    Object tmaketime = null;
    if (voHead != null) {
      tmaketime = voHead.getAttributeValue("tmaketime");
      if (tmaketime == null || tmaketime.toString().trim().length() <= 0)
        voHead.setAttributeValue("tmaketime", (new SystemTsGenerator())
            .generateTS());
      if (nc.vo.ic.pub.GenMethod.isSEmptyOrNull((String) voHead
          .getAttributeValue("clastmodiid")))
        voHead.setAttributeValue("clastmodiid", GenMethod.getBSUser());
    }

    // addied by liuzy 2008-04-02
    // v5.03新增处理，保存前将为空的要求非空的字段填充_________N/A________
    //2008-05-30 杨波要求注释掉
//    fillNotNULLFields(new SmartVO[] { voHead });

    String sBillPK = dmoBill.insertHeader(voHead);

    t.showExecuteTime("new** insert head--@@");

    SettlementDMO dmoStl;
    nc.bs.ic.pub.locator.LocatorDMO dmoLoc;
    try {
      dmoStl = new SettlementDMO();
      dmoLoc = new nc.bs.ic.pub.locator.LocatorDMO();
    } catch (Exception e) {
      // 日志异常
      nc.vo.scm.pub.SCMEnv.out(e);
      // 库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
    }

    GeneralBillItemVO[] voItems = voNewBill.getItemVOs();
    // ljun:插入前先计算条码数量
    for (int i = 0; i < voItems.length; i++) {
      voItems[i].calBarcodeNum();
    }
    t.showExecuteTime("new** calBarcodeNum--@@");
    dmoBill.insertItemBatch(voItems);
    t.showExecuteTime("new** insertItemBatch--@@");
    // 增加条码 by hanwei 2004-03-26
    insertBarCode(voNewBill);
    t.showExecuteTime("new** insertBarCode--@@");
    dmoLoc.insertLocatorBatch(voNewBill.getInsertedLocatorVOs());
    t.showExecuteTime("new** insertLocatorBatch--@@");

    if (dmoStl.hasBB3(voHead.getCbilltypecode()))
      dmoStl.insertBB3Batch(voItems);
    t.showExecuteTime("new** insertBB3Batch--@@");
    // 序列号入库（出库） by hanwei 2003-06-24

    String sMsg = snInsert(voNewBill);

    if (sMsg != null && sMsg.length() > 0)
      throw new BusinessException(sMsg);

    // 2003-11-08 update源头单据号
    // 保存时，查询来源单据号
    if (voNewBill.isHaveSourceBill()) {
      dmoBill.setFirstBillCode(voItems, sBillPK);
      String csourcetype = (String) voNewBill.getItemValue(0,
          "csourcetype");
      if (csourcetype != null
          && voNewBill.getItemValue(0, "vsourcerowno") == null) {
        // String subqry="select csourcebillbid from ic_general_b where
        // cgeneralhid='"+voHead.getCgeneralhid()+"' and dr=0 and
        // csourcebillbid is not null and vsourcerowno is null ";
        dmoBill.setSourceRowNos(csourcetype, voHead.getCgeneralhid());
      }
      if (voNewBill.getItemValue(0, "cinvmanid") == null) {
        // dmoBill.updateBasid("
        // cgeneralhid='"+voHead.getCgeneralhid()+"' " );
        dmoBill.updateBasid(voHead.getCgeneralhid());
      }
    }
    t.showExecuteTime("new** update源头单据号--@@");
    // 2003-06-02 ydy 置入最新的Ts,否则签字时会检查时间戳不能通过

    //修改人：刘家清 修改日期：2008-5-5下午02:26:12 修改原因：根据对应入库单处理出库金额，防止尾差
    processOutBillMnyByCor(voNewBill);
    
    freshTs(voNewBill, sBillPK);
    t.showExecuteTime("new** freshts--@@");

    // 修改现存量
    // if (voNewBill.isQtyFilled()) {
    t.start();
    
    //更新现存量完成，实际更新现存量表
     onhanddmo.updateOnHandEnd(voNewBill,null, lbeforeinvonhand,ICConst.OnHandUpdateType.Onhand_All); 

//    synchronized (this) {
//      modifyOnhandNum(voNewBill, null);
//    }
    t.stop();
    t.showTime("new** modify num--@@");
    // }
    return alKey;

  }

  /**
   * 单据签字时调用的检查方法. 功能描述:检查单据的签字日期必须大于单据表体行的业务日期. 输入参数:GeneralBillVO gvo
   * 返回值:void 异常处理:BusinessException 日期:20030815
   */
  private void isSignLateBusiDate(GeneralBillVO gvo) throws BusinessException {
    if (gvo == null || gvo.getItemVOs() == null || gvo.getItemCount() < 1) {
      throw new BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4008bill", "UPP4008bill-000173")/*
                                         * @res
                                         * "传入参数错误!"
                                         */);

    }
    GeneralBillHeaderVO voHead = gvo.getHeaderVO();
    if (voHead == null)
      throw new BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4008bill", "UPP4008bill-000162")/*
                                         * @res
                                         * "VO参数错误。"
                                         */);

    UFDate udCurDate = null, udBusiDate = null;

    if (voHead.getDaccountdate() != null)
      udCurDate = voHead.getDaccountdate();
    else
      throw new BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4008bill", "UPP4008bill-000174")/*
                                         * @res
                                         * "库房签字时发现非法的数据：没有签字日期。"
                                         */);
    int iLen = gvo.getItemCount();
    for (int i = 0; i < iLen; i++) {
      udBusiDate = gvo.getItemVOs()[i].getDbizdate();
      // if (udBusiDate == null) {
      // throw new BusinessException("传入参数错误,单据业务日期为空!");

      // }
      if (udBusiDate != null && udBusiDate.after(udCurDate)) {
        throw new BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("4008bill",
                "UPP4008bill-000175")/*
                             * @res "单据签字出错:
                             * 单据单据签字日期必须晚于业务日期!"
                             */);
      }

    }

  }

  /**
   * 此处插入方法说明。 功能描述:实现倒挤,仅修改现存量。不改单据。脚本中调用 输入参数: 返回值: 异常处理: 日期:
   * 
   * @param voCur
   *            nc.vo.ic.pub.bill.GeneralBillVO
   * @exception nc.vo.pub.BusinessException
   *                异常说明。
   */
  public String makeBothToZeroOnly(AggregatedValueObject vo)
      throws BusinessException {
    return makeBothToZeroOnly1(vo);

  }

  /**
   * 此处插入方法说明。 功能描述:实现倒挤,修改现存量、单据。脚本中调用 输入参数: 返回值: 异常处理: 日期:
   * 
   * @param voCur
   *            nc.vo.ic.pub.bill.GeneralBillVO
   * @exception nc.vo.pub.BusinessException
   *                异常说明。
   */
  public String makeBothToZeroOnly1(AggregatedValueObject vo)
      throws BusinessException {
    if (vo == null || vo.getChildrenVO() == null)
      return null;
    try {
      GeneralBillVO voCur = (GeneralBillVO) vo;
      GeneralBillHeaderVO voCurHead = (GeneralBillHeaderVO) voCur
          .getHeaderVO();
      GeneralBillItemVO[] voCurItems = (GeneralBillItemVO[]) voCur
          .getItemVOs();
      if (voCurHead.getPk_corp() == null
          || voCurHead.getCwarehouseid() == null) {
        return null;
      }
      // if (voCurItems[0].getNinnum() == null &&
      // voCurItems[0].getNoutnum() == null)
      // return null;

      GeneralBillItemVO[] voItems = null;
      StringBuffer sErr = null;

      GeneralBillDMO dmo = getBillDMO();
      nc.bs.ic.pub.locator.LocatorDMO dmoLoc = new nc.bs.ic.pub.locator.LocatorDMO();

      GeneralBillVO[] vos = dmo.getVOSForUpdate2(voCur);
      if (vos == null || vos.length != 2 || vos[0] == null
          || vos[1] == null)
        return null;
      GeneralBillVO voUpdate = vos[0];
      GeneralBillVO voOld = vos[1];
      if (voUpdate == null || voUpdate.getHeaderVO() == null
          || voUpdate.getItemVOs() == null)
        return null;
      voItems = voUpdate.getItemVOs();
      updateThisBill_Batch(voUpdate, voOld);
      
      // 修改人：刘家清 修改时间：2008-11-18 下午06:49:39 修改原因：数量倒挤后要重新检查条码和业务数量
      (new CheckBarcodeDMO()).checkBarcodeAbsent(voCur);
      
      // 将状态恢复
      GeneralBillItemVO[] voOldItems = voOld.getItemVOs();
      for (int i = 0; i < voItems.length; i++) {
        if (i < voOldItems.length && voOldItems[i] != null) {
          voItems[i].setStatus(voOldItems[i].getStatus());
          voItems[i].setLocStatus(voOldItems[i].getLocStatus());
        }
      }

      if (voItems != null) {
        sErr = new StringBuffer(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("4008bill",
                "UPP4008bill-000347")/*
                             * @res
                             * "单据保存成功！提示下列存货发生数量倒挤，请重新查询单据："
                             */);
        for (int i = 0; i < voItems.length; i++) {
          sErr.append("\n").append(voItems[i].getCinventorycode());
          if (voItems[i].getVfree1() != null)
            sErr.append("-"
                + nc.bs.ml.NCLangResOnserver.getInstance()
                    .getStrByID("common", "UC000-0003327")/*
                                         * @res
                                         * "自由项"
                                         */
                + ":" + voItems[i].getVfree0());
          if (voItems[i].getVbatchcode() != null)
            sErr.append("-"
                + nc.bs.ml.NCLangResOnserver.getInstance()
                    .getStrByID("4008bill",
                        "UPPSCMCommon-000182")/*
                                     * @res
                                     * "批次"
                                     */
                + nc.bs.ml.NCLangResOnserver.getInstance()
                    .getStrByID("4008bill",
                        "UPP4008bill-000330")/*
                                     * @res
                                     * "："
                                     */
                + voItems[i].getVbatchcode());
          if (voItems[i].getCastunitid() != null)
            sErr.append("-"
                + nc.bs.ml.NCLangResOnserver.getInstance()
                    .getStrByID("common", "UC000-0003938")/*
                                         * @res
                                         * "辅单位"
                                         */
                + ":" + voItems[i].getCastunitname());

        }
      }
      if (sErr != null)
        return sErr.toString();
      else
        return null;
    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }
    return null;
  }

  /**
   * 创建者：王乃军 功能：调用dmo删除单据， 参数：GeneralBillVO voNewBill,GeneralBillVO voDbBill
   * 返回：无
   * 
   * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
   * 
   * @param GeneralBillVO
   *            voNewBill,GeneralBillVO voDbBill
   */
//  protected void modifyOnhandNum(GeneralBillVO voNewBill,
//      GeneralBillVO voDbBill) throws BusinessException {
//    // try{
//    // 修改现存量--删除的前提是单据未被修改，所以这里直接用传入的单据。
//    try {
//      OnhandnumDMO dmoOnhand = new OnhandnumDMO();
//      dmoOnhand.modifyOnhandNum(voNewBill, voDbBill);
//      dmoOnhand = null;
//    } catch (Exception e) {
//      // 日志异常
//      nc.vo.scm.pub.SCMEnv.out(e);
//      // 库存组异常抛出规范
//      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
//    }
//
//    // } catch (Exception e) {
//    // nc.vo.scm.pub.SCMEnv.error(e);
//    // reportException(e);
//    // throw new
//    // BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008bill","UPP4008bill-000177")/*@res
//    // "正在进行相关现存量操作，请稍候再试..."*/);
//    // }
//  }

  /**
   * 创建者：王乃军 功能：查询指定条件完整单据数据 参数：条件VO 返回：单据数组 例外： 日期：(2001-6-14 14:46:54)
   * 修改日期，修改人，修改原因，注释标志：
   */
  public ArrayList queryBills(QryConditionVO voQC) throws BusinessException {
    try {
      GeneralBillDMO dmo = getBillDMO();
      return dmo.queryBills(voQC);

    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }
    return null;
  }

  /**
   * 
   * 创建者：王乃军 功能：通用的查询 参数： 返回： 例外： 日期：(2001-6-19 13:32:34) 修改日期，修改人，修改原因，注释标志：
   * 
   * @return java.lang.Object
   * @param iSel
   *            java.lang.Integer
   * @param oQyrCond
   *            java.lang.Object
   */
  public Object queryInfo(Integer iSel, Object oQryCond)
      throws BusinessException {
    try {
      if (iSel == null || oQryCond == null)
        throw new BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("4008bill",
                "UPP4008bill-000178")/* @res "查询条件不能为空。" */);

      // 返回值
      Object objRet = null;
      // 临时变量
      ArrayList alIDs = null;
      ArrayList alRet = null, alInvID = null;
      // 仓库,存货,用户,公司,辅计量
      String sWhID = null, sInvID = null, sUserID = null, sCorpID = null, sAstUOMID = null;
      String pk_calbody = null;
      MiscDMO dmoMisc = null;
      GeneralBillDMO dmoBill = null;
      // 查借转业务类型
      if (iSel != null
          && iSel.intValue() == QryInfoConst.QRY_BRW_LEND_BIZTYPE
          && oQryCond != null && oQryCond instanceof ArrayList
          && ((ArrayList) oQryCond).size() > 0
          && ((ArrayList) oQryCond).get(0) != null) {
        ArrayList alBusitype = new ArrayList();
        // get(0) is pk_corp
        nc.bs.ic.pub.bill.OnhandnumDMO dmoOnhand = new nc.bs.ic.pub.bill.OnhandnumDMO();
        Hashtable htBusitype = dmoOnhand
            .queryBusitype(((ArrayList) oQryCond).get(0).toString());
        if (htBusitype != null) {
          Enumeration enumKey = htBusitype.keys();
          String sBusitypeid = null;
          while (enumKey.hasMoreElements()) {
            // hashtable's key is businesstype id
            sBusitypeid = (String) enumKey.nextElement();
            alBusitype.add(sBusitypeid);
          }

        }
        return alBusitype;
      }

      if (iSel.intValue() == QryInfoConst.BILL_SIGNED
          || iSel.intValue() == QryInfoConst.BILL_STATUS_TS
          || iSel.intValue() == QryInfoConst.LOC_SN
          || iSel.intValue() == QryInfoConst.SN
          || iSel.intValue() == QryInfoConst.LOC
          || iSel.intValue() == QryInfoConst.BILL_ITEM)
        dmoBill = getBillDMO();
      else
        dmoMisc = new MiscDMO();
      switch (iSel.intValue()) {
      case QryInfoConst.INV: // 存货
        alIDs = (ArrayList) oQryCond;
        if (alIDs.get(0) != null)
          sWhID = alIDs.get(0).toString();
        if (alIDs.get(1) != null)
          sInvID = alIDs.get(1).toString();
        if (alIDs.size() > 2) {
          if (alIDs.get(2) != null)
            sUserID = alIDs.get(2).toString();
          if (alIDs.get(3) != null)
            sCorpID = alIDs.get(3).toString();
        }
        objRet = dmoMisc.getInvQty(sWhID, sInvID, sUserID, sCorpID);
        break;
      case QryInfoConst.WH:
        // 仓库
        if (dmoMisc != null)
          objRet = dmoMisc.getWhInfo((String) oQryCond);
        break;
      case QryInfoConst.QTY:
        // 现存量，库存控制数据
        alIDs = (ArrayList) oQryCond;
        if (alIDs.get(0) != null)
          sWhID = alIDs.get(0).toString();
        if (alIDs.get(1) != null)
          sInvID = alIDs.get(1).toString();
        objRet = dmoMisc.getQty(sWhID, sInvID);
        break;
      case QryInfoConst.QTY_ALL:
        // 现存量，库存控制数据
        alIDs = (ArrayList) oQryCond;
        if (alIDs.get(0) != null)
          sWhID = alIDs.get(0).toString();
        if (alIDs.get(1) != null)
          sInvID = alIDs.get(1).toString();
        if (alIDs.size() > 2) {
          if (alIDs.get(2) != null)
            pk_calbody = alIDs.get(2).toString();
          if (alIDs.get(3) != null)
            sCorpID = alIDs.get(3).toString();
        }
        // 查控制信息
        objRet = dmoMisc.getInvQtyCal(sWhID, sInvID, pk_calbody,
            sCorpID);
        // 读本库现存量
        InvVO voTmp = dmoMisc.getOnHandNum(sCorpID, pk_calbody, sWhID,
            sInvID);
        ((InvVO) objRet).setBkxcl(voTmp.getBkxcl());
        ((InvVO) objRet).setXczl(voTmp.getXczl());

        break;
      case QryInfoConst.QTY_CTRL:
        // 库存控制数据
        alIDs = (ArrayList) oQryCond;
        if (alIDs.get(0) != null)
          sWhID = alIDs.get(0).toString();
        if (alIDs.get(1) != null)
          sInvID = alIDs.get(1).toString();
        if (alIDs.size() > 2) {
          if (alIDs.get(2) != null)
            pk_calbody = alIDs.get(2).toString();
          if (alIDs.get(3) != null)
            sCorpID = alIDs.get(3).toString();
        }
        // 查控制信息
        objRet = dmoMisc.getInvQtyCal(sWhID, sInvID, pk_calbody,
            sCorpID);

        break;
      case QryInfoConst.QTY_ONHAND:

        alIDs = (ArrayList) oQryCond;
        if (alIDs.get(0) != null)
          sWhID = alIDs.get(0).toString();
        if (alIDs.get(1) != null)
          sInvID = alIDs.get(1).toString();
        if (alIDs.size() > 2) {
          if (alIDs.get(2) != null)
            pk_calbody = alIDs.get(2).toString();
          if (alIDs.get(3) != null)
            sCorpID = alIDs.get(3).toString();
        }
        // 读本库现存量
        objRet = dmoMisc.getOnHandNum(sCorpID, pk_calbody, sWhID,
            sInvID);

        break;
      case QryInfoConst.LOC_SN:
        // 货位&序列号
        objRet = dmoBill.getLocSNInfo((String) oQryCond);
        break;
      case QryInfoConst.SN:
        // only 序列号
        objRet = dmoBill.getSNInfo((String) oQryCond);
        break;
      case QryInfoConst.LOC:
        // only 货位
        objRet = dmoBill.getLocInfo((String) oQryCond);
        break;
      case QryInfoConst.ASTUOM:
        // 辅计量
        alIDs = (ArrayList) oQryCond;
        if (alIDs.get(0) != null)
          sInvID = alIDs.get(0).toString();
        if (alIDs.get(1) != null)
          sAstUOMID = alIDs.get(1).toString();
        objRet = dmoMisc.getUOMinfo(sInvID, sAstUOMID);
        break;
      case QryInfoConst.INVS: // 多个存货,没有指定辅计量

        alIDs = (ArrayList) oQryCond;
        if (alIDs.get(0) != null)
          alInvID = (ArrayList) alIDs.get(0);
        // 多个存货，没有指定辅计量
        if (alInvID != null && alInvID.size() > 0) {
          alRet = dmoMisc.getInvInfo(alInvID);
        }
        objRet = alRet;
        break;
      case QryInfoConst.SYS_PARAM:
        // 系统参数
        // 参数
        String[] saParam = null;
        alIDs = (ArrayList) oQryCond;
        if (alIDs.get(0) != null)
          sCorpID = alIDs.get(0).toString();
        // 参数,,,,
        if (alIDs.get(1) != null)
          saParam = (String[]) alIDs.get(1);
        // 查之
        objRet = dmoMisc.getSysParam(sCorpID, saParam);
        break;
      case QryInfoConst.INVS_ASTUOM: // 多个存货,指定辅计量
        alIDs = (ArrayList) oQryCond;
        if (alIDs.get(0) != null)
          alInvID = (ArrayList) alIDs.get(0);
        // 多个存货，指定辅计量
        if (alInvID != null && alInvID.size() > 0) {
          alRet = new ArrayList();
          // temporary variable.
          ArrayList alTemp = null;
          // 临时存货VO
          InvVO voTempInv = null;
          for (int i = 0; i < alInvID.size(); i++) {
            alTemp = (ArrayList) alInvID.get(i);
            if (alTemp.size() >= 2) {
              sInvID = (String) alTemp.get(0);
              sAstUOMID = (String) alTemp.get(1);
              voTempInv = dmoMisc.getInvInfo(sInvID, sAstUOMID);
              if (voTempInv != null)
                alRet.add(voTempInv);
              else { // 如果带辅计量查不到就查不带的。
                nc.vo.scm.pub.SCMEnv
                    .out("@@@cannot qry with astuom.....");
                alRet.add(dmoMisc.getInvInfo(sInvID));
              }
            } else
              alRet.add(null);
          }
        }
        objRet = alRet;
        break;
      case QryInfoConst.CAL_BODY: // 库存组织
        alIDs = (ArrayList) oQryCond;
        if (alIDs.get(0) != null)
          sWhID = alIDs.get(0).toString();
        if (alIDs.get(1) != null)
          sUserID = alIDs.get(1).toString();
        if (alIDs.get(2) != null)
          sCorpID = alIDs.get(2).toString();
        objRet = dmoMisc.getCalBody(sWhID, sUserID, sCorpID);
        break;
      case QryInfoConst.USER_CORP:
        // 用户对应的公司
        objRet = dmoMisc.getUserCorpIDs(oQryCond.toString());
        break;
      case QryInfoConst.INIT_PARAM:
        ArrayList alInitParam = (ArrayList) oQryCond;
        // 目前是两个。
        if (alInitParam.size() >= 2) {
          ArrayList alInitRet = new ArrayList();
          // 系统参数
          // 参数编码
          String[] saParamCode = null;
          alIDs = (ArrayList) alInitParam.get(0);
          if (alIDs.get(0) != null)
            sCorpID = alIDs.get(0).toString();
          // 参数,,,,
          if (alIDs.get(1) != null)
            saParamCode = (String[]) alIDs.get(1);
          // 查 系统参数
          alInitRet.add(dmoMisc.getSysParam(sCorpID, saParamCode));
          // 用户对应的公司
          // alInitParam.get(1)是用户ID
          alInitRet.add(dmoMisc.getUserCorpIDs((String) alInitParam
              .get(1)));

          nc.bs.sm.createcorp.CreatecorpBO bo1 = new nc.bs.sm.createcorp.CreatecorpBO();
          String[] sdate = bo1.queryEnabledPeriod(sCorpID, "IC");

          if (sdate != null && sdate.length > 2) {
            // nc.bs.bd.pub.PeriodCallBO bo2 = new
            // nc.bs.bd.pub.PeriodCallBO();
            AccountCalendar ac = AccountCalendar.getInstance();
            ac.set(sdate[0], sdate[1]);
            nc.vo.bd.period2.AccperiodmonthVO voAccperiodmonth = ac
                .getMonthVO();// bo2.findByYearAndMonth(sdate[0],
                        // sdate[1]);

            if (voAccperiodmonth != null)
              alInitRet.add(voAccperiodmonth.getBegindate()
                  .toString());

          }
          // 返回值
          objRet = alInitRet;
        }
        break;
      case QryInfoConst.BILL_SIGNED:
        // 是否已签字

        objRet = dmoBill.isSigned((String) oQryCond);

        break;
      case QryInfoConst.BILL_STATUS_TS:
        ArrayList alTsRet = new ArrayList();
        String sSigned = null;
        String billcode = null;
        // 是否已签字

        sSigned = dmoBill.getBillStatus((String) oQryCond);
        billcode = dmoBill.queryBillCode((String) oQryCond);

        alTsRet.add(sSigned);
        // qry TimeStamp
        alTsRet.add(dmoBill.getTs((String) oQryCond));
        // 2返回单据号
        alTsRet.add(billcode);
        objRet = alTsRet;
        break;
      case QryInfoConst.INVS_ASTUOM_JOB: // 多个存货,指定辅计量,项目
        alIDs = (ArrayList) oQryCond;
        if (alIDs.get(0) != null)
          alInvID = (ArrayList) alIDs.get(0);
        // 多个存货，指定辅计量
        if (alInvID != null && alInvID.size() > 0) {
          alRet = new ArrayList();
          // temporary variable.
          ArrayList alTemp = null;
          // 临时存货VO
          InvVO voTempInv = null;
          // 项目，项目阶段
          String sJob = null, sJobphase = null;
          String saJobName[] = null;
          for (int i = 0; i < alInvID.size(); i++) {
            alTemp = (ArrayList) alInvID.get(i);
            if (alTemp.size() >= 2) {
              sInvID = (String) alTemp.get(0);
              sAstUOMID = (String) alTemp.get(1);
              voTempInv = dmoMisc.getInvInfo(sInvID, sAstUOMID);
              if (voTempInv == null) { // 如果带辅计量查不到就查不带的。
                nc.vo.scm.pub.SCMEnv
                    .out("@@@cannot qry with astuom.....");
                voTempInv = dmoMisc.getInvInfo(sInvID);
              }
              // 项目
              sJob = (String) alTemp.get(2);
              sJobphase = (String) alTemp.get(3);
              saJobName = dmoMisc.getJobInfo(sJob, sJobphase);
              if (saJobName != null && saJobName.length >= 4) {
                // 项目
                voTempInv.setCprojectid(sJob);
                voTempInv.setCprojectcode(saJobName[0]);
                voTempInv.setCprojectname(saJobName[1]);
                // 项目阶段
                voTempInv.setCprojectphaseid(sJobphase);
                voTempInv.setCprojectphasecode(saJobName[2]);
                voTempInv.setCprojectphasename(saJobName[3]);
              }
              alRet.add(voTempInv);

            } else
              alRet.add(null);
          }
        }
        objRet = alRet;
        break;
      case QryInfoConst.WH_PLANPRICE:
        // 参数：仓库ID,原库存组织ID,单位ID,存货ID
        alIDs = (ArrayList) oQryCond;
        // 仓库
        if (alIDs.get(0) != null)
          sWhID = (String) alIDs.get(0);
        // 上次的库存组织
        String sLastCalBody = (String) alIDs.get(1);
        // 读仓库
        WhVO voWh = dmoMisc.getWhInfo(sWhID);
        // 和上次的库存组织相同，不必重读计划价
        // if (voWh != null && voWh.getPk_calbody() != null &&
        // voWh.getPk_calbody().equals(sLastCalBody))
        if (voWh.getPk_calbody() == null)
          objRet = voWh;
        else {
          // 重读
          sCorpID = (String) alIDs.get(2);
          alInvID = (ArrayList) alIDs.get(3);
          alRet = new ArrayList();
          alRet.add(voWh);
          alRet.add(dmoMisc.getPlanPrice(sWhID, alInvID, null,
              sCorpID));
          objRet = alRet;
        }
        break;
      // add by hanwei 2003-07-30 查询物料档案的计划价格
      case QryInfoConst.CAL_PLANPRICE:
        // 参数：仓库ID,原库存组织ID,单位ID,存货ID
        alIDs = (ArrayList) oQryCond;
        String CalBody = null;
        if (alIDs.get(0) != null)
          sWhID = (String) alIDs.get(0);
        else
          sWhID = "null";
        // 按库存组织查询
        // 库存组织
        if (alIDs.get(1) != null)
          CalBody = (String) alIDs.get(1);

        if (alIDs.get(2) != null)
          sCorpID = (String) alIDs.get(2);

        if (alIDs.get(3) != null)
          sInvID = (String) alIDs.get(3);

        alRet = new ArrayList();
        objRet = dmoMisc.getPlanPrice(sWhID, sInvID, CalBody, sCorpID);
        break;

      // add by hanwei 2003-11-08 按库存组织查询物料档案的计划价格
      case QryInfoConst.CAL_PLANPRICES:
        // 参数：仓库ID,原库存组织ID,单位ID,存货ID
        alIDs = (ArrayList) oQryCond;
        CalBody = null;
        // 按库存组织查询
        // 库存组织
        if (alIDs.get(0) != null)
          CalBody = (String) alIDs.get(0);

        if (alIDs.get(1) != null)
          sCorpID = (String) alIDs.get(1);

        ArrayList alInvIDs = null;
        if (alIDs.get(2) != null)
          alInvIDs = (ArrayList) alIDs.get(2);

        alRet = new ArrayList();
        objRet = dmoMisc.getPlanPrices(CalBody, alInvIDs, sCorpID);
        break;

      case QryInfoConst.PLANPRICE:
        // 参数：存货ID,仓库ID,用户ID,单位ID,
        alIDs = (ArrayList) oQryCond;
        // 仓库
        if (alIDs.get(1) != null)
          sWhID = (String) alIDs.get(1);
        // 重读
        sCorpID = (String) alIDs.get(3);
        sInvID = (String) alIDs.get(0);
        nc.vo.pub.lang.UFDouble ufdPlanPrice = dmoMisc.getPlanPrice(
            sWhID, sInvID, null, sCorpID);
        objRet = ufdPlanPrice;
        break;

      case QryInfoConst.BILL_ITEM:
        // 表体行
        objRet = null;
        GeneralBillItemVO voRetItem = dmoBill.queryBillItem(oQryCond
            .toString());
        if (voRetItem != null) {
          ArrayList alItem = new ArrayList();
          alItem.add(voRetItem);
          objRet = alItem;
        }

        break;
      // case :
      // ATTENTION DMO MAYBE NULL.
      // break;
      }
      return objRet;
    } catch (Exception e) {
      if (e instanceof BusinessException)
        throw (BusinessException) e;
      else
        throw new BusinessException("Caused by:", e);
    }
  }

  /**
   * 创建者：王乃军 功能：修改指定的单据 返回：
   * 
   * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
   * 
   * @param voBill
   *            nc.voUpdatedBill.ic.pub.bill.GeneralBillVO
   */
  private int[][] readSnStatus(GeneralBillVO voUpdatedBill,
      GeneralBillVO voOld) throws BusinessException {
    // 表头
    GeneralBillHeaderVO voUpdatedHeader = voUpdatedBill.getHeaderVO();
    // 表体
    GeneralBillItemVO[] voaUpdatedItem = voUpdatedBill.getItemVOs();
    // 原表体
    GeneralBillItemVO[] voaOldItem = voOld.getItemVOs();

    // 原来的单据行：key:cgeneralbid
    Hashtable htOldItems = new Hashtable();
    // 原表体放到hashtable中，以加速查找。
    for (int i = 0; i < voaOldItem.length; i++)
      if (voaOldItem[i] != null && voaOldItem[i].getPrimaryKey() != null)
        htOldItems.put(voaOldItem[i].getPrimaryKey(), voaOldItem[i]);
      else
        nc.vo.scm.pub.SCMEnv.out("fatal:old bill item null");

    // 获得行的出入库属性.
    int iaInOut[] = voUpdatedBill.getBillItemInOutPty();
    int rowcount = voaUpdatedItem.length;
    int ia2SnStatus[][] = new int[rowcount][2];

    // 表体id
    String sBodyPK = null;
    // 原行的出入库属性暂存
    int iInOutPty = InOutFlag.SPECIAL;
    // 暂存状态
    int iTempSnStatus = VOStatus.UNCHANGED;
    // 临时变量
    GeneralBillItemVO voTempItem = null;

    for (int row = 0; row < rowcount; row++) {
      ia2SnStatus[row][SN_STA_ORG] = InOutFlag.SPECIAL;
      ia2SnStatus[row][SN_STA_NOW] = InOutFlag.SPECIAL;
      // 清空此行的货位数据
      sBodyPK = voaUpdatedItem[row].getPrimaryKey();
      switch (voaUpdatedItem[row].getStatus()) {
      case VOStatus.NEW:
        // 原来的状态
        ia2SnStatus[row][SN_STA_NOW] = iaInOut[row];
        break;
      case VOStatus.DELETED:
        //
        ia2SnStatus[row][SN_STA_ORG] = iaInOut[row];
        break;
      case VOStatus.UPDATED:
        // 序列号处理
        iTempSnStatus = voaUpdatedItem[row].getSnStatus();
        // 读原行
        voTempItem = (GeneralBillItemVO) htOldItems.get(sBodyPK);
        iInOutPty = GeneralBillVO.getBillItemInOutPty(voUpdatedHeader,
            voTempItem);
        if (iTempSnStatus != VOStatus.UNCHANGED) {
          if (iTempSnStatus == VOStatus.UPDATED
              || iTempSnStatus == VOStatus.DELETED) {
            ia2SnStatus[row][SN_STA_ORG] = iaInOut[row];
            ia2SnStatus[row][SN_STA_NOW] = iInOutPty;
          }
        }
        break;
      case VOStatus.UNCHANGED:
        iTempSnStatus = voaUpdatedItem[row].getSnStatus();
        if (iTempSnStatus != VOStatus.UNCHANGED) {
          if (iTempSnStatus == VOStatus.UPDATED
              || iTempSnStatus == VOStatus.DELETED) {
            ia2SnStatus[row][SN_STA_ORG] = iaInOut[row];
            ia2SnStatus[row][SN_STA_NOW] = iaInOut[row];
          }
        }
        break;
      }
    }
    return ia2SnStatus;

  }

  /**
   * 李俊 功能：修改条码关闭标志 bbarcodeclose -> true/false
   * 参数：alParam.get(0)->sHeadPK,alParam.get(1)->alBids,alParam.get(2)->alTs
   * 返回： 例外： 日期：(2004-10-11 13:21:48) 修改日期，修改人，修改原因，注释标志：
   * 
   */
  public ArrayList revBBarcodeClose(ArrayList alParam, UFBoolean bUFflag)
      throws BusinessException {
    try {

      if (alParam == null || alParam.size() != 3)
        return null;
      ArrayList alBIDs = (ArrayList) alParam.get(1);
      ArrayList alTss = (ArrayList) alParam.get(2);
      if (alBIDs.size() <= 0 || alTss.size() <= 0
          || alBIDs.size() != alTss.size())
        return null;

      // get the ts of the sHeadPK

      String sHeadPk = (String) alParam.get(0);

      GeneralBillDMO dmo = new GeneralBillDMO();
      GeneralBillItemVO[] voaItemDB = dmo.queryBillItemTs(sHeadPk);
      // push voaItemDB's bid and ts to hash
      if (voaItemDB == null) {
        throw new BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("4008bill",
                "UPP4008bill-000179")/* @res "新增单据不能执行条码关闭！" */);
      }
      int iHashLen = voaItemDB.length;
      Hashtable htDB = new Hashtable();
      for (int i = 0; i < iHashLen; i++) {
        if (voaItemDB[i].getPrimaryKey() != null)
          htDB
              .put(voaItemDB[i].getPrimaryKey(), voaItemDB[i]
                  .getTs());
      }

      // compare with current ts. if not conver with current's, throw
      // error hint;
      int iSize = alBIDs.size();

      String sPKBody = null;
      String tsTemp = null;

      for (int i = 0; i < iSize; i++) {
        sPKBody = (String) alBIDs.get(i);
        tsTemp = (String) alTss.get(i);
        if (htDB.containsKey(sPKBody)) {
          // compare with the ts
          if (!htDB.get(sPKBody).equals(tsTemp))
            throw new BusinessException(nc.bs.ml.NCLangResOnserver
                .getInstance().getStrByID("4008bill",
                    "UPP4008bill-000180")/*
                                 * @res
                                 * "有人进行单据操作，请重新查询单据数据！"
                                 */);
        }
      }
      // execute revBBarcodeClose,
      dmo.revBBarcodeClose(alParam, bUFflag);
      // fresh the ts. fresh voitem.
      freshTsBodyItem(alParam);

    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }

    // return the freshed voItems (ArrayList)
    return alParam;
  }

  /**
   * 创建者：王乃军 功能：保存一张单据，区分新增还是修改 参数： 返回：提示信息 例外： 日期：(2001-6-14 9:07:50)
   * 修改日期，修改人，修改原因，注释标志：
   */
  protected ArrayList saveBill(GeneralBillVO voNewBill)
      throws BusinessException {
    // 参数检查
    if (voNewBill == null || voNewBill.getHeaderVO() == null) {
      nc.vo.scm.pub.SCMEnv.out("param null ");
      return null;
    }
    try {
      // 返回的PK们
      ArrayList alRes = null;
      if (voNewBill != null) {
        // 区分新增还是修改用单据PK
        String sBillPK = (String) voNewBill.getHeaderVO()
            .getPrimaryKey();
        String sBillCode = voNewBill.getHeaderVO().getVbillcode();
        voNewBill.synProvider();

        // 修改人：刘家清 修改日期：2007-12-14下午01:47:01 修改原因：处理pk_corp 臃余字段
        GeneralBillBOHelper.dealPkCorp(voNewBill);
        // 没有单据PK表明是新增保存.
        if (sBillPK == null) {
          // if (sBillCode == null || sBillCode.trim().length() == 0)
          // {
          // //如果没有单据号，则利用单据号规则，生成单据号，置入单据VO中。
          // sBillCode =
          // getBillCode(
          // voNewBill.getHeaderVO().getCbilltypecode(),
          // voNewBill.getHeaderVO().getPk_corp(),
          // getBillCodeObjVO(voNewBill));
          // voNewBill.getHeaderVO().setVbillcode(sBillCode);

          // }

          alRes = insertThisBill(voNewBill);
        } else
          // 否则是修改保存.
          alRes = updateThisBill(voNewBill);

        // 保存批次号
        saveBatchCode(voNewBill);
      }
      return alRes;
    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }
    return null;

  }

  /**
   * 创建者：仲瑞庆 功能：保存单据 参数：当前的单据VO，原来的单据Object (实际是个VO) 返回：PK 例外： 日期：(2001-8-30
   * 16:30:16) 修改日期，修改人，修改原因，注释标志：
   * 
   * @param svoBill
   *            nc.vo.ic.pub.bill.GeneralBillVO
   * @exception BusinessException
   *                异常说明。
   * 
   */
  protected ArrayList saveBill(GeneralBillVO voCur, Object voPre)
      throws BusinessException {
    // return saveBill(voCur,voPre);
    // 修改现存量可以加在这，前提是ts检查正确，并且平台注册脚本中传入了原来的单据。
    // 参数检查
    Timer t = new Timer();
    t.start();
    if (voCur == null || voCur.getHeaderVO() == null) {
      nc.vo.scm.pub.SCMEnv.out("param null ");
      return null;
    }
    
    //单据数据完整性检查，防止外部导入或其它模块来的数据出问题（因55可是大量生成实收发单据）
    VOCheck.checkBillVOBusi(voCur);
          
    try {
      
//    二次开发扩展
      nc.bs.scm.plugin.InvokeEventProxy iep = new nc.bs.scm.plugin.InvokeEventProxy(ICConst.MODULE_IC,voCur.getHeaderVO().getCbilltypecode());
      iep.beforeAction(nc.vo.scm.plugin.Action.SAVE, 
              new GeneralBillVO[]{voCur}, null);
      
      // 返回的PK们
      ArrayList alRes = null;
      
      ScaleSetter.getInstance().setScaleWhenSave(voCur);

      if (voCur != null) {

        // ydy 由来源单据必须保证
        try {

          VOCheck.checkNumInput(voCur.getChildrenVO(),
              "csourcebillbid");
        } catch (ICNumException e1) {

          throw new BusinessException(e1.getHint());
        }

        // 区分新增还是修改用单据PK
        //String sBillPK = (String) voCur.getHeaderVO().getPrimaryKey();
        //String sBillCode = voCur.getHeaderVO().getVbillcode();
        int iBillStatus = voCur.getHeaderVO().getStatus();
        nc.vo.scm.pub.SCMEnv.out("单据保存：单据状态，" + iBillStatus);

        // 根据参数IC062是否保存条码，设置Vo，如为N则清条码数据
        // 重新查询条码的两个参数并设置到VO中，IC062，IC063：特殊单生成其它出入没有控制住引起
        // 修改人：刘家清 修改日期：2007-8-15上午09:24:39
        // 修改原因：根据新需求，取消库存参数“出入库扫描时是否保存条码”，把此参数移到条码规则中
        GeneralBillBOHelper.reCheckBarCodeParam(voCur);

        // 处理货位[OldVO]及检查
        // checkLocator((GeneralBillVO)voPre);
        // 处理货位及检查
        checkLocator(voCur);
        t.showExecuteTime("new** 处理货位及检查--@@");

        // VMI仓库供应商必输，去掉动作脚本中的检查
        if (voCur != null) {
          CheckInvVendorDMO dmo = new CheckInvVendorDMO();

          dmo.checkVmiVendorInput(voCur);
          //voCur.synProvider();
        }
        t.showExecuteTime("new** 供应商必输检查及入库供应商同步--@@");

        // 检查自定义项匹配
        CheckDMO dmo = new CheckDMO();
        dmo.checkDef(voCur);
        t.showExecuteTime("new** 单据自定义项检查--@@");

        // 填充单据中存货的计划价格
        fillPlanPrice(voCur);

        // 执行保存
        // v5 处理pk_corp 臃余字段
        GeneralBillBOHelper.dealPkCorp(voCur);

        // 保存批次号
        saveBatchCode(voCur);

        if (iBillStatus == nc.vo.pub.VOStatus.NEW
            || voCur.getHeaderVO().isImportData()) {

          alRes = insertThisBill(voCur);
          nc.vo.scm.pub.SCMEnv.out("单据保存：单据状态新增加");
        } else {

          // 增加对单据状态的检查 and lock
          new CheckBusiDMO().checkBillStatusFor(
              new GeneralBillVO[] { voCur },
              nc.vo.ic.pub.GenMethod.BillAction.Update);

          alRes = updateThisBill(voCur, (GeneralBillVO) voPre);
          nc.vo.scm.pub.SCMEnv.out("单据保存：单据状态修改");
        }

        // 华浮 检查入库数量>累计出库数量
        new CheckBusiDMO().checkCorNum(voCur.getHeaderVO()
            .getCgeneralhid());

        // 修改人:刘家清 修改日期:2007-04-13 修改原因:把条码唯一性和结存检查放到单据保存后
        // 入库时是否检查条码唯一性 出库时是否检查条码结存
        (new CheckBarcodeDMO()).checkBCOnhandAndRepeat(voCur);

        t.showExecuteTime("new** 单据保存总时间--@@");
      }
      
//    二次开发扩展
      iep.afterAction(nc.vo.scm.plugin.Action.SAVE, 
              new GeneralBillVO[]{voCur}, null);
      
      return alRes;
    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }
    return null;

  }

  /**
   * 
   * 方法功能描述：填充单据中所有存货的计划价格（如果为空）。
   * <p>
   * <b>参数说明</b>
   * 
   * @param vo
   *            单据的VO对象
   * @author duy
   * @throws Exception
   * @time 2007-5-17 下午01:36:35
   */
  public void fillPlanPrice(GeneralBillVO vo) throws BusinessException {
    try {
      // 补客户基本
      if (vo.getHeaderVO() != null
          && vo.getHeaderVO().getCcustomerid() != null
          && nc.vo.ic.pub.GenMethod.isSEmptyOrNull((String) vo
              .getHeaderValue("pk_cubasdocC"))) {
        new ICSmartToolsDmo().fillVOValueBy(
            new GeneralBillHeaderVO[] { vo.getHeaderVO() },
            "pk_cubasdocC", "ccustomerid", "bd_cumandoc",
            "pk_cubasdoc", "pk_cumandoc", null);
      }
      if (!vo.isGetPlanPriceAtBs()
          || nc.vo.ic.pub.GenMethod.isSEmptyOrNull(vo.getHeaderVO()
              .getPk_calbody()))
        return;
      GeneralBillItemVO[] items = vo.getItemVOs();
      ArrayList<String> invids = new ArrayList<String>(items.length);
      for (GeneralBillItemVO item : items) {
        if (nc.vo.ic.pub.GenMethod.isEQZeroOrNull(item
            .getNplannedprice()))
          invids.add(item.getCinventoryid());
      }
      if (invids.size() == 0)
        return;

      // V51 从仓储型库存组织向成本型库存组织转换
      // 单据的计划价应该取自相应的成本型型库存组织，而不是仓储型库存组织
      String pkCostCalbody = storeToCost(vo.getHeaderVO().getPk_corp(),
          vo.getHeaderVO().getPk_calbody(), vo.getHeaderVO()
              .getCwarehouseid());

      // 查询计划价
      PriceDMO dmoPrice = new PriceDMO();
      Hashtable htPrice = dmoPrice.getPrdPlanPrice(vo.getHeaderVO()
          .getPk_corp(), pkCostCalbody, null, invids
          .toArray(new String[invids.size()]));

      // 填充计划价和计划金额
      for (GeneralBillItemVO item : items) {
        if (htPrice.containsKey(item.getCinventoryid())) {
          item.setNplannedprice((UFDouble) htPrice.get(item
              .getCinventoryid()));
          item.getInv().setNplannedprice(item.getNplannedprice());
        }
      }
    } catch (Exception e) {
      // 日志异常
      nc.vo.scm.pub.SCMEnv.out(e);
      // 库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
    }
  }

  /**
   * 
   * 方法功能描述：根据仓储型库存组织和仓库获得对应的成本型库存组织，如果没有相应的成本型库存组织，则返回仓储型库存组织。
   * <p>
   * <b>examples:</b>
   * <p>
   * String pkCostCalbody = storeToCost("THE PK OF CORP", "THE PK OF STORE
   * CALBODY", "THE PK OF STORDOC");
   * <p>
   * <b>参数说明</b>
   * 
   * @param pk_corp
   *            公司ID
   * @param pk_storcalbody
   *            仓储型库存组织的ID
   * @param pk_stordoc
   *            仓库的ID
   * @return 对应的成本型库存组织ID
   *         <p>
   * @author duy
   * @time 2007-3-13 上午10:23:22
   */
  private String storeToCost(String pk_corp, String pk_storcalbody,
      String pk_stordoc) throws BusinessException {
    String pkCostCalbody = null;

    // 根据仓储型库存组织和仓库获得对应的成本型库存组织
    StorVSCostBO bo = new StorVSCostBO();
    try {
      pkCostCalbody = bo.getCostCalBody(pk_corp, pk_storcalbody,
          pk_stordoc);
    } catch (BusinessException e) {
      throw GenMethod.handleException(null, e);
      // 日志异常
      // nc.vo.scm.pub.SCMEnv.out(e);
    }

    // 如果成本型库存组织为空，则返回仓储型库存组织
    if (pkCostCalbody == null || pkCostCalbody.length() == 0)
      pkCostCalbody = pk_storcalbody;

    return pkCostCalbody;
  }

  /**
   * 创建者：韩卫 功能：保存一张单据的条码 参数： 返回：提示信息 例外： 日期：(2001-6-14 9:07:50)
   * 修改日期，修改人，修改原因，注释标志：
   */
  public String saveBillBarcode(GeneralBillVO voNewBill)
      throws BusinessException {
    // 参数检查
    if (voNewBill == null || voNewBill.getHeaderVO() == null) {
      nc.vo.scm.pub.SCMEnv.out("param null ");
      return null;
    }

    ArrayList aDirtyList = null;
    ArrayList aUpdateList = null;
    StringBuffer sbErro = null;
    try {
      // if (1 == 1)
      // throw new BusinessException("需要在修改后的单据中执行改方法");
      // 返回的PK们
      ArrayList alRes = null;
      if (voNewBill != null) {
        // 区分新增还是修改用单据PK
        String sPkCorp = voNewBill.getPk_corp();
        String sBillPK = (String) voNewBill.getHeaderVO()
            .getPrimaryKey();
        String sBillCode = voNewBill.getHeaderVO().getVbillcode();
        // 没有单据PK表明是新增保存.
        if (sBillPK == null) {
          throw new BusinessException(nc.bs.ml.NCLangResOnserver
              .getInstance().getStrByID("4008bill",
                  "UPP4008bill-000181")/*
                               * @res
                               * "需要在修改后的单据中执行改方法"
                               */);
        } else // 否则是修改保存.
        {
          // 2003-06-10 预置pk
          // 检查表头的TS
          if (voNewBill.bSaveBarcodeFinal()) {

            // 修改人：刘家清 修改日期：2007-12-14下午01:47:01 修改原因：处理pk_corp 臃余字段
            GeneralBillBOHelper.dealPkCorp(voNewBill);

            ArrayList alUpdateItem = new ArrayList();
            GeneralBillItemVO[] voaItem = voNewBill.getItemVOs();
            GeneralBillItemVO itemvo = null;

            // 获得所有的更新行
            alUpdateItem = getBarcodeUPdateItem(voaItem, false);

            if (alUpdateItem != null && alUpdateItem.size() > 0) {

              // ts 校验
              GeneralBillItemVO[] voaUpateItem = new GeneralBillItemVO[alUpdateItem
                  .size()];
              alUpdateItem.toArray(voaUpateItem);

              nc.bs.ic.pub.check.CheckDMO checkdmo = new nc.bs.ic.pub.check.CheckDMO();
              ArrayList alresult = checkdmo
                  .checkTimeStamp(voaUpateItem);

              if (alresult != null && alresult.size() >= 2) {
                aDirtyList = (ArrayList) alresult.get(0);
                aUpdateList = (ArrayList) alresult.get(1);
                GeneralBillItemVO itemvoDirty = null;

                if (aDirtyList != null && aDirtyList.size() > 0) {
                  // 警告提示信息
                  sbErro = new StringBuffer(
                      "\n"
                          + nc.bs.ml.NCLangResOnserver
                              .getInstance()
                              .getStrByID(
                                  "4008bill",
                                  "UPP4008bill-000348")/*
                                               * @res
                                               * "下列行的存货条码已经被其他人修改"
                                               */
                          + nc.bs.ml.NCLangResOnserver
                              .getInstance()
                              .getStrByID(
                                  "4008bill",
                                  "UPP4008bill-000330")/*
                                               * @res
                                               * "："
                                               */
                          + "\n");
                  for (int i = 0; i < aDirtyList.size(); i++) {
                    itemvoDirty = (GeneralBillItemVO) aDirtyList
                        .get(i);
                    sbErro
                        .append(nc.bs.ml.NCLangResOnserver
                            .getInstance()
                            .getStrByID("4008bill",
                                "UPP4008bill-000349")/*
                                             * @res
                                             * "行"
                                             */
                            + ":"
                            + itemvoDirty
                                .getCrowno()
                            + ","
                            + nc.bs.ml.NCLangResOnserver
                                .getInstance()
                                .getStrByID(
                                    "common",
                                    "UC000-0001439")/*
                                             * @res
                                             * "存货"
                                             */
                            + ":"
                            + itemvoDirty
                                .getInvname()
                            + "\n");
                  }
                  sbErro
                      .append(nc.bs.ml.NCLangResOnserver
                          .getInstance()
                          .getStrByID("4008bill",
                              "UPP4008bill-000350")/*
                                           * @res
                                           * "以上行未保存，被重新刷新！"
                                           */);
                }
                
                //更新现存量开始，获取保存前信息
                FixOnhandnumDMO onhanddmo = null;
                try{
                  onhanddmo = new FixOnhandnumDMO();
                }catch(Exception e){
                  throw GenMethod.handleException(null, e);
                }
                
                ArrayList lbeforeinvonhand = onhanddmo.updateOnHandBegin(voNewBill,ICConst.OnHandUpdateType.Onhand_BarcodeOnly);   

                GeneralBillDMO dmoBill = getBillDMO();
                // 更新aUpdateList的：deleteBarCode，insertBarCode
                if (aUpdateList != null
                    && aUpdateList.size() > 0) {
                  GeneralBillItemVO[] voaUpateItemNew = new GeneralBillItemVO[aUpdateList
                      .size()];

                  aUpdateList.toArray(voaUpateItemNew);
                  // 执行aUpdateList的：条码关闭和非关闭

                  alRes = dmoBill.setBillBarcodePrimaryKeys(
                      voaUpateItemNew, sPkCorp);
                  // 删除条码,必须放在表体行删除前面
                  deleteBarCode(voaUpateItemNew, true);
                  // 插入条码数据
                  insertBarCode(voaUpateItemNew, true);
                  // 更新行ts和条码数量，是否关闭
                  dmoBill
                      .updateItemBarcodeNumBatch(aUpdateList);

                }
                
                
                //更新现存量完成，实际更新现存量表
                onhanddmo.updateOnHandEnd(voNewBill,null, lbeforeinvonhand,ICConst.OnHandUpdateType.Onhand_BarcodeOnly); 

                // 修改人:刘家清 修改日期:2007-04-13
                // 修改原因:把条码唯一性和结存检查放到单据保存后

                // 入库时是否检查条码唯一性 出库时是否检查条码结存
                (new CheckBarcodeDMO())
                    .checkBCOnhandAndRepeat(voNewBill);

                // 刷新整单ts和条码
                freshTs(voNewBill, sBillPK);
                // 更新条码
                dmoBill.queryBillItemBarCode(voNewBill
                    .getItemVOs());
                int xx = 0;
              }

            }

          }
        }

      }
      if (sbErro == null)
        return null;
      else
        return sbErro.toString();

    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }
    return null;

  }

  /**
   * 创建者：余大英 功能：签字 参数：
   * 
   * 返回： 例外： 日期：(2001-6-14 14:46:54) 修改日期，修改人，修改原因，注释标志：
   */
  protected ArrayList signBill(GeneralBillVO voAuditBill)
      throws BusinessException {
    try {
      if (voAuditBill == null)
        throw new BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("4008bill",
                "UPP4008bill-000162")/* @res "VO参数错误。" */);

      GeneralBillHeaderVO voHead = (GeneralBillHeaderVO) voAuditBill
          .getParentVO();
      if (voHead == null)
        throw new BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("4008bill",
                "UPP4008bill-000162")/* @res "VO参数错误。" */);
      return signBills(new GeneralBillVO[] { voAuditBill });

      /*
       * //参数准备 ArrayList alParam = new ArrayList(); //参数 ArrayList alP =
       * new ArrayList(); //总参数 ArrayList alRes = new ArrayList(); //执行结果
       * 
       * String sBillPK = voHead.getCgeneralhid(); String sRegisterID =
       * voHead.getCregister(); String sCorpID = voHead.getPk_corp();
       * String sCurDate = null; if (voHead.getDaccountdate() != null)
       * sCurDate = voHead.getDaccountdate().toString(); else throw new
       * BusinessException("库房签字时发现非法的数据：没有签字日期。"); //签字时检查签字日期不能晚于业务日期add
       * by zhx
       * 
       * isSignLateBusiDate(voAuditBill);
       * 
       * 
       * alParam.add(sBillPK); alParam.add(sRegisterID);
       * alParam.add(sCorpID); alParam.add(sCurDate); alP.add(alParam);
       * 
       * 
       * //出入库单DMO GeneralBillDMO dmoBill = getBillDMO();
       * 
       * try {
       * 
       * alRes.add(dmoBill.sign(voAuditBill)); } catch (Exception e) {
       * throw e;
       * 
       * return alRes;
       */
    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }
    return null;

  }
  
  /**
   * 支持保存即签字，因此需要处理处理数据。
   * 
   * 返回： 例外： 日期：(2001-6-14 14:46:54) 修改日期，修改人，修改原因，注释标志：
   * 
   */
//  protected GeneralBillVO[] processBillsForSign(GeneralBillVO[] voAuditBills)
//      throws BusinessException {
//     if(voAuditBills==null || voAuditBills.length<=0)
//       return voAuditBills;
//     ArrayList<GeneralBillItemVO> listitemvo = new ArrayList<GeneralBillItemVO>();
//     for(int i=0;i<voAuditBills.length;i++){
//       GeneralBillVO billvo = voAuditBills[i];
//       //GeneralBillHeaderVO headvo =  billvo.getHeaderVO();
//       GeneralBillItemVO[] itemvos = billvo.getItemVOs();
//       if(itemvos==null || itemvos.length<=0)
//         throw new BusinessException("单据表体为空，不能签字");
//       for(GeneralBillItemVO itemvo : itemvos){
//         if(itemvo.getStatus()==VOStatus.DELETED)
//           continue;
//         if(itemvo.getNinnum()==null && itemvo.getNoutnum()==null)
//           throw new BusinessException("单据表体行的实收发数量为空，不能签字");
//         listitemvo.add(itemvo);
//       }
//       if(listitemvo==null || listitemvo.size()<=0)
//         throw new BusinessException("单据表体为空，不能签字");
//       if(listitemvo.size()!=itemvos.length){
//         itemvos = listitemvo.toArray(new GeneralBillItemVO[listitemvo.size()]);
//         billvo.setChildrenVO(itemvos);
//       }
//       listitemvo.clear();
//     }
//     return voAuditBills;
//  }

  /**
   * 创建者：余大英 功能：签字 参数：
   * 
   * 返回： 例外： 日期：(2001-6-14 14:46:54) 修改日期，修改人，修改原因，注释标志：
   * 
   */
  protected ArrayList signBills(GeneralBillVO[] voAuditBills)
      throws BusinessException {
    try {
      
//    二次开发扩展
      nc.bs.scm.plugin.InvokeEventProxy iep = new nc.bs.scm.plugin.InvokeEventProxy(ICConst.MODULE_IC,voAuditBills[0].getHeaderVO().getCbilltypecode());
      iep.beforeAction(nc.vo.scm.plugin.Action.AUDIT, 
              voAuditBills, null);
      
      new CheckBusiDMO().checkBillStatusFor(voAuditBills,
          nc.vo.ic.pub.GenMethod.BillAction.Audit);
      // 修改人：刘家清 修改日期：2007-11-14下午03:50:26 修改原因：设置修改单据据的签字时间
      GeneralBillBOHelper.setSignBillInitDateTime(voAuditBills);
      //voAuditBills = processBillsForSign(voAuditBills);
      GeneralBillDMO dmoBill = getBillDMO();
      for (int i = 0; i < voAuditBills.length; i++) {
        CheckDMO.appendInvWhInfo(voAuditBills[i]);
      }
      dmoBill.sign(voAuditBills);
      // v5 lj : 签字补单
      GeneralBillBOHelper.modifyBillsSign(voAuditBills, true);
      // end v5 lj
      // 更新时间
      freshTs(voAuditBills[0], voAuditBills[0].getPrimaryKey());
      
//    二次开发扩展
      iep.afterAction(nc.vo.scm.plugin.Action.AUDIT, 
              voAuditBills, null);

    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }
    return null;

    // try {
    // if (voAuditBill == null)
    // throw new BusinessException("VO参数错误。");

    // GeneralBillHeaderVO voHead = (GeneralBillHeaderVO)
    // voAuditBill.getParentVO();
    // if (voHead == null)
    // throw new BusinessException("VO参数错误。");

    // //参数准备
    // ArrayList alParam = new ArrayList(); //参数
    // ArrayList alP = new ArrayList(); //总参数
    // ArrayList alRes = new ArrayList(); //执行结果

    // String sBillPK = voHead.getCgeneralhid();
    // String sRegisterID = voHead.getCregister();
    // String sCorpID = voHead.getPk_corp();
    // String sCurDate = null;
    // if (voHead.getDaccountdate() != null)
    // sCurDate = voHead.getDaccountdate().toString();
    // else
    // throw new BusinessException("库房签字时发现非法的数据：没有签字日期。");
    // //签字时检查签字日期不能晚于业务日期add by zhx

    // isSignLateBusiDate(voAuditBill);

    // alParam.add(sBillPK);
    // alParam.add(sRegisterID);
    // alParam.add(sCorpID);
    // alParam.add(sCurDate);
    // alP.add(alParam);

    // //业务锁准备
    // //nc.bs.pub.lock.LockBO boLock = new nc.bs.pub.lock.LockBO();
    // //if (sRegisterID == null || sRegisterID.trim().length() == 0)
    // //throw new Exception("库房签字时发现非法的数据：没有操作员。");

    // //boolean bIfCanDO = false; //是否可操作
    // //String saPK[] = null;
    // //出入库单DMO
    // GeneralBillDMO dmoBill = new GeneralBillDMO();

    // //加业务锁,传入所有的PK,当前操作员，不用表名。
    // //saPK = getAllPK(voAuditBill);
    // ////如果需加锁单据，才执行单据加锁。
    // //if (saPK != null && saPK.length > 0)
    // //bIfCanDO = boLock.lockPKArray(saPK, sRegisterID, "");
    // //else
    // //bIfCanDO = true;
    // //if (bIfCanDO) {
    // try {
    // //执行取消签字
    // //alRes = signBills(alP);
    // alRes.add(dmoBill.sign(voAuditBill));
    // } catch (Exception e) {
    // throw e;
    // //} finally { //无论执行情况如何，都解锁。
    // ////如果需加锁单据，才执行源单据解锁
    // //if (saPK != null && saPK.length > 0)
    // //boLock.freePKArray(saPK, sRegisterID, "");
    // }
    // //} else{
    // ////如果需加锁单据，才执行源单据解锁
    // //if (saPK != null && saPK.length > 0)
    // //boLock.freePKArray(saPK, sRegisterID, "");
    // //throw new BusinessException("正在进行相关操作，请稍后再试");
    // //}

    // return alRes;
    // } catch (Exception e) {
    // if (e instanceof BusinessException)
    // throw new RemoteException("Remote Call", e);

    // reportException(e);
    // throw new RemoteException("Remote Call", e);

    // }
  }

  /**
   * 此处插入方法说明。 功能描述: 在nc.bs.ic.pub.bill.GeneralBillBO.deleteThisBill
   * 被调用，用于处理单据序列号的 删除（出入库）
   * 
   * 作者：韩卫 输入参数: 返回值: 异常处理: 日期:(2003-6-23 13:48:40)
   * 
   * @param voCur
   *            nc.vo.ic.pub.bill.GeneralBillVO
   * @exception java.lang.Exception
   *                异常说明。
   * @exception nc.vo.pub.BusinessException
   *                异常说明。 //Result[0] boolean
   *                isOneOpeter:是否都入或都出；True:都入或出；False:既有入又有出； //Result[1]
   *                boolean isInTrue:入False:出 //Result[2]:
   *                aryBillItemAddIn:入库增加 //Result[3]:aryBillItemAddOut：出库增加
   *                //Result[4]:aryBillItemDelIn：入库删除
   *                //Result[5]:aryBillItemDelOut: 出库删除
   *                //Result[6]:arybillItemUpdateIn 入库修改
   *                //Result[7]:aryBillItemUpateOut: 出库修改 //Result[8]:boolean
   *                isSnStatuese: 是否序列号管理
   */
  private String snDelete(GeneralBillVO voCur) throws BusinessException {
    GeneralBillItemVO[] voaItem = voCur.getItemVOs(); // 表体
    // 错误信息
    ArrayList aryEx = null; // 重复的序列号
    ArrayList aryOutorFreeze = null; // 已经出库或已经冻结
    ArrayList aryReturn = null; // 已经出库或已经冻结

    boolean isOneOperate = false; // 是全部入或都是出库 aryResult[0]
    boolean isOperIn = false; // 入库操作 aryResult[1]

    // 遍历表体行，有关信息
    ArrayList aryBillItemDelIn = null; // 入库增加Result[3]
    ArrayList aryBillItemDelOut = null; // 出库增加

    // 遍历表体行
    ArrayList aryResult = getSnStatues(null, voCur, null);
    if (aryResult == null)
      return null;
    // 判断是否序列号管理
    boolean isSnStatuese = ((Boolean) aryResult.get(8)).booleanValue();
    if (!isSnStatuese)
      return null;

    // 判断是否单一操作
    isOneOperate = ((Boolean) aryResult.get(0)).booleanValue();
    isOperIn = ((Boolean) aryResult.get(1)).booleanValue();
    SNDMO sndmo = null;
    try {
      sndmo = new SNDMO();
    } catch (Exception e) {
      // 日志异常
      nc.vo.scm.pub.SCMEnv.out(e);
      // 库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
    }
    aryBillItemDelIn = (ArrayList) aryResult.get(4);
    aryBillItemDelOut = (ArrayList) aryResult.get(5);
    GeneralBillHeaderVO headerV0 = voCur.getHeaderVO();
    if (isOneOperate) {

      String sHeaderHid = headerV0.getPrimaryKey();
      if (isOperIn) { // 整单入库取消校验、取消
        SCMEnv.out("整单删除入库");
        aryOutorFreeze = sndmo.billAllInCancelCheck(sHeaderHid);
        if (aryOutorFreeze == null || aryOutorFreeze.size() == 0) {
          SCMEnv.out("整单入库取消校验合格");
          sndmo.billAllInCancel(sHeaderHid); // 取消入
          SCMEnv.out("整单入库取消完成");

        }
      } else { // 整单出库取消校验、取消
        SCMEnv.out("整单删除出库");
        aryReturn = sndmo.billAllOutCancelCheck(sHeaderHid);
        if (aryReturn == null || aryReturn.size() == 0) {
          sndmo.billAllOutCancel(sHeaderHid);
          SCMEnv.out("整单出库取消完成");
        }
        // 取消入

      }
    } else {
      if (aryBillItemDelIn != null && aryBillItemDelIn.size() > 0) {
        // 单据表体行入库取消校验、取消
        SCMEnv.out("表体行入库行删除");
        aryOutorFreeze = sndmo
            .billItemInCancelCheck(getBillItemAryID(aryBillItemDelIn));
        if (aryOutorFreeze == null || aryOutorFreeze.size() == 0)
          sndmo.billItemInCancel(aryBillItemDelIn);

      }
      if (aryBillItemDelOut != null && aryBillItemDelOut.size() > 0) {
        // 单据表体行出库取消校验、取消
        SCMEnv.out("表体行出库行删除");
        aryReturn = sndmo
            .billItemOutCancelCheck(getBillItemAryID(aryBillItemDelOut));
        if (aryReturn == null || aryReturn.size() == 0)
          sndmo.billItemOutCancel(getBillItemAryID(aryBillItemDelIn));
      }
    }
    
    // 检查序列号是否重复
    aryEx = sndmo.serialDuplicateCheck(voaItem);

    String sMsg = getSnHintMsg(aryEx, null, aryReturn, aryOutorFreeze);
    return sMsg;
  }

  /**
   * 此处插入方法说明。 功能描述: 在nc.bs.ic.pub.bill.GeneralBillBO.insertThisBill
   * 被调用，用于处理单据序列号的 新增（出入库） 作者：韩卫 输入参数: 返回值: 异常处理: 日期:(2003-6-23 13:48:40)
   * 
   * @param voCur
   *            nc.vo.ic.pub.bill.GeneralBillVO
   * @exception java.lang.Exception
   *                异常说明。
   * @exception nc.vo.pub.BusinessException
   *                异常说明。 //Result[0] boolean
   *                isOneOpeter:是否都入或都出；True:都入或出；False:既有入又有出； //Result[1]
   *                boolean isInTrue:入False:出 //Result[2]:
   *                aryBillItemAddIn:入库增加 //Result[3]:aryBillItemAddOut：出库增加
   *                //Result[4]:aryBillItemDelIn：入库删除
   *                //Result[5]:aryBillItemDelOut: 出库删除
   *                //Result[6]:arybillItemUpdateIn 入库修改
   *                //Result[7]:aryBillItemUpateOut: 出库修改 //Result[8]:boolean
   *                isSnStatuese: 是否序列号管理
   */
  protected String snInsert(GeneralBillVO voCur) throws BusinessException {
    GeneralBillItemVO[] voaItem = voCur.getItemVOs(); // 表体
    // 错误信息
    ArrayList aryEx = null; // 重复的序列号
    ArrayList aryOutorFreeze = null; // 已经出库或已经冻结

    // 遍历表体行，有关信息
    boolean isOneOperate = false; // 是全部入或都是出库 aryResult[0]
    boolean isOperIn = false; // 入库操作 aryResult[1]
    ArrayList aryBillItemIn = null; // 入库增加Result[3]
    ArrayList aryBillItemOut = null; // 出库增加

    // 遍历表体行
    ArrayList aryResult = getSnStatues(voCur, null, null);
    if (aryResult == null)
      return null;

    // 判断是否序列号管理
    boolean isSnStatuese = ((Boolean) aryResult.get(8)).booleanValue();
    if (!isSnStatuese)
      return null;

    // 判断是否单一操作
    isOneOperate = ((Boolean) aryResult.get(0)).booleanValue();
    isOperIn = ((Boolean) aryResult.get(1)).booleanValue();

    SNDMO sndmo = null;
    try {
      sndmo = new SNDMO();
    } catch (Exception e) {
      // 日志异常
      nc.vo.scm.pub.SCMEnv.out(e);
      // 库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
    }
    aryBillItemIn = (ArrayList) aryResult.get(2);
    aryBillItemOut = (ArrayList) aryResult.get(3);
    GeneralBillHeaderVO headerV0 = voCur.getHeaderVO();
    long lTime = System.currentTimeMillis();
    if (isOneOperate && isOperIn) { // 执行整单录入
      SCMEnv.out("snInsert:执行整单录入");
      lTime = System.currentTimeMillis();
      sndmo.billItemIn(aryBillItemIn, headerV0);
      SCMEnv.showTime(lTime, "sndmo.billItemIn:");
      // 执行整单录入校验
      lTime = System.currentTimeMillis();
      SCMEnv.out("snInsert:执行整单录入结束");
      SCMEnv.showTime(lTime, "sndmo.billInCheck:");
    } else {
      if (aryBillItemIn != null && aryBillItemIn.size() > 0) {

        SCMEnv.out("snInsert:执行单据行入库录入");
        lTime = System.currentTimeMillis();
        sndmo.billItemIn(aryBillItemIn, headerV0);
        SCMEnv.showTime(lTime, "sndmo.billItemIn:");

        lTime = System.currentTimeMillis();
        SCMEnv.showTime(lTime, "sndmo.billItemInCheck:");
        SCMEnv.out("snInsert:执行单据行入库录入完毕");

      }
      if (aryBillItemOut != null && aryBillItemOut.size() > 0) {
        SCMEnv.out("snInsert:执行单据行出库录入");
        lTime = System.currentTimeMillis();
        aryOutorFreeze = sndmo.billItemOutandCheck(aryBillItemOut,
            headerV0);
        SCMEnv.showTime(lTime, "sndmo.billItemOutandCheck:");
        SCMEnv.out("snInsert:执行单据行出库录入完毕");
      }
    }
    
    // 检查序列号是否重复
    aryEx = sndmo.serialDuplicateCheck(voaItem);
    
    String sMsg = getSnHintMsg(aryEx, null, null, aryOutorFreeze);
    return sMsg;
  }

  /**
   * 此处插入方法说明。 功能描述: 在nc.bs.ic.pub.bill.GeneralBillBO.updateThisBill
   * 被调用，用于处理单据序列号的 删除（出入库）、修改（出入库）、新增（出入库）
   * 
   * 作者：韩卫 输入参数: 返回值: 异常处理: 日期:(2003-6-23 13:48:40)
   * 
   * @param voCur
   *            nc.vo.ic.pub.bill.GeneralBillVO
   * @exception java.lang.Exception
   *                异常说明。
   * @exception nc.vo.pub.BusinessException
   *                异常说明。 //Result[0] boolean
   *                isOneOpeter:是否都入或都出；True:都入或出；False:既有入又有出； //Result[1]
   *                boolean isInTrue:入False:出 //Result[2]:
   *                aryBillItemAddIn:入库增加 //Result[3]:aryBillItemAddOut：出库增加
   *                //Result[4]:aryBillItemDelIn：入库删除
   *                //Result[5]:aryBillItemDelOut: 出库删除
   *                //Result[6]:arybillItemUpdateIn 入库修改
   *                //Result[7]:aryBillItemUpateOut: 出库修改 //Result[8]:boolean
   *                isSnStatuese: 是否序列号管理
   */
  protected String snUpdate(GeneralBillVO voCur, Hashtable htOldItems,
      GeneralBillVO voOld) throws BusinessException {
    GeneralBillItemVO[] voaItem = voCur.getItemVOs(); // 表体
    // 错误信息
    ArrayList aryEx = null; // 重复的序列号
    ArrayList aryOutorFreeze = null; // 已经出库或已经冻结
    ArrayList aryReturn = null; // 已经出库或已经冻结

    // 遍历表体行，有关信息
    boolean isOneOperate = false; // 是全部入或都是出库 aryResult[0]
    boolean isOperIn = false; // 入库操作 aryResult[1]

    // 遍历表体行
    ArrayList aryResult = getSnStatues(voCur, voOld, htOldItems);
    if (aryResult == null)
      return null;

    // 判断是否序列号管理
    boolean isSnStatuese = ((Boolean) aryResult.get(8)).booleanValue();
    if (!isSnStatuese)
      return null;

    // 判断是否单一操作
    isOneOperate = ((Boolean) aryResult.get(0)).booleanValue();
    isOperIn = ((Boolean) aryResult.get(1)).booleanValue();
    SNDMO sndmo;
    try {
      sndmo = new SNDMO();
    } catch (Exception e) {
      // 日志异常
      nc.vo.scm.pub.SCMEnv.out(e);
      // 库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
    }
    ArrayList aryBillItemIn = (ArrayList) aryResult.get(2);
    ArrayList aryBillItemOut = (ArrayList) aryResult.get(3);
    ArrayList aryBillItemDelIn = (ArrayList) aryResult.get(4);
    ArrayList aryBillItemDelOut = (ArrayList) aryResult.get(5);
    ArrayList aryBillItemUpdateIn = (ArrayList) aryResult.get(6);
    ArrayList aryBillItemUpdateOut = (ArrayList) aryResult.get(7);

    GeneralBillHeaderVO headerV0 = voCur.getHeaderVO();
    String sHeaderHid = headerV0.getPrimaryKey();
    long lTime = System.currentTimeMillis();
    if (isOneOperate) {

      if (isOperIn) {
        // 整单入库取消校验、取消
        if (aryBillItemUpdateIn != null
            && aryBillItemUpdateIn.size() > 0) {
          lTime = System.currentTimeMillis();
          aryOutorFreeze = sndmo.billAllInCancelCheck(sHeaderHid);
          SCMEnv.showTime(lTime, "sndmo.billAllInCancelCheck:");
          if (aryOutorFreeze == null || aryOutorFreeze.size() == 0) {
            lTime = System.currentTimeMillis();
            sndmo.billAllInCancel(sHeaderHid); // 取消入库
            SCMEnv.showTime(lTime, "sndmo.billAllInCancel:");

            // if (isUsebb2InsertIndex)
            // {
            // lTime = System.currentTimeMillis();
            // aryEx = sndmo.billItemIn(aryBillItemUpdateIn,
            // headerV0); //入库
            // SCMEnv.showTime(lTime, "sndmo.billItemIn:");
            // }
            // else
            // {
            lTime = System.currentTimeMillis();
            sndmo.billItemIn(aryBillItemUpdateIn, headerV0); // 入库
            SCMEnv.showTime(lTime, "sndmo.billItemIn:");

            lTime = System.currentTimeMillis();
            SCMEnv.showTime(lTime, "sndmo.billInCheck:");

            // }
            SCMEnv.out("整单入库修改");
          }
        }

        // 整单删除库取消校验、取消
        if (aryBillItemDelIn != null && aryBillItemDelIn.size() > 0) {
          SCMEnv.out("修改状态：入库取消校验");
          lTime = System.currentTimeMillis();
          aryOutorFreeze = sndmo.billAllInCancelCheck(sHeaderHid);
          SCMEnv.showTime(lTime, "sndmo.billAllInCancelCheck:");

          if (aryOutorFreeze == null || aryOutorFreeze.size() == 0) {
            SCMEnv.out("整单入库取消校验合格");
            lTime = System.currentTimeMillis();

            sndmo.billAllInCancel(sHeaderHid); // 取消入

            SCMEnv.showTime(lTime, "sndmo.billAllInCancel:");
            SCMEnv.out("整单入库取消完成");

          }

        }
        // 修改状态的整单录入
        if (aryBillItemIn != null && aryBillItemIn.size() > 0) {
          lTime = System.currentTimeMillis();
          sndmo.billItemIn(aryBillItemIn, headerV0);
          SCMEnv.showTime(lTime, "sndmo.billItemIn:");
          sHeaderHid = headerV0.getPrimaryKey();
          // 执行整单录入校验
          lTime = System.currentTimeMillis();
          SCMEnv.out("snInsert:执行整单录入结束");
          SCMEnv.showTime(lTime, "sndmo.billInCheck:");
        }

      } else { // 整单出库取消校验、取消
        if (aryBillItemUpdateOut != null
            && aryBillItemUpdateOut.size() > 0) {
          lTime = System.currentTimeMillis();
          aryReturn = sndmo.billAllOutCancelCheck(sHeaderHid);
          SCMEnv.showTime(lTime, "sndmo.billAllOutCancelCheck:");

          if (aryReturn == null || aryReturn.size() == 0) {
            lTime = System.currentTimeMillis();
            sndmo.billAllOutCancel(sHeaderHid);
            SCMEnv.showTime(lTime, "sndmo.billAllOutCancel:");

            lTime = System.currentTimeMillis();
            aryOutorFreeze = sndmo.billItemOutandCheck(
                aryBillItemUpdateOut, headerV0);
            SCMEnv.showTime(lTime, "sndmo.billItemOutandCheck:");

            SCMEnv.out("修改状态：整单出库修改");
          }
        }
        if (aryBillItemDelOut != null && aryBillItemDelOut.size() > 0) {

          SCMEnv.out("修改状态：整单出库取消");
          lTime = System.currentTimeMillis();

          aryReturn = sndmo.billAllOutCancelCheck(sHeaderHid);
          SCMEnv.showTime(lTime, "sndmo.billAllOutCancelCheck:");

          if (aryReturn == null || aryReturn.size() == 0) {
            lTime = System.currentTimeMillis();
            sndmo.billAllOutCancel(sHeaderHid);
            SCMEnv.showTime(lTime, "sndmo.billAllOutCancel:");
            SCMEnv.out("修改状态：整单出库取消完成");
          }
        }

        // 修改状态的整单出库（整单与非整单相同）
        if (aryBillItemOut != null && aryBillItemOut.size() > 0) {
          lTime = System.currentTimeMillis();
          aryOutorFreeze = sndmo.billItemOutandCheck(aryBillItemOut,
              headerV0);
          SCMEnv.showTime(lTime, "sndmo1.billItemOutandCheck:");
          SCMEnv.out("修改状态：新增出库");
        }
      }
    } else // 存在：新增入库、新增出库、删除入库、删除出库、修改入库、修改出库、
    {
      // 删除入库、删除出库
      if (aryBillItemDelIn != null && aryBillItemDelIn.size() > 0) {
        // 单据表体行入库取消校验、取消
        lTime = System.currentTimeMillis();
        aryOutorFreeze = sndmo
            .billItemInCancelCheck(getBillItemAryID(aryBillItemDelIn));
        SCMEnv.showTime(lTime, "sndmo.billItemInCancelCheck:");

        lTime = System.currentTimeMillis();
        if (aryOutorFreeze == null || aryOutorFreeze.size() == 0)
          sndmo.billItemInCancel(aryBillItemDelIn);
        SCMEnv.showTime(lTime, "sndmo.billItemInCancel:");
        SCMEnv.out("修改状态：删除入库");
      }
      if (aryBillItemDelOut != null && aryBillItemDelOut.size() > 0) {
        // 单据表体行出库取消校验、取消
        lTime = System.currentTimeMillis();
        ArrayList aryBillItemDelID = getBillItemAryID(aryBillItemDelOut);
        aryReturn = sndmo.billItemOutCancelCheck(aryBillItemDelID);
        SCMEnv.showTime(lTime, "sndmo.billItemOutCancelCheck");

        lTime = System.currentTimeMillis();
        if (aryReturn == null || aryReturn.size() == 0)
          sndmo.billItemOutCancel(aryBillItemDelID);

        SCMEnv.showTime(lTime, "sndmo.billItemOutCancel:");

        SCMEnv.out("修改状态：删除出库");
      }

      // 修改入库、修改出库
      if (aryBillItemUpdateIn != null && aryBillItemUpdateIn.size() > 0) {
        // 单据表体行出库取消校验、取消
        lTime = System.currentTimeMillis();
        aryOutorFreeze = sndmo
            .billItemInCancelCheck(getBillItemAryID(aryBillItemUpdateIn));
        SCMEnv.showTime(lTime, "sndmo.billItemInCancelCheck:");
        if (aryOutorFreeze == null || aryOutorFreeze.size() == 0) {
          lTime = System.currentTimeMillis();
          sndmo.billItemInCancel(aryBillItemUpdateIn); // 取消入库
          SCMEnv.showTime(lTime, "billItemInCancel");

          // if (isUsebb2InsertIndex)
          // {

          // lTime = System.currentTimeMillis();
          // aryEx = sndmo.billItemIn(aryBillItemUpdateIn, headerV0);
          // //入库
          // SCMEnv.showTime(lTime, "billItemIn");
          // }
          // else
          // {
          lTime = System.currentTimeMillis();
          sndmo.billItemIn(aryBillItemUpdateIn, headerV0); // 入库
          SCMEnv.showTime(lTime, "billItemIn");

          lTime = System.currentTimeMillis();
          SCMEnv.showTime(lTime, "sndmo.billItemInCheck:");
          // }
          SCMEnv.out("修改状态：入库->入库修改");
        }
      }
      if (aryBillItemUpdateOut != null && aryBillItemUpdateOut.size() > 0) {
        // 单据表体行出库取消校验、取消
        ArrayList alUpdateItemID = getBillItemAryID(aryBillItemUpdateOut);
        lTime = System.currentTimeMillis();
        aryReturn = sndmo.billItemOutCancelCheck(alUpdateItemID);
        SCMEnv.showTime(lTime, "sndmo.billItemOutCancelCheck:");

        if (aryReturn == null || aryReturn.size() == 0) {
          sndmo.billItemOutCancel(alUpdateItemID);
          lTime = System.currentTimeMillis();
          aryOutorFreeze = sndmo.billItemOutandCheck(
              aryBillItemUpdateOut, headerV0);
          SCMEnv.showTime(lTime, "sndmo.billItemOutandCheck:");
          SCMEnv.out("修改状态：出库->出库修改");
        }
      }

      // 新增入库、新增出库
      if (aryBillItemIn != null && aryBillItemIn.size() > 0) {

        // if (isUsebb2InsertIndex)
        // {
        // lTime = System.currentTimeMillis();
        // aryEx = sndmo.billItemIn(aryBillItemIn, headerV0);
        // SCMEnv.showTime(lTime, "sndmo.billItemIn:");
        // }
        // else
        // {
        lTime = System.currentTimeMillis();
        sndmo.billItemIn(aryBillItemIn, headerV0);
        SCMEnv.showTime(lTime, "sndmo.billItemIn:");

        lTime = System.currentTimeMillis();
        SCMEnv.showTime(lTime, "sndmo.billItemInCheck:");
        // }
        SCMEnv.out("修改状态：新增入库");
      }
      if (aryBillItemOut != null && aryBillItemOut.size() > 0) {
        lTime = System.currentTimeMillis();
        aryOutorFreeze = sndmo.billItemOutandCheck(aryBillItemOut,
            headerV0);
        SCMEnv.showTime(lTime, "sndmo2.billItemOutandCheck:");
        SCMEnv.out("修改状态：新增出库");
      }

    }
    
    // 检查序列号是否重复
    aryEx = sndmo.serialDuplicateCheck(voaItem);
    
    String sMsg = getSnHintMsg(aryEx, null, aryReturn, aryOutorFreeze);
    return sMsg;

  }

  /**
   * 创建者：王乃军 功能：修改指定的单据 返回：
   * 
   * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
   * 
   * @param voBill
   *            nc.voUpdatedBill.ic.pub.bill.GeneralBillVO
   * @deprecated
   */
  protected ArrayList updateThisBill(GeneralBillVO voUpdatedBill)
      throws BusinessException {
    if (voUpdatedBill == null)
      throw new BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4008bill", "UPP4008bill-000182")/*
                                         * @res
                                         * "修改时传入的参数错误！"
                                         */);
    // 表头
    GeneralBillHeaderVO voUpdatedHeader = voUpdatedBill.getHeaderVO();
    // 表体
    GeneralBillItemVO[] voaUpdatedItem = voUpdatedBill.getItemVOs();

    if (voUpdatedHeader == null || voaUpdatedItem == null
        || voaUpdatedItem.length == 0
        || voUpdatedHeader.getCbilltypecode() == null
        || voUpdatedHeader.getPk_corp() == null
        || voUpdatedHeader.getCbilltypecode().trim().length() == 0
        || voUpdatedHeader.getPk_corp().trim().length() == 0
        || voUpdatedHeader.getPrimaryKey() == null)
      throw new BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4008bill", "UPP4008bill-000172")/*
                                         * @res
                                         * "VO参数错误。传入单据为空，或者无单据、公司编码。"
                                         */);

    // 单据PK
    String sBillPK = voUpdatedHeader.getPrimaryKey().trim();
    // 读入要修改的单据，看是否还存在,只查表头即可。
    GeneralBillDMO dmoBill = getBillDMO();
    GeneralBillHeaderVO voDbBillHeader = dmoBill.queryBillHead(sBillPK);
    // 读入要修改的单据体 !!Must read Locator,不能根据新单据是否有货位数据来判断是否读货位，
    // 因为传入的单据可能删除原有的数量。
    GeneralBillItemVO voaDbBillItem[] = dmoBill.queryBillItemByBillPk(
        sBillPK, true, true);
    if (voDbBillHeader == null || voDbBillHeader.getPk_corp() == null
        && voDbBillHeader.getPrimaryKey() == null)
      throw new BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4008bill", "UPP4008bill-000183")/*
                                         * @res
                                         * "未找到要修改的单据，可能已被其它人删除，请检查。"
                                         */);

    GeneralBillVO voOldBill = new GeneralBillVO();
    voOldBill.setParentVO(voDbBillHeader);
    voOldBill.setChildrenVO(voaDbBillItem);

    return updateThisBill(voUpdatedBill, voOldBill);

  }

  /**
   * 创建者：王乃军 功能：修改指定的单据 返回：
   * 
   * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
   * 
   * @param voBill
   *            nc.voUpdatedBill.ic.pub.bill.GeneralBillVO
   */
  protected ArrayList updateThisBill(GeneralBillVO voUpdatedBill,
      GeneralBillVO voOld) throws BusinessException {

    return updateThisBill_Batch(voUpdatedBill, voOld);

  }

  /**
   * 创建者：王乃军 功能：修改指定的单据 返回：
   * 
   * 例外：检查到其它错误 日期：(2001-6-14 9:11:16) 修改日期，修改人，修改原因，注释标志：
   * 
   * @param voBill
   *            nc.voUpdatedBill.ic.pub.bill.GeneralBillVO
   */
  protected ArrayList updateThisBill_Batch(GeneralBillVO voUpdatedBill,
      GeneralBillVO voOld) throws BusinessException {
    if (voUpdatedBill == null || voOld == null)
      throw new BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4008bill", "UPP4008bill-000182")/*
                                         * @res
                                         * "修改时传入的参数错误！"
                                         */);
    // 表头
    GeneralBillHeaderVO voUpdatedHeader = voUpdatedBill.getHeaderVO();
    // 表体
    GeneralBillItemVO[] voaUpdatedItem = voUpdatedBill.getItemVOs();
    // 原表体
    GeneralBillItemVO[] voaOldItem = voOld.getItemVOs();

    if (voUpdatedHeader == null || voaUpdatedItem == null
        || voaUpdatedItem.length == 0 || voaOldItem == null
        || voaOldItem.length == 0
        || voUpdatedHeader.getCbilltypecode() == null
        || voUpdatedHeader.getPk_corp() == null
        || voUpdatedHeader.getCbilltypecode().trim().length() == 0
        || voUpdatedHeader.getPk_corp().trim().length() == 0
        || voUpdatedHeader.getPrimaryKey() == null)
      throw new BusinessException(nc.bs.ml.NCLangResOnserver
          .getInstance().getStrByID("4008bill", "UPP4008bill-000172")/*
                                         * @res
                                         * "VO参数错误。传入单据为空，或者无单据、公司编码。"
                                         */);
//  更新现存量开始，获取保存前信息
    FixOnhandnumDMO onhanddmo = null;
    try{
      onhanddmo = new FixOnhandnumDMO();
    }catch(Exception e){
      throw GenMethod.handleException(null, e);
    }
    ArrayList lbeforeinvonhand = onhanddmo.updateOnHandBegin(voUpdatedBill,ICConst.OnHandUpdateType.Onhand_All);  
    
    
    // 修改人：刘家清 修改日期：2007-11-14下午01:56:35 修改原因：设置修改单据据的最后修改时间
    GeneralBillBOHelper.setUpdateBillInitDateTime(voUpdatedBill);

    // 修改人：刘家清 修改日期：2008-4-7上午09:32:14 修改原因：把表头库存组织、仓库、单据类型同步到表体中去。
    GeneralBillBOHelper.setBodyAddInfoFromHead(voUpdatedBill, voOld);

    // 原来的单据行：key:cgeneralbid
    Hashtable htOldItems = new Hashtable();
    // 原表体放到hashtable中，以加速查找。
    for (int i = 0; i < voaOldItem.length; i++)
      if (voaOldItem[i] != null && voaOldItem[i].getPrimaryKey() != null)
        htOldItems.put(voaOldItem[i].getPrimaryKey(), voaOldItem[i]);
      else
        nc.vo.scm.pub.SCMEnv.out("fatal:old bill item null");
    Timer t = new Timer();

    // 表体id
    String sBodyPK = null;
    // 单据PK
    String sBillPK = voUpdatedHeader.getPrimaryKey().trim();
    // 公司
    String sCorpID = voUpdatedHeader.getPk_corp().trim();

    // 置成自由态
    voUpdatedHeader.setFbillflag(new Integer(BillStatus.FREE));

    // 出入库单 DMO
    GeneralBillDMO dmoBill = getBillDMO();
    // 货位dmo
    nc.bs.ic.pub.locator.LocatorDMO dmoLoc = null;
    // bb3
    nc.bs.ic.pub.settlement.SettlementDMO dmoStl = null;
    try {
      dmoLoc = new nc.bs.ic.pub.locator.LocatorDMO();
      dmoStl = new nc.bs.ic.pub.settlement.SettlementDMO();
    } catch (SystemException e) {
      // 日志异常
      nc.vo.scm.pub.SCMEnv.out(e);
      // 库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
    } catch (NamingException e) {
      // 日志异常
      nc.vo.scm.pub.SCMEnv.out(e);
      // 库存组异常抛出规范
      throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
    }
    
    
//  修改人：刘家清 修改时间：2008-10-30 下午07:15:32 修改原因：修改仓库时，要清除货位和序列号信息。
    if (null != voUpdatedBill.getHeaderVO() 
  		  && null != voOld.getHeaderVO() && null != voOld.getHeaderVO().getCwarehouseid()
  		  && (null == voUpdatedBill.getHeaderVO().getCwarehouseid()
  				  || (null != voUpdatedBill.getHeaderVO().getCwarehouseid() 
  				  && !voOld.getHeaderVO().getCwarehouseid().equals(voUpdatedBill.getHeaderVO().getCwarehouseid())))){
  	  	  for (GeneralBillItemVO itemVO : voOld.getItemVOs())
  		  if (null != itemVO.getNinnum() || null != itemVO.getNoutnum())
  			  throw new BusinessException("修改前单据有实发数量，不允许修改仓库！");
  	  dmoLoc.deleteLocatorBatch(voOld.getItemVOs());
    }
    
    
    
    // 2003-06-10 预置pk
    ArrayList alNewPK = dmoBill.setBillPrimaryKeys(voUpdatedBill);
    // 适应平台的修改,总是返回第一个是表头的PK 2001/09/26

    // to support 数据挖掘 --------
    ISysInitQry sysdmo = (ISysInitQry) NCLocator.getInstance().lookup(
        ISysInitQry.class.getName());

    // nc.bs.pub.para.SysInitDMO sysdmo = new nc.bs.pub.para.SysInitDMO();
    String IC010 = null;
    // String IC042 = null;
    IC010 = sysdmo.getParaString(sCorpID, "IC010");
    // IC042 = sysdmo.getParaString(sCorpID, "IC042");

    if (IC010 != null && IC010.equals("Y")) {
      t.start();
      dmoBill.copyBill((GeneralBillVO) voOld.clone());
      t.stopAndShow("copybill@@--");
    }

    // 单据类型
    String cbilltypecode = voUpdatedHeader.getCbilltypecode();
    // 序列号错误提示：
    String sSnHintMsg = null;

    t.start();
    Vector vNew = new Vector();
    Vector vUpdate = new Vector();
    Vector vDelete = new Vector();
    Vector vNewLoc = new Vector();
    Vector vItemForDel = new Vector();// 货位修改的行，需要删除
    Vector vBarCodeDel = new Vector();// 条码删除的行
    GeneralBillItemVO[] voItems = voUpdatedBill.getItemVOs();

    for (int i = 0; i < voItems.length; i++) {

      voItems[i].setCgeneralhid(sBillPK);
      // 新增
      if (voItems[i].getStatus() == VOStatus.NEW) {
        vNew.add(voItems[i]);
        // 修改
      } else if (voItems[i].getStatus() == VOStatus.UPDATED) {
        vUpdate.add(voItems[i]);
        if (voItems[i].getLocator() != null
            || (htOldItems != null
                && htOldItems.containsKey(voItems[i]
                    .getPrimaryKey()) && ((GeneralBillItemVO) htOldItems
                .get(voItems[i].getPrimaryKey())).getLocator() != null)) {
          vItemForDel.add(voItems[i]);
        }
        // 删除
      } else if (voItems[i].getStatus() == VOStatus.DELETED) {
        vDelete.add(voItems[i]);
        vBarCodeDel.add(voItems[i]);
        if (voItems[i].getLocator() != null)
          vItemForDel.add(voItems[i]);
        // 未改
      } else if (voItems[i].getStatus() == VOStatus.UNCHANGED) {
        if (voItems[i].getLocator() != null
            && voItems[i].getLocStatus() != VOStatus.UNCHANGED) {
          vItemForDel.add(voItems[i]);
        }
      }

      // 货位
      // zhy2005-05-31 将增货位的条件放宽，以免丢货位（因为目前存在行状态为UPDATE但货位状态为UNCHANGED的情况）
      if ((voItems[i].getStatus() == VOStatus.NEW || voItems[i]
          .getStatus() == VOStatus.UPDATED)
          || (voItems[i].getLocator() != null && (voItems[i]
              .getLocStatus() == VOStatus.NEW || voItems[i]
              .getLocStatus() == VOStatus.UPDATED))) {
        LocatorVO[] voLocs = voItems[i].getLocator();
        if (voLocs != null) {
          for (int j = 0; j < voLocs.length; j++) {
            vNewLoc.add(voLocs[j]);
          }
        }
      }

    }

    // 新增行
    if (vNew.size() > 0) {
      GeneralBillItemVO[] voInsertItems = new GeneralBillItemVO[vNew
          .size()];
      vNew.copyInto(voInsertItems);
      // ljun:插入前先计算条码数量
      for (int i = 0; i < voInsertItems.length; i++) {
        voInsertItems[i].calBarcodeNum();
      }
      dmoBill.insertItemBatch(voInsertItems);
      if (dmoStl.hasBB3(cbilltypecode))
        dmoStl.insertBB3Batch(voInsertItems);
    }

    // 修改行
    if (vUpdate.size() > 0) {
      GeneralBillItemVO[] voUpdateItems = new GeneralBillItemVO[vUpdate
          .size()];
      vUpdate.copyInto(voUpdateItems);

      // ljun:插入前先计算条码数量
      for (int i = 0; i < voUpdateItems.length; i++) {
        voUpdateItems[i].calBarcodeNum();
      }
      dmoBill.updateItemBatch(voUpdateItems);

    }

    // if (!voUpdatedBill.isSaveBarcodeDelFirst()) {
    // ////删除条码,必须放在表体行删除前面
    // deleteBarCode(voUpdatedBill);
    // // by hanwei 2004-03-23 插入条码数据
    // insertBarCode(voUpdatedBill, false);
    // } else //先删除，后插入
    // {
    deleteBarCodeAllBill(voUpdatedBill);
    insertBarCode(voUpdatedBill, true);
    // }

    // 对只修改条码的更新行，执行修改条码状态自动更新
    // by hanwei 2004-10-11
    ArrayList alUpdateByBarcodeItems = getBarcodeUPdateItem(voUpdatedBill
        .getItemVOs(), true);
    dmoBill.updateItemBarcodeNumBatch(alUpdateByBarcodeItems);

    if (vItemForDel.size() > 0) {
      GeneralBillItemVO[] voDelItems = new GeneralBillItemVO[vItemForDel
          .size()];
      vItemForDel.copyInto(voDelItems);
      // 删除有关行的货位信息
      dmoLoc.deleteLocatorBatch(voDelItems);

    }
    // 货位包含新增和修改的货位
    if (vNewLoc.size() > 0) {
      LocatorVO[] voLocs = new LocatorVO[vNewLoc.size()];
      vNewLoc.copyInto(voLocs);
      dmoLoc.insertLocatorBatch(voLocs);
    }

    t.stopAndShow("modify item,loc,sn,...@@--");
    // 判断序列号的状态，出现在返回结果中的序列号都是有问题的。
    // 可能有的业务检查错误信息
    // by hanwei 2003-06-24 序列号优化
    String sMsg = snUpdate(voUpdatedBill, htOldItems, voOld);
    StringBuffer sbAllErrMsg = new StringBuffer();

    if (sMsg != null && sMsg.length() > 0)
      sbAllErrMsg.append(sMsg);
    // 有错误，抛出异常。
    if (sbAllErrMsg.toString().length() > 0)
      throw new BusinessException(sbAllErrMsg.toString());

    // 删除行
    if (vDelete.size() > 0) {
      GeneralBillItemVO[] voDeleteItems = new GeneralBillItemVO[vDelete
          .size()];
      vDelete.copyInto(voDeleteItems);
      if (dmoStl.hasBB3(cbilltypecode))
        dmoStl.deleteBB3Batch(voDeleteItems);

      dmoBill.deleteItemBatch(voDeleteItems);
      // 删除有关行的条码信息
      deleteBarcodeBillItems(voDeleteItems);
    }

    // addied by liuzy 2008-04-03 填充表头非空项
    //2008-05-30 杨波要求注释掉
//    fillNotNULLFields(new SmartVO[] { voUpdatedHeader });
    // 修改表头
    dmoBill.updateHeader((GeneralBillHeaderVO) voUpdatedHeader);
    
    
//    修改人：刘家清 修改日期：2008-5-5下午02:26:12 修改原因：根据对应入库单处理出库金额，防止尾差
    processOutBillMnyByCor(voUpdatedBill);

    // 2003-06-02 ydy 置入最新的Ts,否则签字时会检查时间戳不能通过
    t.start();
    freshTs(voUpdatedBill, sBillPK);
    t.stopAndShow("fresh ts@@--");
    // 修改现存量
    // GeneralBillVO voDbBil = new GeneralBillVO();
    // voDbBil.setParentVO(voOld);
    // voDbBil.setChildrenVO((GeneralBi)voOld.getChildrenVO());
    // if (voUpdatedBill.isQtyFilled() || voOld.isQtyFilled()) {
    t.start();
    
//  更新现存量完成，实际更新现存量表
    onhanddmo.updateOnHandEnd(voUpdatedBill,voOld,lbeforeinvonhand,ICConst.OnHandUpdateType.Onhand_All); 
    
//    synchronized (this) {
//      modifyOnhandNum(voUpdatedBill, voOld);
//    }
    t.stopAndShow("m num@@--");
    // }
    return alNewPK;

  }

  /**
   * ?user> 功能： 参数： 返回： 例外： 日期：(2005-1-31 21:52:55) 修改日期，修改人，修改原因，注释标志：
   * 
   * @param voBill
   *            nc.vo.ic.pub.bill.GeneralBillVO
   */
  public void checkLocator(GeneralBillVO voBill) throws BusinessException {
    if (voBill == null || voBill.getChildrenVO() == null
        || voBill.getItemVOs().length == 0)
      return;
    // zhy2005-04-30如果单据是期初出库(42)/期初废品(43)/废品处理单(4P)，则不补空货位，否则签字无法通过
    String sBillTypeCode = voBill.getHeaderVO().getCbilltypecode();
    if (sBillTypeCode == null || sBillTypeCode.equals("42")
        || sBillTypeCode.equals("43") || sBillTypeCode.equals("4P")
        || sBillTypeCode.equals("4X")) {
      return;
    }






    // if(!voBill.isQtyFilled())
    // return;

    // 借入转采购，借出转销售的业务类型不用补货位
    String sBillBusiType = voBill.getHeaderVO().getCbiztypeid(); // 业务类型
    if (sBillBusiType != null && sBillBusiType.length() > 0) {
      String sCorpID = voBill.getHeaderVO().getPk_corp();
      Hashtable htBusitype = null;
      try {
        nc.bs.ic.pub.bill.OnhandnumDMO dmoOnhand = new nc.bs.ic.pub.bill.OnhandnumDMO();
        htBusitype = dmoOnhand.queryBusitype(sCorpID);
      } catch (Exception e) {

      }
      // 返回的哈希表中有此业务类型，不用更新现存量
      if (htBusitype != null && htBusitype.containsKey(sBillBusiType))
        return;
    }

    // 如果不是货位管理的仓库不需要处理货位
    boolean bIsLocatorMgt = false;
    // (null != voBill.getParentVO().getAttributeValue("isLocatorMgt"))
    // && (voBill
    // .getParentVO()
    // .getAttributeValue("isLocatorMgt")
    // .toString()
    // .trim()
    // .equals("1"));
    // if (!bIsLocatorMgt)
    // return;

    try {

      if (voBill.getHeaderVO() != null) {
        String whid = voBill.getHeaderVO().getCwarehouseid();

        nc.bs.ic.pub.QueryInfoDMO dmo = new nc.bs.ic.pub.QueryInfoDMO();
        WhVO vowh = dmo.getWhInfo(whid);
        voBill.setWh(vowh);
        boolean isLoc = false;
        if (vowh != null && vowh.getIsLocatorMgt() != null
            && vowh.getIsLocatorMgt().intValue() == 1)
          isLoc = true;
        // 在途没有放在收货货位
        ArrayList alroaderr = new ArrayList();
        // 在途出库没有跟踪入库
        ArrayList alcor = new ArrayList();
        // 入库跟踪入库
        ArrayList alcorin = new ArrayList();
        // 在途放在放在了普通货位
        ArrayList alerr = new ArrayList();
        ArrayList alnotloc = new ArrayList();

        GeneralBillItemVO[] voItems = voBill.getItemVOs();
        // 处理在途收货货位
        String sRmspace = null;
        if (isLoc)
          sRmspace = dmo.getRmCarg(whid);

        UFBoolean isonroad = null;

        for (int i = 0; i < voItems.length; i++) {
          if (voItems[i].getNinnum() == null
              && voItems[i].getNoutnum() == null)
            continue;

          isonroad = (UFBoolean) voItems[i]
              .getAttributeValue("bonroadflag");

          if (isonroad != null && isonroad.booleanValue()) {

            if (!isLoc) {
              alnotloc.add(voItems[i].getCrowno());
            }

            if (sRmspace != null) {
              LocatorVO[] voLocs = voItems[i].getLocator();
              if (voLocs != null && voLocs.length > 0) {
                for (int j = 0; j < voLocs.length; j++) {
                  if (voLocs[j].getCspaceid() != null
                      && !sRmspace.equals(voLocs[j]
                          .getCspaceid())) {
                    alerr.add(voItems[i].getCrowno());
                    break;
                  }
                  //

                }

              } else {
                voItems[i].getCspaceid();
                voItems[i].setCspaceid(sRmspace);
                voItems[i].synLocator();
                if (voItems[i].getLocator() != null
                    && voItems[i].getLocator().length > 0) {
                  voItems[i].getLocator()[0]
                      .setCwarehouseid(whid);

                  // dw 2005-06-06
                  SerialVO[] serVO = voItems[i].getSerial();
                  // zhy2005-06-08序列号判空
                  if (serVO != null) {
                    for (int p = 0; p < serVO.length; p++) {
                      serVO[p].setCspaceid(sRmspace);
                    }
                    voItems[i].setSerial(serVO);
                  }

                  // 2005-06-06
                  if (voItems[i].getStatus() == VOStatus.UNCHANGED)
                    voItems[i].setStatus(VOStatus.UPDATED);
                }
              }
            } else {

              throw new nc.vo.pub.BusinessException(
                  nc.bs.ml.NCLangResOnserver.getInstance()
                      .getStrByID("4008bill",
                          "UPP4008bill-000483")/*
                                       * @res
                                       * "在途必须入收货货位,请定义收货货位！"
                                       */);
            }
            // 如果在途，必须跟踪入库信息
            if (voItems[i].getInOutFlag() == InOutFlag.OUT) {
              if (voItems[i].getCcorrespondbid() == null)
                alcor.add(voItems[i].getCrowno());

            }
          } else {
            if (sRmspace != null) {
              LocatorVO[] voLocs = voItems[i].getLocator();
              if (voLocs != null && voLocs.length > 0) {
                for (int j = 0; j < voLocs.length; j++) {
                  if (sRmspace
                      .equals(voLocs[j].getCspaceid())) {
                    alroaderr.add(voItems[i].getCrowno());
                    break;
                  }
                  //

                }

              }
            }
          }

          // 如果是入库业务，不需要跟踪入库信息
          if (voItems[i].getInOutFlag() == InOutFlag.IN) {
            if (voItems[i].getCcorrespondbid() != null)
              alcorin.add(voItems[i].getCrowno());

          }

        }
        if (alroaderr.size() > 0) {
          // 下列行存货不能存放在收货货位，请修改单据
          // 改为
          // 货位为收货货位的存货行需要打上在途标记’
          StringBuffer smsg = new StringBuffer(
              nc.bs.ml.NCLangResOnserver.getInstance()
                  .getStrByID("4008bill",
                      "UPP4008bill-000484")/*
                                   * @res
                                   * "下列行存货不能存放在收货货位，请修改单据<"
                                   */
                  + voBill.getHeaderVO().getVbillcode()
                  + ">\n");
          for (int i = 0; i < alroaderr.size(); i++) {
            if (i > 0)
              smsg.append(",");
            smsg.append(alroaderr.get(i).toString());
          }
          throw new nc.vo.pub.BusinessException(smsg.toString());
        }
        if (alerr.size() > 0) {
          StringBuffer smsg = new StringBuffer(
              nc.bs.ml.NCLangResOnserver.getInstance()
                  .getStrByID("4008bill",
                      "UPP4008bill-000485")/*
                                   * @res
                                   * "下列行存货需要放在收货货位，请清空或修改单据<"
                                   */
                  + voBill.getHeaderVO().getVbillcode()
                  + ">\n");
          for (int i = 0; i < alerr.size(); i++) {
            if (i > 0)
              smsg.append(",");
            smsg.append(alerr.get(i).toString());
          }
          throw new nc.vo.pub.BusinessException(smsg.toString());
        }
        if (alcor.size() > 0) {
          StringBuffer smsg = new StringBuffer(
              nc.bs.ml.NCLangResOnserver.getInstance()
                  .getStrByID("4008bill",
                      "UPP4008bill-000486")/*
                                   * @res
                                   * "下列行存货在途必须跟踪入库信息，请修改单据<"
                                   */
                  + voBill.getHeaderVO().getVbillcode()
                  + ">\n");
          for (int i = 0; i < alcor.size(); i++) {
            if (i > 0)
              smsg.append(",");
            smsg.append(alcor.get(i).toString());
          }
          throw new nc.vo.pub.BusinessException(smsg.toString());
        }

        if (alcorin.size() > 0) {
          StringBuffer smsg = new StringBuffer(
              nc.bs.ml.NCLangResOnserver.getInstance()
                  .getStrByID("4008bill",
                      "UPP4008bill-000487")/*
                                   * @res
                                   * "下列行是入库业务，请清除对应入库信息<"
                                   */
                  + voBill.getHeaderVO().getVbillcode()
                  + ">\n");
          for (int i = 0; i < alcorin.size(); i++) {
            if (i > 0)
              smsg.append(",");
            smsg.append(alcorin.get(i).toString());
          }
          throw new nc.vo.pub.BusinessException(smsg.toString());
        }
        if (alnotloc.size() > 0) {
          StringBuffer smsg = new StringBuffer(
              "不是货位管理的仓库，不能打在途标记！请清除<"
                  + voBill.getHeaderVO().getVbillcode()
                  + ">\n");
          for (int i = 0; i < alnotloc.size(); i++) {
            if (i > 0)
              smsg.append(",");
            smsg.append(alnotloc.get(i).toString());
          }
          throw new nc.vo.pub.BusinessException(smsg.toString());
        }

        // 处理空货位,按照匹配设置
        appendInDefaultSpace(voBill);
        // 此处不做处理了，在checkSpaceInput中处理
        // voBill.getInsertedLocatorVOs();
        // 检查货位数据

        nc.vo.ic.pub.check.VOCheck.checkSpaceInput(voBill, new Integer(
            voBill.getBillInOutFlag()));

      }

    } catch (Exception e) {
      throw new BusinessException(e.getMessage());

    }
  }

  private void saveBatchCode(GeneralBillVO vo) throws BusinessException {
    BatchcodeImpl impl = new BatchcodeImpl();
    impl.checkandSaveBatchcode(vo);
  }

  private void appendInDefaultSpace(GeneralBillVO vo)
      throws BusinessException {

    // 处理空货位zhy2005-04-05
    GeneralBillHeaderVO hvo = (GeneralBillHeaderVO) vo.getParentVO();

    if (hvo.getIsLocatorMgt() == null
        || hvo.getIsLocatorMgt().intValue() != 1)
      return;

    // zhy2005-04-30如果单据是期初出库(42)/期初废品(43)/废品处理单(4P)，则不补空货位，否则签字无法通过
    String sBillTypeCode = hvo.getCbilltypecode();
    if (sBillTypeCode == null || sBillTypeCode.equals("42")
        || sBillTypeCode.equals("43") || sBillTypeCode.equals("4P")
        || sBillTypeCode.equals("4X"))
      return;






    GeneralBillItemVO[] bvos = (GeneralBillItemVO[]) vo.getChildrenVO();
    LocatorVO[] voLocs = null;
    if (hvo == null || bvos == null)
      return;

    ArrayList alinv = new ArrayList();
    for (int i = 0; i < bvos.length; i++) {

      if (bvos[i].getInOutFlag() == InOutFlag.IN
          && bvos[i].getLocator() == null)
        alinv.add(bvos[i].getCinventoryid());

    }

    if (alinv.size() <= 0)
      return;

    HashMap hmSpace = null;

    try {
      String[] invids = new String[alinv.size()];
      alinv.toArray(invids);
      hmSpace = new StorectlDMO().getDefaultSpace(invids, vo
          .getHeaderVO().getCwarehouseid());
    } catch (Exception e) {
      GenMethod.throwBusiException(e);

    }
    if (hmSpace == null || hmSpace.size() == 0)
      return;

    for (int row = 0; row < bvos.length; row++) {
      voLocs = bvos[row].getLocator();
      if (voLocs == null || voLocs.length == 0) {

        bvos[row].setCspaceid((String) hmSpace.get(bvos[row]
            .getCinventoryid()));
        bvos[row].synLocator();
        /*
         * zhy2005-05-23 捡货更新现存量时删除行的ninnum/noutnum可能为空，
         * 这种情况同步货位数据时是不补货位数据的（货位数据为null），因此此处应做判空处理
         */
        if (bvos[row].getLocator() != null) {
          if (bvos[row].getLocator()[0] != null)
            bvos[row].getLocator()[0].setCwarehouseid(hvo
                .getCwarehouseid());
        }
        if (bvos[row].getLocStatus() == VOStatus.UNCHANGED)
          bvos[row].setLocStatus(VOStatus.UPDATED);
        // }
      }
    }

  }

  /**
   * 创建人：刘家清 创建日期：2007-6-26上午11:26:32 创建原因：查询指定PK的单据行。 参数：String[] sBodyPK
   * 返回：GeneralBillItemVO[] 例外： 修改日期，修改人，修改原因，注释标志：
   */
  public GeneralBillItemVO[] queryBillItem(String[] sBodyPK)
      throws BusinessException {
    try {
      GeneralBillDMO dmo = getBillDMO();
      return dmo.queryBillItem(sBodyPK);
    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }
    return null;
  }

  /**
   * 方法功能描述：保存前填充要求非空的空字段
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * 
   * @param voHeads
   *            <p>
   * @author liuzy
   * @time 2008-4-2 下午04:57:35
   */
/*  public void fillNotNULLFields(SmartVO[] voHeads) throws BusinessException {
    if (null == voHeads || voHeads.length < 1)
      return;
    // 需要填充的字段
    String[] fields = { ItemKeyS.pk_calbody, ItemKeyS.cwarehouseid,
        ItemKeyS.cdptid, ItemKeyS.cwhsmanagerid, ItemKeyS.cdispatcherid };

    for (int i = 0; i < voHeads.length; i++) {
      for (int j = 0; j < fields.length; j++) {
        if (null != voHeads[i]
            && voHeads[i].getVOMeta().getColumnsIndexByName()
                .keySet().contains(fields[j])
            && (null == voHeads[i].getAttributeValue(fields[j]) || ""
                .equals(voHeads[i].getAttributeValue(fields[i]))))
          voHeads[i].setAttributeValue(fields[j],
              nc.vo.ic.pub.GenMethod.STRING_NULL);
      }
    }

  }*/

  /**
   * 创建人：刘家清 创建日期：2008-5-5下午02:23:05 创建原因：根据对应入库单处理出库金额，防止尾差
   * 
   * @param vo
   * @throws BusinessException
   */
  public void processOutBillMnyByCor(GeneralBillVO outvo)
      throws BusinessException {
    if (outvo == null)
      return;

    // 根据来源单据，获取来源单据的信息：数量，金额，累计出库数量；
    GeneralBillItemVO[] itemvos = (GeneralBillItemVO[]) outvo
        .getChildrenVO();

    HashMap<String, ICGenVO> hssrcinfo = null;
    try {

      hssrcinfo = getCcorrespondInfo(itemvos);
      if (hssrcinfo == null || hssrcinfo.size() <= 0)
        return;

      UFDouble d0 = new UFDouble(0);
      HashMap hsitem = new HashMap();
      GeneralBillItemVO preitemvo = null;
      String srcbillrowid = null;
      for (int i = 0, loop = itemvos.length; i < loop; i++) {
        if (itemvos[i].getStatus() == VOStatus.DELETED
            || itemvos[i].getStatus() == VOStatus.UNCHANGED)
          continue;
        if (itemvos[i].getFlargess() != null
            && itemvos[i].getFlargess().booleanValue())
          continue;

        srcbillrowid = itemvos[i].getCcorrespondbid();

        if (srcbillrowid == null || itemvos[i].getNoutnum() == null
            || itemvos[i].getNoutnum().compareTo(d0) == 0)
          continue;

        preitemvo = (GeneralBillItemVO) hsitem.get(srcbillrowid);
        if (preitemvo == null) {
          hsitem.put(srcbillrowid, itemvos[i]);
          continue;
        }

        if (preitemvo.getNoutnum() != null
            && itemvos[i].getNoutnum() != null
            && preitemvo.getNoutnum().compareTo(
                itemvos[i].getNoutnum()) < 0) {
          hsitem.put(srcbillrowid, itemvos[i]);
        }
      }

      if (hsitem.size() < 0)
        return;

      itemvos = (GeneralBillItemVO[]) hsitem.values().toArray(
          new GeneralBillItemVO[hsitem.size()]);
      ICGenVO datavo = null;
      final String diffnmny = "diffnmny";//,diffntaxmny = "diffntaxmny", diffnsalemny = "diffnsalemny", diffnquotemny = "diffnquotemny";
      UFDouble diffmny = null, nquotemny = null;
      boolean bdiff = false;
      ArrayList updatevolist = new ArrayList();
      for (int i = 0, loop = itemvos.length; i < loop; i++) {
        if (itemvos[i].getStatus() == VOStatus.DELETED
            || itemvos[i].getStatus() == VOStatus.UNCHANGED)
          continue;
        if (itemvos[i].getFlargess() != null
            && itemvos[i].getFlargess().booleanValue())
          continue;
        bdiff = false;

        srcbillrowid = itemvos[i].getCcorrespondbid();

        if (srcbillrowid == null)
          continue;

        datavo = (ICGenVO) hssrcinfo.get(srcbillrowid);
        if (datavo == null)
          continue;

        diffmny = datavo.getUFDoubleValue(diffnmny);
        if (diffmny != null && diffmny.compareTo(d0) != 0
            && itemvos[i].getNmny() != null) {
          itemvos[i].setNmny(itemvos[i].getNmny().add(diffmny));
          bdiff = true;
        }
        
/*        diffmny = datavo.getUFDoubleValue(diffntaxmny);
        if (diffmny != null && diffmny.compareTo(d0) != 0
            && itemvos[i].getNtaxmny() != null) {
          itemvos[i].setNtaxmny(itemvos[i].getNtaxmny().add(diffmny));
          bdiff = true;
        }

        diffmny = datavo.getUFDoubleValue(diffnsalemny);
        if (diffmny != null && diffmny.compareTo(d0) != 0
            && itemvos[i].getNsalemny() != null) {
          itemvos[i].setNsalemny(itemvos[i].getNsalemny()
              .add(diffmny));
          bdiff = true;
        }

        diffmny = datavo.getUFDoubleValue(diffnquotemny);
        nquotemny = (UFDouble) itemvos[i]
            .getAttributeValue("nquotemny");
        if (diffmny != null && diffmny.compareTo(d0) != 0
            && nquotemny != null) {
          itemvos[i].setAttributeValue("nquotemny", nquotemny
              .add(diffmny));
          bdiff = true;
        }*/
        if (bdiff)
          updatevolist.add(itemvos[i]);
      }

      if (updatevolist.size() > 0) {
        itemvos = (GeneralBillItemVO[]) updatevolist
            .toArray(new GeneralBillItemVO[updatevolist.size()]);

        SmartDMO sdmo = new SmartDMO();
        // sdmo.executeUpdateBatch(new
        // GeneralBillHeaderVO[]{outvo.getHeaderVO()},new
        // String[]{"cgeneralhid"},
        // new String[]{"cgeneralhid"});
        /*sdmo.executeUpdateBatch(itemvos, new String[] { "nmny","ntaxmny",
            "nsalemny", "nquotemny" },
            new String[] { "cgeneralbid" });*/
        sdmo.executeUpdateBatch(itemvos, new String[] { "nmny"},
            new String[] { "cgeneralbid" });
        /*String[] ids = new String[itemvos.length];
        for (int i = 0; i < itemvos.length; i++) {
          if (itemvos[i].getCgeneralbid() != null)
            ids[i] = itemvos[i].getCgeneralbid();
        }
        ICSmartToolsDmo tooldmo = new ICSmartToolsDmo();
        HashMap hsids = tooldmo.getValue("ic_general_b", "ts",
            SmartFieldMeta.JAVATYPE_UFDATETIME, "cgeneralbid", ids,
            null);
        if (hsids != null) {
          Object otemp = null;
          for (int i = 0; i < itemvos.length; i++) {
            if (itemvos[i].getCgeneralbid() != null) {
              otemp = hsids.get(itemvos[i].getCgeneralbid());
              if (otemp != null)
                itemvos[i].setAttributeValue("ts", otemp);
            }
          }
        }*/
      }
    } catch (Exception e) {
      GenMethod.throwBusiException(e);
    }

  }

  /**
   * 创建人：刘家清 创建日期：2008-5-5下午02:24:14 创建原因：根据对应入库单查询尾差
   * 
   * @param itemvos
   * @return
   * @throws nc.vo.pub.BusinessException
   * @throws SQLException
   * @throws SystemException
   * @throws NamingException
   */
  private HashMap<String, ICGenVO> getCcorrespondInfo(
      GeneralBillItemVO[] itemvos) throws nc.vo.pub.BusinessException,
      SQLException, SystemException, NamingException {
    HashMap<String, ICGenVO> hsret = new HashMap<String, ICGenVO>();
    ArrayList<String> ccorrespondbidList = new ArrayList<String>();
    UFDouble d0 = new UFDouble(0);
    String srcbillrowid = null;
    if (null == itemvos || 0 == itemvos.length)
      return hsret;
    for (int i = 0, loop = itemvos.length; i < loop; i++) {
      if (itemvos[i].getStatus() == VOStatus.DELETED
          || itemvos[i].getStatus() == VOStatus.UNCHANGED)
        continue;
      if (itemvos[i].getFlargess() != null
          && itemvos[i].getFlargess().booleanValue())
        continue;

      srcbillrowid = itemvos[i].getCcorrespondbid();

      if (srcbillrowid == null || itemvos[i].getNoutnum() == null
          || itemvos[i].getNoutnum().compareTo(d0) == 0)
        continue;

      if (!ccorrespondbidList.contains(srcbillrowid))
        ccorrespondbidList.add(srcbillrowid);

    }
    if (0 == ccorrespondbidList.size())
      return hsret;
    /*String sqlcheck = "select bid,diffnmny,diffntaxmny,diffnsalemny,diffnquotemny from ( "
        + "select bid,sum(nitemnum) as diffnum,sum(nitemmny) as diffnmny,sum(nitemtaxmny) as diffntaxmny,sum(nitemsalemny) as diffnsalemny,sum(nitemquotemny) as diffnquotemny from ( "
        + "select b.cgeneralbid as bid,isnull(b.ninnum,0) as nitemnum,isnull(b.nmny,0) as nitemmny,isnull(b.ntaxmny,0) as nitemtaxmny,isnull(b.nsalemny,0) as nitemsalemny,isnull(b.nquotemny,0) as nitemquotemny "
        + "from ic_general_b b where b.dr = 0 "
        + nc.bs.ic.pub.bill.GeneralSqlString.formInSQL("cgeneralbid",
            ccorrespondbidList)
        + "union "
        + "select b.ccorrespondbid as bid,-1*isnull(b.noutnum,0) as nitemnum,-1*isnull(b.nmny,0) as nitemmny,-1*isnull(b.ntaxmny,0) as nitemtaxmny,-1*isnull(b.nsalemny,0) as nitemsalemny,-1*isnull(b.nquotemny,0) as nitemquotemny "
        + "from ic_general_b b where b.dr = 0 "
        + nc.bs.ic.pub.bill.GeneralSqlString.formInSQL(
            "ccorrespondbid", ccorrespondbidList)
        + ") ff "
        + "group by bid" + ") vv where vv.diffnum = 0 ";*/
    String sqlcheck = "select bid,diffnmny from ( "
      + "select bid,sum(nitemnum) as diffnum,sum(nitemmny) as diffnmny from ( "
      + "select b.cgeneralbid as bid,isnull(b.ninnum,0) as nitemnum,isnull(b.nmny,0) as nitemmny "
      + "from ic_general_b b where b.dr = 0 "
      + nc.bs.ic.pub.bill.GeneralSqlString.formInSQL("cgeneralbid",
          ccorrespondbidList)
      + "union all "
      + "select b.ccorrespondbid as bid,-1*isnull(b.noutnum,0) as nitemnum,-1*isnull(b.nmny,0) as nitemmny "
      + "from ic_general_b b where b.dr = 0 "
      + nc.bs.ic.pub.bill.GeneralSqlString.formInSQL(
          "ccorrespondbid", ccorrespondbidList)
      + ") ff "
      + "group by bid" + ") vv where vv.diffnum = 0 "
    //修改人：刘家清 修改时间：2008-5-20 上午10:06:09 修改原因：只要有一次业务单价的不一致的话，就不处理尾差。
      + "and vv.bid in (select bid from ( "
      + "select bid,count(bid) as npricecount from ( "
      + "select b.cgeneralbid as bid,isnull(b.nprice, 0) as nprice "
      + "from ic_general_b b where b.dr = 0 "
      + nc.bs.ic.pub.bill.GeneralSqlString.formInSQL("cgeneralbid",
          ccorrespondbidList)
      + "union  "
      + "select b.ccorrespondbid as bid,isnull(b.nprice, 0) as nprice "
      + "from ic_general_b b where b.dr = 0 "
      + nc.bs.ic.pub.bill.GeneralSqlString.formInSQL(
          "ccorrespondbid", ccorrespondbidList)
      + ") ee "
      + "group by bid" + ") mm where mm.npricecount = 1) ";
    ICDataSet rset = (new ICSmartToolsDmo()).getDataSet(null, null, null,
        sqlcheck.toString());
    ICGenVO icvo = null;
    String bid = null;
    UFDouble diffnmny = null;
    /*UFDouble diffntaxmny = null;
    UFDouble diffnsalemny = null;
    UFDouble diffnquotemny = null;*/
    for (int i = 0; i < rset.getRowCount(); i++) {
      bid = (String) rset.getValueAt(i, "bid");
      diffnmny = (UFDouble) rset.getValueAt(i, "diffnmny");
      /*diffntaxmny = (UFDouble) rset.getValueAt(i, "diffntaxmny");
      diffnsalemny = (UFDouble) rset.getValueAt(i, "diffnsalemny");
      diffnquotemny = (UFDouble) rset.getValueAt(i, "diffnquotemny");*/
      if (null != bid
          && !"".equals(bid)
          && (null != diffnmny && diffnmny.compareTo(d0) != 0)) {
        icvo = new ICGenVO();
        icvo.setAttributeValue("diffnmny", diffnmny);
        /*icvo.setAttributeValue("diffntaxmny", diffntaxmny);
        icvo.setAttributeValue("diffnsalemny", diffnsalemny);
        icvo.setAttributeValue("diffnquotemny", diffnquotemny);*/
        hsret.put(bid, icvo);
      }

    }
    return hsret;
  }
  
	/**
	 * 动作脚本调用，在数量倒计之后
	 * @param gbvo
	 * @param OperationStatus
	 * @throws BusinessException
	 * 修改人：刘家清 修改时间：2008-9-23 下午03:02:35 修改原因：回写修改成不依赖于前台VO。目前只回写转库单，后续可以添加别的单据。
	 * 
	 */

	public void writeSpecialBill(GeneralBillVO voNew,GeneralBillVO voPre)
	throws BusinessException {
		GeneralBillVO voCur=null;
		int OperationStatus=0;
		if(voNew!=null&&voPre==null){
			OperationStatus=VOStatus.NEW;
			voCur=voNew;
		}
		else if(voNew!=null&&voPre!=null){
			OperationStatus=VOStatus.UPDATED;
			voCur=voNew;
		}
		else if(voNew==null&&voPre!=null){
			OperationStatus=VOStatus.DELETED;
			voCur=voPre;
			
		}
		

			
		ArrayList<String> listSpecialBIDs = new ArrayList<String>();
		ArrayList<String> listSpecialHIDs = new ArrayList<String>();
		if (null == voCur.getItemVOs() || 0 == voCur.getItemVOs().length)
			return;
		for(GeneralBillItemVO itemVO:voCur.getItemVOs()){
			if (null != itemVO.getCsourcetype() && itemVO.getCsourcetype().equals(nc.vo.ic.pub.BillTypeConst.m_transfer)
					&& null != itemVO.getCsourcebillbid() && null != itemVO.getCsourcebillhid()){
				listSpecialBIDs.add(itemVO.getCsourcebillbid());
				listSpecialHIDs.add(itemVO.getCsourcebillhid());
			}
		}
		
		if (null == listSpecialBIDs || 0 == listSpecialBIDs.size())
			return;

		//是否入库单据
		boolean bIsOtherinBill =
			(voCur
				.getHeaderValue("cbilltypecode")
				.equals(nc.vo.ic.pub.BillTypeConst.m_otherIn));

		StringBuilder sqlBuilder = new StringBuilder();//回写转出/转入数量
		StringBuilder sqlBuilderHead = new StringBuilder();//清转出/转入人
		StringBuilder sqlBuilderQuery = new StringBuilder();//超额调拨检查
		if (bIsOtherinBill) {
	/*		sqlBuilder.append("update ic_special_b set (nadjustnum,nadjustastnum) = ( ");
			sqlBuilder.append(" select sum(isnull(ic_general_b.ninnum,0)),sum(isnull(ic_general_b.ninassistnum,0))");
			sqlBuilder.append(" from ic_general_b where ic_general_b.dr = 0 and ic_general_b.csourcetype = '4K' and  ic_general_b.csourcebillbid = ic_special_b.cspecialbid )");*/
			sqlBuilder.append("update ic_special_b set nadjustnum = ( ");
			sqlBuilder.append(" select sum(isnull(ic_general_b.ninnum,0))");
			sqlBuilder.append(" from ic_general_b where ic_general_b.dr = 0 and ic_general_b.csourcetype = '4K' and  ic_general_b.csourcebillbid = ic_special_b.cspecialbid )");
			sqlBuilder.append(" ,nadjustastnum = ( ");
			sqlBuilder.append(" select sum(isnull(ic_general_b.ninassistnum,0))");
			sqlBuilder.append(" from ic_general_b where ic_general_b.dr = 0 and ic_general_b.csourcetype = '4K' and  ic_general_b.csourcebillbid = ic_special_b.cspecialbid )");
			sqlBuilder.append(" where ic_special_b.dr=0 ");
			sqlBuilder.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL("ic_special_b.cspecialbid", listSpecialBIDs));
			
			sqlBuilderHead.append("update ic_special_h set vadjuster = (case when (select sum(isnull(nadjustnum,0)) from ic_special_b where ic_special_b.cspecialhid = ic_special_h.cspecialhid and ic_special_b.dr = 0) > 0 " );
			sqlBuilderHead.append(" then '"+voCur.getHeaderValue("coperatorid")+"' else null end) where ic_special_h.dr= 0 ");
			sqlBuilderHead.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL("ic_special_h.cspecialhid", listSpecialHIDs));
			
		} else {
/*			sqlBuilder.append("update ic_special_b set (nchecknum,ncheckastnum) = ( ");
			sqlBuilder.append(" select sum(isnull(ic_general_b.noutnum,0)),sum(isnull(ic_general_b.noutassistnum,0))");
			sqlBuilder.append(" from ic_general_b where ic_general_b.dr = 0 and ic_general_b.csourcetype = '4K' and  ic_general_b.csourcebillbid = ic_special_b.cspecialbid )");*/
			sqlBuilder.append("update ic_special_b set nchecknum = ( ");
			sqlBuilder.append(" select sum(isnull(ic_general_b.noutnum,0))");
			sqlBuilder.append(" from ic_general_b where ic_general_b.dr = 0 and ic_general_b.csourcetype = '4K' and  ic_general_b.csourcebillbid = ic_special_b.cspecialbid )");
			sqlBuilder.append(",ncheckastnum = ( ");
			sqlBuilder.append(" select sum(isnull(ic_general_b.noutassistnum,0))");
			sqlBuilder.append(" from ic_general_b where ic_general_b.dr = 0 and ic_general_b.csourcetype = '4K' and  ic_general_b.csourcebillbid = ic_special_b.cspecialbid )");
			sqlBuilder.append(" where ic_special_b.dr=0 ");
			sqlBuilder.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL("ic_special_b.cspecialbid", listSpecialBIDs));
			
			sqlBuilderHead.append("update ic_special_h set cauditorid = (case when (select sum(isnull(nchecknum,0)) from ic_special_b where ic_special_b.cspecialhid = ic_special_h.cspecialhid and ic_special_b.dr = 0) > 0 " );
			sqlBuilderHead.append(" then '"+voCur.getHeaderValue("coperatorid")+"' else null end) where ic_special_h.dr= 0 ");
			sqlBuilderHead.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL("ic_special_h.cspecialhid", listSpecialHIDs));
		}
		
		sqlBuilderQuery.append("select b.dshldtransnum,b.nchecknum from ic_special_b b where b.dr = 0 and isnull(dshldtransnum,0) < isnull(nchecknum,0)  ");
		sqlBuilderQuery.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL("b.cspecialbid", listSpecialBIDs));
		
		PersistenceManager sessionManager = null;
		try {
			sessionManager = PersistenceManager.getInstance();
		} catch (Exception e) {
			nc.vo.scm.pub.SCMEnv.error(e);
			throw new BusinessException(e.getMessage());
		}
		
		try {
			JdbcSession session = sessionManager.getJdbcSession();// 开始jdbc会话
			session.addBatch(sqlBuilder.toString());
			session.addBatch(sqlBuilderHead.toString());
			int rows = session.executeBatch();
				
			if (0 >= rows) {
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008busi","UPP4008busi-000086")/*@res "普通单对应的来源单据――转库单 不存在！"*/);
			}
			
			ICDataSet oset = (ICDataSet) session.executeQuery(sqlBuilderQuery.toString(),new ICDataSet());
			if (null != oset && 0 < oset.getRowCount()){
				//报累计转出数量超出许可范围
				StringBuffer errormsg = new StringBuffer();
				errormsg.append(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000026")/*@res "累计转出数量超出许可范围！"*/);
				errormsg.append(
					nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000027")/*@res "[累计转出数量为:"*/
						
						+ oset.getValueAt(0, "nchecknum")
						);
				errormsg.append(
					nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000028")/*@res "[应转数量为:"*/
						
						+ oset.getValueAt(0, "dshldtransnum")
						+ "]"
						);
				throw new nc.vo.pub.BusinessException(errormsg.toString());
			}
			
		} catch (DbException e) {
			if (e.isBadSQLGrammar()) {
				throw new BusinessException(e.getMessage());
			}else if (e.isDataIntegrityViolation()) {
				throw new BusinessException(e.getMessage());
			}else{
				nc.vo.scm.pub.SCMEnv.error(e);
				throw new BusinessException(e.getMessage());
			}
		} catch (Exception ex) {
			nc.vo.scm.pub.SCMEnv.error(ex);
			throw new BusinessException(ex.getMessage());
		} finally {
			sessionManager.release();
		}


	}

}