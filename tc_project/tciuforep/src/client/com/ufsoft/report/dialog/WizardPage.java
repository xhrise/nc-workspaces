/* Generated by Together */

package com.ufsoft.report.dialog;

import javax.swing.JPanel;

import com.ufsoft.report.util.MultiLang;

/**
 * 向导页面类. 实现了IWizardPage接口 页面信息足够时，应通过setPageFinish(boolean)通知向导对话框 页面的初始状态为完成。
 * 
 * @author caijie
 */
public class WizardPage extends nc.ui.pub.beans.UIPanel implements IWizardPage {
	/**
	 * 构造函数
	 * 
	 * @param pageName
	 *            String 页面标题
	 */
	public WizardPage(String pageName) {
		super();
		if (pageName == null) {
			String strError = MultiLang.getString("uiuforep0000717");//"输入参数错误:页面名称不能为空";
			throw new IllegalArgumentException(strError);
		}
		m_strPageName = pageName;
		m_bPageFinish = true;
	}

	/**
	 * 标志拥有该页面的向导
	 */
	private IWizard m_hostWizard = null;

	/**
	 * 该页面的前一个页面
	 */
	private IWizardPage m_previousPage = null;

	/**
	 * 该页面的后一个页面
	 */
	private IWizardPage m_nextPage = null;

	/**
	 * 标志页面是否已经完成
	 */
	private boolean m_bPageFinish = false;

	/**
	 * 页面标题
	 */
	private String m_strPageName = null;

	/**
	 * 获取页面名称
	 * 
	 * @return String
	 */
	public String getName() {
		return m_strPageName;

	}
	/**
	 * 设置界面已经有足够的信息完成 页面信息足够时，应通过此方法来通知向导对话框
	 * 
	 * @param pageFinish
	 */
	public void setPageFinish(boolean pageFinish) {
		m_bPageFinish = pageFinish;
		//设置向导对话框的下一步按钮
		if (this.canFlipToNextPage()) {
			if ((this.getWizard() != null)
					&& (this.getWizard().getContainer() != null)) {
				WizardDialog wizard = (WizardDialog) this.getWizard()
						.getContainer();
				if (wizard.getNextButton() != null)
					wizard.getNextButton().setEnabled(true);
			}
		} else {
			if ((this.getWizard() != null)
					&& (this.getWizard().getContainer() != null)) {
				WizardDialog wizard = (WizardDialog) this.getWizard()
						.getContainer();
				if (wizard.getNextButton() != null)
					wizard.getNextButton().setEnabled(false);
			}
		}
	}

	/**
	 * 如果该页面已经完成而且已经指定下一个页面则返回真
	 * 
	 * @return boolean
	 */
	public boolean canFlipToNextPage() {
		if ((this.m_bPageFinish) && (this.m_nextPage != null)) {
			return true;
		} else {
			return false;
		}
	}
	/**
	 * 页面是否已经完成
	 * 
	 * @return boolean
	 */
	public boolean isPageFinish() {
		return m_bPageFinish;
	}

	/**
	 * 返回该页面的前一个页面
	 * 
	 * @return IWizardPage
	 */
	public IWizardPage getPreviousPage() {
		return m_previousPage;
	}

	/**
	 * 返回该页面的后继页面
	 * 
	 * @return IWizardPage
	 */
	public IWizardPage getNextPage() {
		return m_nextPage;
	}

	/**
	 * 设置该页面的前一个页面
	 * 
	 * @param page
	 *            IWizardPage
	 */
	public void setPreviousPage(IWizardPage page) {
		m_previousPage = page;
		if ((m_previousPage != null) && (m_previousPage.getNextPage() != this)) {
			m_previousPage.setNextPage(this);
		}
	}

	/**
	 * 设置该页面的后继页面
	 * 
	 * @param page
	 *            IWizardPage
	 */
	public void setNextPage(IWizardPage page) {
		m_nextPage = page;
		if ((m_nextPage != null) && (m_nextPage.getPreviousPage() != this)) {
			m_nextPage.setPreviousPage(this);
		}
	}

	/**
	 * 设置该页面的向导
	 * 
	 * @param wizard
	 *            IWizard - 向导
	 */
	public void setWizard(IWizard wizard) {
		m_hostWizard = wizard;
	}

	/**
	 * 返回拥有该页面的向导
	 * 
	 * @return IWizard
	 */
	public IWizard getWizard() {
		return this.m_hostWizard;
	}
}