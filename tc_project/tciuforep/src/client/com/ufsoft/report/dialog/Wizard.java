/* Generated by Together */

package com.ufsoft.report.dialog;

import java.util.ArrayList;

import javax.swing.JDialog;

import com.ufsoft.report.util.MultiLang;

/**
 * 抽象向导类
 * 实现了IWizard接口.
 * 向导对话框中点击完成按钮时调用performFinish()，子类应该重载。
 * 向导对话框中点击取消按钮时调用performCancel()，子类应该重载。
 * 向导信息足够时，应通过setWizardFinish(boolean)来通知向导对话框
 * @author CaiJie
 */
public class  Wizard  implements IWizard {
  /**
   *构造函数
   */
  public Wizard() {
  }

  /**
   * 设置初始的活动页面总数
   */
  private final int INITIAL_MAX_PAGE_NUMBER = 20;

  /**
   * 向导活动页面链表
   * 根据初始的活动页面总数初始化链表
   */
  private ArrayList activePageList = new ArrayList(INITIAL_MAX_PAGE_NUMBER);

  /**
   * 向导所属的对话框
   */
  private JDialog m_container = null;

  /**
   * 向导初始页面
   */
  private IWizardPage m_startingPage = null;
  
  /**
   * 标志向导完成
   */
  private boolean m_bWizardFinish = false;
  /**
   * 是否不需要进一步和用户交流就可以完成向导。
 * @return boolean
   */
   public boolean canFinish(){
       return m_bWizardFinish;
   }
   /**
    * 设置向导完成
    * 向导信息足够时，应通过此方法来通知向导对话框
 * @param WizardFinish
    */
   public void setWizardFinish(boolean WizardFinish) {
     m_bWizardFinish = WizardFinish;
     //设置向导对话框的完成按钮
     if (WizardFinish){
         if((this.getContainer() != null)&&(this.getContainer() instanceof WizardDialog )){
             WizardDialog wizardDialog = (WizardDialog)this.getContainer();
             if (wizardDialog.getOKButton() != null)
                 wizardDialog.getOKButton().setEnabled(true);
         }        
     } else{
         if((this.getContainer() != null)&&(this.getContainer() instanceof WizardDialog )){
             WizardDialog wizardDialog = (WizardDialog)this.getContainer();
             if (wizardDialog.getOKButton() != null)
                 wizardDialog.getOKButton().setEnabled(false);
         }   
     }
   }
  /**
   *功能：添加一个新的向导页面
   *说明：添加到当前使用的向导页面链表的末端。
   * 当活动页面链表中无页面时,自动指定第一加入的页面为初始页面
 * @param newWizardPage
   */
  public void addPage(IWizardPage newWizardPage) {
      if (newWizardPage == null) {
          String strError = MultiLang.getString("uiuforep0000700");//"输入参数错误:新的向导页面不能为空";
          throw new IllegalArgumentException(strError);
      }
    //当活动页面链表中无页面时,自动指定第一加入的页面为初始页面
    if ((getPageCount() == 0) && (m_startingPage == null)) {
      m_startingPage = newWizardPage;
    }

    //当活动页面链表中页面总数超过初始指定的页面数initTotalPageNum时扩充链表
    if (activePageList.size() >= INITIAL_MAX_PAGE_NUMBER) {
      activePageList.ensureCapacity(activePageList.size() + 1);
      activePageList.add(newWizardPage);
    }
    else {
      activePageList.add(newWizardPage);
    }

    //指定新加页面所属的向导
    newWizardPage.setWizard(this); 
    }
  
  /**
   *获取指定页的后继页
   * @param page IWizardPage　指定页
   * @return IWizardPage
   */
  public IWizardPage getNextPage(IWizardPage page) {
    if (page == null) {
        String strError = MultiLang.getString("uiuforep0000701");//"输入参数错误:页面不能为空";
        throw new IllegalArgumentException(strError);
      }
    return page.getNextPage();
  }

  /**
   * 获取指定名称的向导页
   * @param pageName String　向导页的名称
   * @return IWizardPage
   */
  public IWizardPage getPage(String pageName) {
    if(pageName == null){
        String strError = MultiLang.getString("uiuforep0000702");//"输入参数错误:页面名称不能为空";
        throw new IllegalArgumentException(strError);
    }
    IWizardPage result = null;
    int pageNumber = activePageList.size();
    for(int i = 0; i < pageNumber; i++){
      if (((IWizardPage)(activePageList.get(i))).getName().equals(pageName)){
        result = (IWizardPage)(activePageList.get(i));
        break;
      }
    }
    return result;
  }

  /**
   *向导中页面的总数
   * @return int
   */
  public int getPageCount() {
    return activePageList.size();
  }

  /**
   * 已数组形式获取整个向导的所有页面
   * @return IWizardPage[]
   */
  public IWizardPage[] getPages() {
    IWizardPage[] arrPages = new IWizardPage[activePageList.size()];
    for(int i = 0; i < arrPages.length; i++){
      arrPages[i] = (IWizardPage)(activePageList.get(i));
    }
    return arrPages;
  }

  /**
   * 获取指定页的前一页
   * @param page IWizardPage　指定页
   * @return IWizardPage
   */
  public IWizardPage getPreviousPage(IWizardPage page) {
    if(page == null)
        return null;
    return page.getPreviousPage();
  }


  /**
   * 获取向导的初始页
   * @return IWizardPage
   */
  public IWizardPage getStartingPage() {
    return m_startingPage;
  }

  /**
   * 响应向导取消
   * 后继类应该覆盖此函数
   * @return boolean
   */
  public boolean performCancel() {
    return true;
  }

  /**
   * 响应向导完成
   * 后继类应该覆盖此函数
   * @return boolean
   */
  public boolean performFinish(){
      return true;
  }

  /**
   *指定该向导所属的对话框
   * @param wizardDialog WizardDialog
   */
  public void setContainer(JDialog wizardDialog) {
    m_container = wizardDialog;
  }

  /**
   * 返回向导所属的对话框
   * @return WizardDialog
   */
  public JDialog getContainer() {
    return m_container;
  }
  /**
   * 设置起始页面，默认的起始页面是第一个加入向导的页面
   * 创建时间2004-9-14  9:27:48
   * @param startPage - 起始页面
   */
  public void setStartPage(IWizardPage startPage){
      if (startPage == null) {
          String strError = MultiLang.getString("uiuforep0000703");//"输入参数错误:起始页面不能为空";
          throw new IllegalArgumentException(strError);
      }
      m_startingPage = startPage;
  }
  /**
   * 返回起始页面
   * 创建时间2004-9-14  9:27:22
   * @return - 起始页面
   */
  public IWizardPage getStartPage(){
      return m_startingPage;
  }
}
